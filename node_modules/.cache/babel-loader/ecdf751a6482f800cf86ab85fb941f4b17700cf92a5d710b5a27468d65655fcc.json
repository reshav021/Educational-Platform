{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app-copy\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\Progressbar\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Chunk from \"./Chunk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = _ref => {\n  _s();\n  let {\n    duration,\n    onTimeUpdate,\n    chunks\n  } = _ref;\n  const [currentTime, setCurrentTime] = useState(0);\n  const progressBarRef = useRef(null);\n  const handleProgressClick = event => {\n    const progressBar = progressBarRef.current;\n    const progressWidth = progressBar.offsetWidth;\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left;\n    const newTime = progressClicked / progressWidth * duration;\n    onTimeUpdate(newTime);\n  };\n  const handleFullScreenChange = () => {\n    const isFullScreen = document.fullscreenElement !== null;\n  };\n  const progress = currentTime / duration * 100;\n  let chunksToShow = [];\n  chunks.forEach(chunk => {\n    const chunkClass = progress >= chunk.start && progress <= chunk.end ? \"chunk active\" : \"chunk\";\n    if (progress >= chunk.end) {\n      chunksToShow.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: chunkClass\n      }, `${chunk.start}-${chunk.end}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this));\n    }\n  });\n  useEffect(() => {\n    const progressBar = progressBarRef.current;\n    const handleTimeUpdate = () => {\n      setCurrentTime(progressBar.currentTime);\n    };\n    const handleProgressBarClick = event => {\n      event.preventDefault();\n      const clickedTime = event.offsetX / progressBar.offsetWidth * progressBar.duration;\n      progressBar.currentTime = clickedTime;\n    };\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate);\n    progressBar.addEventListener(\"click\", handleProgressBarClick);\n    document.addEventListener(\"fullscreenchange\", handleFullScreenChange);\n    return () => {\n      progressBar.removeEventListener(\"timeupdate\", handleTimeUpdate);\n      progressBar.removeEventListener(\"click\", handleProgressBarClick);\n      document.removeEventListener(\"fullscreenchange\", handleFullScreenChange);\n    };\n  }, []);\n  const renderChunks = () => {\n    return chunks.map((chunk, index) => /*#__PURE__*/_jsxDEV(Chunk, {\n      ...chunk,\n      duration: duration\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-bar\",\n    ref: progressBarRef,\n    onClick: handleProgressClick,\n    children: renderChunks()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgressBar, \"QhvYtuGpkOCqSaKCggv48ZSd9BE=\");\n_c = ProgressBar;\nexport default ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Chunk","jsxDEV","_jsxDEV","ProgressBar","_ref","_s","duration","onTimeUpdate","chunks","currentTime","setCurrentTime","progressBarRef","handleProgressClick","event","progressBar","current","progressWidth","offsetWidth","progressClicked","clientX","getBoundingClientRect","left","newTime","handleFullScreenChange","isFullScreen","document","fullscreenElement","progress","chunksToShow","forEach","chunk","chunkClass","start","end","push","className","fileName","_jsxFileName","lineNumber","columnNumber","handleTimeUpdate","handleProgressBarClick","preventDefault","clickedTime","offsetX","addEventListener","removeEventListener","renderChunks","map","index","ref","onClick","children","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app-copy/my-app/src/Components/SubComponents/Progressbar/ProgressBar.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport Chunk from \"./Chunk\";\r\n\r\nconst ProgressBar = ({ duration, onTimeUpdate, chunks }) => {\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const progressBarRef = useRef(null);\r\n\r\n  const handleProgressClick = (event) => {\r\n    const progressBar = progressBarRef.current;\r\n    const progressWidth = progressBar.offsetWidth;\r\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left;\r\n    const newTime = (progressClicked / progressWidth) * duration;\r\n    onTimeUpdate(newTime);\r\n  };\r\n\r\n  const handleFullScreenChange = () => {\r\n    const isFullScreen = document.fullscreenElement !== null;\r\n    \r\n  };\r\n\r\n  const progress = (currentTime / duration) * 100;\r\n  \r\n  let chunksToShow = [];\r\n\r\n  chunks.forEach((chunk) => {\r\n    const chunkClass =\r\n      progress >= chunk.start && progress <= chunk.end\r\n        ? \"chunk active\"\r\n        : \"chunk\";\r\n\r\n    if (progress >= chunk.end) {\r\n      chunksToShow.push(\r\n        <div className={chunkClass} key={`${chunk.start}-${chunk.end}`} />\r\n      );\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const progressBar = progressBarRef.current;\r\n\r\n    const handleTimeUpdate = () => {\r\n      setCurrentTime(progressBar.currentTime);\r\n    };\r\n\r\n    const handleProgressBarClick = (event) => {\r\n      event.preventDefault();\r\n      const clickedTime = (event.offsetX / progressBar.offsetWidth) * progressBar.duration;\r\n      progressBar.currentTime = clickedTime;\r\n    };\r\n  \r\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate);\r\n    progressBar.addEventListener(\"click\", handleProgressBarClick);\r\n\r\n    document.addEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n  \r\n    return () => {\r\n      progressBar.removeEventListener(\"timeupdate\", handleTimeUpdate);\r\n      progressBar.removeEventListener(\"click\", handleProgressBarClick);\r\n\r\n      document.removeEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n    };\r\n  }, []);\r\n  \r\n\r\n  const renderChunks = () => {\r\n    return chunks.map((chunk, index) => (\r\n      <Chunk key={index} {...chunk} duration={duration} />\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"progress-bar\"\r\n      ref={progressBarRef}\r\n      onClick={handleProgressClick}\r\n    >\r\n      {renderChunks()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,WAAW,GAAGC,IAAA,IAAwC;EAAAC,EAAA;EAAA,IAAvC;IAAEC,QAAQ;IAAEC,YAAY;IAAEC;EAAO,CAAC,GAAAJ,IAAA;EACrD,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMa,cAAc,GAAGd,MAAM,CAAC,IAAI,CAAC;EAEnC,MAAMe,mBAAmB,GAAIC,KAAK,IAAK;IACrC,MAAMC,WAAW,GAAGH,cAAc,CAACI,OAAO;IAC1C,MAAMC,aAAa,GAAGF,WAAW,CAACG,WAAW;IAC7C,MAAMC,eAAe,GAAGL,KAAK,CAACM,OAAO,GAAGL,WAAW,CAACM,qBAAqB,EAAE,CAACC,IAAI;IAChF,MAAMC,OAAO,GAAIJ,eAAe,GAAGF,aAAa,GAAIV,QAAQ;IAC5DC,YAAY,CAACe,OAAO,CAAC;EACvB,CAAC;EAED,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;IACnC,MAAMC,YAAY,GAAGC,QAAQ,CAACC,iBAAiB,KAAK,IAAI;EAE1D,CAAC;EAED,MAAMC,QAAQ,GAAIlB,WAAW,GAAGH,QAAQ,GAAI,GAAG;EAE/C,IAAIsB,YAAY,GAAG,EAAE;EAErBpB,MAAM,CAACqB,OAAO,CAAEC,KAAK,IAAK;IACxB,MAAMC,UAAU,GACdJ,QAAQ,IAAIG,KAAK,CAACE,KAAK,IAAIL,QAAQ,IAAIG,KAAK,CAACG,GAAG,GAC5C,cAAc,GACd,OAAO;IAEb,IAAIN,QAAQ,IAAIG,KAAK,CAACG,GAAG,EAAE;MACzBL,YAAY,CAACM,IAAI,eACfhC,OAAA;QAAKiC,SAAS,EAAEJ;MAAW,GAAO,GAAED,KAAK,CAACE,KAAM,IAAGF,KAAK,CAACG,GAAI,EAAC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,CACnE;IACH;EACF,CAAC,CAAC;EAEFxC,SAAS,CAAC,MAAM;IACd,MAAMe,WAAW,GAAGH,cAAc,CAACI,OAAO;IAE1C,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM;MAC7B9B,cAAc,CAACI,WAAW,CAACL,WAAW,CAAC;IACzC,CAAC;IAED,MAAMgC,sBAAsB,GAAI5B,KAAK,IAAK;MACxCA,KAAK,CAAC6B,cAAc,EAAE;MACtB,MAAMC,WAAW,GAAI9B,KAAK,CAAC+B,OAAO,GAAG9B,WAAW,CAACG,WAAW,GAAIH,WAAW,CAACR,QAAQ;MACpFQ,WAAW,CAACL,WAAW,GAAGkC,WAAW;IACvC,CAAC;IAED7B,WAAW,CAAC+B,gBAAgB,CAAC,YAAY,EAAEL,gBAAgB,CAAC;IAC5D1B,WAAW,CAAC+B,gBAAgB,CAAC,OAAO,EAAEJ,sBAAsB,CAAC;IAE7DhB,QAAQ,CAACoB,gBAAgB,CAAC,kBAAkB,EAAEtB,sBAAsB,CAAC;IAErE,OAAO,MAAM;MACXT,WAAW,CAACgC,mBAAmB,CAAC,YAAY,EAAEN,gBAAgB,CAAC;MAC/D1B,WAAW,CAACgC,mBAAmB,CAAC,OAAO,EAAEL,sBAAsB,CAAC;MAEhEhB,QAAQ,CAACqB,mBAAmB,CAAC,kBAAkB,EAAEvB,sBAAsB,CAAC;IAC1E,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMwB,YAAY,GAAGA,CAAA,KAAM;IACzB,OAAOvC,MAAM,CAACwC,GAAG,CAAC,CAAClB,KAAK,EAAEmB,KAAK,kBAC7B/C,OAAA,CAACF,KAAK;MAAA,GAAiB8B,KAAK;MAAExB,QAAQ,EAAEA;IAAS,GAArC2C,KAAK;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAClB,CAAC;EACJ,CAAC;EAED,oBACErC,OAAA;IACEiC,SAAS,EAAC,cAAc;IACxBe,GAAG,EAAEvC,cAAe;IACpBwC,OAAO,EAAEvC,mBAAoB;IAAAwC,QAAA,EAE5BL,YAAY;EAAE;IAAAX,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACX;AAEV,CAAC;AAAClC,EAAA,CA5EIF,WAAW;AAAAkD,EAAA,GAAXlD,WAAW;AA8EjB,eAAeA,WAAW;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}