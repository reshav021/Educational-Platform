{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global[\"fast-equals\"] = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /**\r\n   * Default equality comparator pass-through, used as the standard `isEqual` creator for\r\n   * use inside the built comparator.\r\n   */\n  function createDefaultIsNestedEqual(comparator) {\n    return function isEqual(a, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, meta) {\n      return comparator(a, b, meta);\n    };\n  }\n  /**\r\n   * Wrap the provided `areItemsEqual` method to manage the circular cache, allowing\r\n   * for circular references to be safely included in the comparison without creating\r\n   * stack overflows.\r\n   */\n  function createIsCircular(areItemsEqual) {\n    return function isCircular(a, b, isEqual, cache) {\n      if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n        return areItemsEqual(a, b, isEqual, cache);\n      }\n      var cachedA = cache.get(a);\n      var cachedB = cache.get(b);\n      if (cachedA && cachedB) {\n        return cachedA === b && cachedB === a;\n      }\n      cache.set(a, b);\n      cache.set(b, a);\n      var result = areItemsEqual(a, b, isEqual, cache);\n      cache.delete(a);\n      cache.delete(b);\n      return result;\n    };\n  }\n  /**\r\n   * Targeted shallow merge of two objects.\r\n   *\r\n   * @NOTE\r\n   * This exists as a tinier compiled version of the `__assign` helper that\r\n   * `tsc` injects in case of `Object.assign` not being present.\r\n   */\n  function merge(a, b) {\n    var merged = {};\n    for (var key in a) {\n      merged[key] = a[key];\n    }\n    for (var key in b) {\n      merged[key] = b[key];\n    }\n    return merged;\n  }\n  /**\r\n   * Whether the value is a plain object.\r\n   *\r\n   * @NOTE\r\n   * This is a same-realm compariosn only.\r\n   */\n  function isPlainObject(value) {\n    return value.constructor === Object || value.constructor == null;\n  }\n  /**\r\n   * When the value is `Promise`-like, aka \"then-able\".\r\n   */\n  function isPromiseLike(value) {\n    return typeof value.then === 'function';\n  }\n  /**\r\n   * Whether the values passed are strictly equal or both NaN.\r\n   */\n  function sameValueZeroEqual(a, b) {\n    return a === b || a !== a && b !== b;\n  }\n  var ARGUMENTS_TAG = '[object Arguments]';\n  var BOOLEAN_TAG = '[object Boolean]';\n  var DATE_TAG = '[object Date]';\n  var REG_EXP_TAG = '[object RegExp]';\n  var MAP_TAG = '[object Map]';\n  var NUMBER_TAG = '[object Number]';\n  var OBJECT_TAG = '[object Object]';\n  var SET_TAG = '[object Set]';\n  var STRING_TAG = '[object String]';\n  var toString = Object.prototype.toString;\n  function createComparator(_a) {\n    var areArraysEqual = _a.areArraysEqual,\n      areDatesEqual = _a.areDatesEqual,\n      areMapsEqual = _a.areMapsEqual,\n      areObjectsEqual = _a.areObjectsEqual,\n      areRegExpsEqual = _a.areRegExpsEqual,\n      areSetsEqual = _a.areSetsEqual,\n      createIsNestedEqual = _a.createIsNestedEqual;\n    var isEqual = createIsNestedEqual(comparator);\n    /**\r\n     * compare the value of the two objects and return true if they are equivalent in values\r\n     */\n    function comparator(a, b, meta) {\n      // If the items are strictly equal, no need to do a value comparison.\n      if (a === b) {\n        return true;\n      }\n      // If the items are not non-nullish objects, then the only possibility\n      // of them being equal but not strictly is if they are both `NaN`. Since\n      // `NaN` is uniquely not equal to itself, we can use self-comparison of\n      // both objects, which is faster than `isNaN()`.\n      if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n        return a !== a && b !== b;\n      }\n      // Checks are listed in order of commonality of use-case:\n      //   1. Common complex object types (plain object, array)\n      //   2. Common data values (date, regexp)\n      //   3. Less-common complex object types (map, set)\n      //   4. Less-common data values (promise, primitive wrappers)\n      // Inherently this is both subjective and assumptive, however\n      // when reviewing comparable libraries in the wild this order\n      // appears to be generally consistent.\n      // `isPlainObject` only checks against the object's own realm. Cross-realm\n      // comparisons are rare, and will be handled in the ultimate fallback, so\n      // we can avoid the `toString.call()` cost unless necessary.\n      if (isPlainObject(a) && isPlainObject(b)) {\n        return areObjectsEqual(a, b, isEqual, meta);\n      }\n      // `isArray()` works on subclasses and is cross-realm, so we can again avoid\n      // the `toString.call()` cost unless necessary by just checking if either\n      // and then both are arrays.\n      var aArray = Array.isArray(a);\n      var bArray = Array.isArray(b);\n      if (aArray || bArray) {\n        return aArray === bArray && areArraysEqual(a, b, isEqual, meta);\n      }\n      // Since this is a custom object, use the classic `toString.call()` to get its\n      // type. This is reasonably performant in modern environments like v8 and\n      // SpiderMonkey, and allows for cross-realm comparison when other checks like\n      // `instanceof` do not.\n      var aTag = toString.call(a);\n      if (aTag !== toString.call(b)) {\n        return false;\n      }\n      if (aTag === DATE_TAG) {\n        // `getTime()` showed better results compared to alternatives like `valueOf()`\n        // or the unary `+` operator.\n        return areDatesEqual(a, b, isEqual, meta);\n      }\n      if (aTag === REG_EXP_TAG) {\n        return areRegExpsEqual(a, b, isEqual, meta);\n      }\n      if (aTag === MAP_TAG) {\n        return areMapsEqual(a, b, isEqual, meta);\n      }\n      if (aTag === SET_TAG) {\n        return areSetsEqual(a, b, isEqual, meta);\n      }\n      // If a simple object tag, then we can prioritize a simple object comparison because\n      // it is likely a custom class. If an arguments tag, it should be treated as a standard\n      // object.\n      if (aTag === OBJECT_TAG || aTag === ARGUMENTS_TAG) {\n        // The exception for value comparison is `Promise`-like contracts. These should be\n        // treated the same as standard `Promise` objects, which means strict equality.\n        return isPromiseLike(a) || isPromiseLike(b) ? false : areObjectsEqual(a, b, isEqual, meta);\n      }\n      // As the penultimate fallback, check if the values passed are primitive wrappers. This\n      // is very rare in modern JS, which is why it is deprioritized compared to all other object\n      // types.\n      if (aTag === BOOLEAN_TAG || aTag === NUMBER_TAG || aTag === STRING_TAG) {\n        return sameValueZeroEqual(a.valueOf(), b.valueOf());\n      }\n      // If not matching any tags that require a specific type of comparison, then we hard-code false because\n      // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\n      //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\n      //     comparison that can be made.\n      //   - For types that can be introspected, but rarely have requirements to be compared\n      //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\n      //     use-cases (may be included in a future release, if requested enough).\n      //   - For types that can be introspected but do not have an objective definition of what\n      //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\n      // In all cases, these decisions should be reevaluated based on changes to the language and\n      // common development practices.\n      return false;\n    }\n    return comparator;\n  }\n\n  /**\r\n   * Whether the arrays are equal in value.\r\n   */\n  function areArraysEqual(a, b, isEqual, meta) {\n    var index = a.length;\n    if (b.length !== index) {\n      return false;\n    }\n    // Decrementing `while` showed faster results than either incrementing or\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\n    // methods like `some` / `every` were not used to avoid incurring the garbage\n    // cost of anonymous callbacks.\n    while (index-- > 0) {\n      if (!isEqual(a[index], b[index], index, index, a, b, meta)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\r\n   * Whether the arrays are equal in value, including circular references.\r\n   */\n  var areArraysEqualCircular = createIsCircular(areArraysEqual);\n\n  /**\r\n   * Whether the dates passed are equal in value.\r\n   *\r\n   * @NOTE\r\n   * This is a standalone function instead of done inline in the comparator\r\n   * to allow for overrides.\r\n   */\n  function areDatesEqual(a, b) {\n    return sameValueZeroEqual(a.valueOf(), b.valueOf());\n  }\n\n  /**\r\n   * Whether the `Map`s are equal in value.\r\n   */\n  function areMapsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n    if (!isValueEqual) {\n      return false;\n    }\n    if (!a.size) {\n      return true;\n    }\n    // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n    // the inability to control the performance of the resulting code. It also avoids excessive\n    // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n    // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n    // equality checks themselves.\n    var matchedIndices = {};\n    var indexA = 0;\n    a.forEach(function (aValue, aKey) {\n      if (!isValueEqual) {\n        return;\n      }\n      var hasMatch = false;\n      var matchIndexB = 0;\n      b.forEach(function (bValue, bKey) {\n        if (!hasMatch && !matchedIndices[matchIndexB] && (hasMatch = isEqual(aKey, bKey, indexA, matchIndexB, a, b, meta) && isEqual(aValue, bValue, aKey, bKey, a, b, meta))) {\n          matchedIndices[matchIndexB] = true;\n        }\n        matchIndexB++;\n      });\n      indexA++;\n      isValueEqual = hasMatch;\n    });\n    return isValueEqual;\n  }\n  /**\r\n   * Whether the `Map`s are equal in value, including circular references.\r\n   */\n  var areMapsEqualCircular = createIsCircular(areMapsEqual);\n  var OWNER = '_owner';\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\r\n   * Whether the objects are equal in value.\r\n   */\n  function areObjectsEqual(a, b, isEqual, meta) {\n    var keysA = Object.keys(a);\n    var index = keysA.length;\n    if (Object.keys(b).length !== index) {\n      return false;\n    }\n    var key;\n    // Decrementing `while` showed faster results than either incrementing or\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\n    // methods like `some` / `every` were not used to avoid incurring the garbage\n    // cost of anonymous callbacks.\n    while (index-- > 0) {\n      key = keysA[index];\n      if (key === OWNER) {\n        var reactElementA = !!a.$$typeof;\n        var reactElementB = !!b.$$typeof;\n        if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {\n          return false;\n        }\n      }\n      if (!hasOwnProperty.call(b, key) || !isEqual(a[key], b[key], key, key, a, b, meta)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\r\n   * Whether the objects are equal in value, including circular references.\r\n   */\n  var areObjectsEqualCircular = createIsCircular(areObjectsEqual);\n\n  /**\r\n   * Whether the regexps passed are equal in value.\r\n   *\r\n   * @NOTE\r\n   * This is a standalone function instead of done inline in the comparator\r\n   * to allow for overrides. An example of this would be supporting a\r\n   * pre-ES2015 environment where the `flags` property is not available.\r\n   */\n  function areRegExpsEqual(a, b) {\n    return a.source === b.source && a.flags === b.flags;\n  }\n\n  /**\r\n   * Whether the `Set`s are equal in value.\r\n   */\n  function areSetsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n    if (!isValueEqual) {\n      return false;\n    }\n    if (!a.size) {\n      return true;\n    }\n    // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n    // the inability to control the performance of the resulting code. It also avoids excessive\n    // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n    // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n    // equality checks themselves.\n    var matchedIndices = {};\n    a.forEach(function (aValue, aKey) {\n      if (!isValueEqual) {\n        return;\n      }\n      var hasMatch = false;\n      var matchIndex = 0;\n      b.forEach(function (bValue, bKey) {\n        if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = isEqual(aValue, bValue, aKey, bKey, a, b, meta))) {\n          matchedIndices[matchIndex] = true;\n        }\n        matchIndex++;\n      });\n      isValueEqual = hasMatch;\n    });\n    return isValueEqual;\n  }\n  /**\r\n   * Whether the `Set`s are equal in value, including circular references.\r\n   */\n  var areSetsEqualCircular = createIsCircular(areSetsEqual);\n  var DEFAULT_CONFIG = Object.freeze({\n    areArraysEqual: areArraysEqual,\n    areDatesEqual: areDatesEqual,\n    areMapsEqual: areMapsEqual,\n    areObjectsEqual: areObjectsEqual,\n    areRegExpsEqual: areRegExpsEqual,\n    areSetsEqual: areSetsEqual,\n    createIsNestedEqual: createDefaultIsNestedEqual\n  });\n  var DEFAULT_CIRCULAR_CONFIG = Object.freeze({\n    areArraysEqual: areArraysEqualCircular,\n    areDatesEqual: areDatesEqual,\n    areMapsEqual: areMapsEqualCircular,\n    areObjectsEqual: areObjectsEqualCircular,\n    areRegExpsEqual: areRegExpsEqual,\n    areSetsEqual: areSetsEqualCircular,\n    createIsNestedEqual: createDefaultIsNestedEqual\n  });\n  var isDeepEqual = createComparator(DEFAULT_CONFIG);\n  /**\r\n   * Whether the items passed are deeply-equal in value.\r\n   */\n  function deepEqual(a, b) {\n    return isDeepEqual(a, b, undefined);\n  }\n  var isShallowEqual = createComparator(merge(DEFAULT_CONFIG, {\n    createIsNestedEqual: function createIsNestedEqual() {\n      return sameValueZeroEqual;\n    }\n  }));\n  /**\r\n   * Whether the items passed are shallowly-equal in value.\r\n   */\n  function shallowEqual(a, b) {\n    return isShallowEqual(a, b, undefined);\n  }\n  var isCircularDeepEqual = createComparator(DEFAULT_CIRCULAR_CONFIG);\n  /**\r\n   * Whether the items passed are deeply-equal in value, including circular references.\r\n   */\n  function circularDeepEqual(a, b) {\n    return isCircularDeepEqual(a, b, new WeakMap());\n  }\n  var isCircularShallowEqual = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, {\n    createIsNestedEqual: function createIsNestedEqual() {\n      return sameValueZeroEqual;\n    }\n  }));\n  /**\r\n   * Whether the items passed are shallowly-equal in value, including circular references.\r\n   */\n  function circularShallowEqual(a, b) {\n    return isCircularShallowEqual(a, b, new WeakMap());\n  }\n  /**\r\n   * Create a custom equality comparison method.\r\n   *\r\n   * This can be done to create very targeted comparisons in extreme hot-path scenarios\r\n   * where the standard methods are not performant enough, but can also be used to provide\r\n   * support for legacy environments that do not support expected features like\r\n   * `RegExp.prototype.flags` out of the box.\r\n   */\n  function createCustomEqual(getComparatorOptions) {\n    return createComparator(merge(DEFAULT_CONFIG, getComparatorOptions(DEFAULT_CONFIG)));\n  }\n  /**\r\n   * Create a custom equality comparison method that handles circular references. This is very\r\n   * similar to `createCustomEqual`, with the only difference being that `meta` expects to be\r\n   * populated with a `WeakMap`-like contract.\r\n   *\r\n   * This can be done to create very targeted comparisons in extreme hot-path scenarios\r\n   * where the standard methods are not performant enough, but can also be used to provide\r\n   * support for legacy environments that do not support expected features like\r\n   * `WeakMap` out of the box.\r\n   */\n  function createCustomCircularEqual(getComparatorOptions) {\n    var comparator = createComparator(merge(DEFAULT_CIRCULAR_CONFIG, getComparatorOptions(DEFAULT_CIRCULAR_CONFIG)));\n    return function (a, b, meta) {\n      if (meta === void 0) {\n        meta = new WeakMap();\n      }\n      return comparator(a, b, meta);\n    };\n  }\n  exports.circularDeepEqual = circularDeepEqual;\n  exports.circularShallowEqual = circularShallowEqual;\n  exports.createCustomCircularEqual = createCustomCircularEqual;\n  exports.createCustomEqual = createCustomEqual;\n  exports.deepEqual = deepEqual;\n  exports.sameValueZeroEqual = sameValueZeroEqual;\n  exports.shallowEqual = shallowEqual;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["createDefaultIsNestedEqual","comparator","isEqual","a","b","_indexOrKeyA","_indexOrKeyB","_parentA","_parentB","meta","createIsCircular","areItemsEqual","isCircular","cache","cachedA","get","cachedB","set","result","delete","merge","merged","key","isPlainObject","value","constructor","Object","isPromiseLike","then","sameValueZeroEqual","ARGUMENTS_TAG","BOOLEAN_TAG","DATE_TAG","REG_EXP_TAG","MAP_TAG","NUMBER_TAG","OBJECT_TAG","SET_TAG","STRING_TAG","toString","prototype","createComparator","_a","areArraysEqual","areDatesEqual","areMapsEqual","areObjectsEqual","areRegExpsEqual","areSetsEqual","createIsNestedEqual","aArray","Array","isArray","bArray","aTag","call","valueOf","index","length","areArraysEqualCircular","isValueEqual","size","matchedIndices","indexA","forEach","aValue","aKey","hasMatch","matchIndexB","bValue","bKey","areMapsEqualCircular","OWNER","hasOwnProperty","keysA","keys","reactElementA","$$typeof","reactElementB","areObjectsEqualCircular","source","flags","matchIndex","areSetsEqualCircular","DEFAULT_CONFIG","freeze","DEFAULT_CIRCULAR_CONFIG","isDeepEqual","deepEqual","undefined","isShallowEqual","shallowEqual","isCircularDeepEqual","circularDeepEqual","WeakMap","isCircularShallowEqual","circularShallowEqual","createCustomEqual","getComparatorOptions","createCustomCircularEqual"],"sources":["C:\\Users\\reshav\\Desktop\\Makonis\\my-app-copy\\my-app\\node_modules\\fast-equals\\src\\utils.ts","C:\\Users\\reshav\\Desktop\\Makonis\\my-app-copy\\my-app\\node_modules\\fast-equals\\src\\comparator.ts","C:\\Users\\reshav\\Desktop\\Makonis\\my-app-copy\\my-app\\node_modules\\fast-equals\\src\\arrays.ts","C:\\Users\\reshav\\Desktop\\Makonis\\my-app-copy\\my-app\\node_modules\\fast-equals\\src\\dates.ts","C:\\Users\\reshav\\Desktop\\Makonis\\my-app-copy\\my-app\\node_modules\\fast-equals\\src\\maps.ts","C:\\Users\\reshav\\Desktop\\Makonis\\my-app-copy\\my-app\\node_modules\\fast-equals\\src\\objects.ts","C:\\Users\\reshav\\Desktop\\Makonis\\my-app-copy\\my-app\\node_modules\\fast-equals\\src\\regexps.ts","C:\\Users\\reshav\\Desktop\\Makonis\\my-app-copy\\my-app\\node_modules\\fast-equals\\src\\sets.ts","C:\\Users\\reshav\\Desktop\\Makonis\\my-app-copy\\my-app\\node_modules\\fast-equals\\src\\index.ts"],"sourcesContent":["import {\n  EqualityComparator,\n  InternalEqualityComparator,\n  TypeEqualityComparator,\n} from '../index.d';\n\n/**\n * Default equality comparator pass-through, used as the standard `isEqual` creator for\n * use inside the built comparator.\n */\nexport function createDefaultIsNestedEqual<Meta>(\n  comparator: EqualityComparator<Meta>,\n): InternalEqualityComparator<Meta> {\n  return function isEqual<A, B>(\n    a: A,\n    b: B,\n    _indexOrKeyA: any,\n    _indexOrKeyB: any,\n    _parentA: any,\n    _parentB: any,\n    meta: Meta,\n  ) {\n    return comparator(a, b, meta);\n  };\n}\n\n/**\n * Wrap the provided `areItemsEqual` method to manage the circular cache, allowing\n * for circular references to be safely included in the comparison without creating\n * stack overflows.\n */\nexport function createIsCircular<\n  AreItemsEqual extends TypeEqualityComparator<any, any>,\n>(areItemsEqual: AreItemsEqual): AreItemsEqual {\n  return function isCircular(\n    a: any,\n    b: any,\n    isEqual: InternalEqualityComparator<WeakMap<any, any>>,\n    cache: WeakMap<any, any>,\n  ) {\n    if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n      return areItemsEqual(a, b, isEqual, cache);\n    }\n\n    const cachedA = cache.get(a);\n    const cachedB = cache.get(b);\n\n    if (cachedA && cachedB) {\n      return cachedA === b && cachedB === a;\n    }\n\n    cache.set(a, b);\n    cache.set(b, a);\n\n    const result = areItemsEqual(a, b, isEqual, cache);\n\n    cache.delete(a);\n    cache.delete(b);\n\n    return result;\n  } as AreItemsEqual;\n}\n\n/**\n * Targeted shallow merge of two objects.\n *\n * @NOTE\n * This exists as a tinier compiled version of the `__assign` helper that\n * `tsc` injects in case of `Object.assign` not being present.\n */\nexport function merge<A extends object, B extends object>(a: A, b: B): A & B {\n  const merged: Record<string, any> = {};\n\n  for (const key in a) {\n    merged[key] = a[key];\n  }\n\n  for (const key in b) {\n    merged[key] = b[key];\n  }\n\n  return merged as A & B;\n}\n\n/**\n * Whether the value is a plain object.\n *\n * @NOTE\n * This is a same-realm compariosn only.\n */\nexport function isPlainObject(value: any): boolean {\n  return value.constructor === Object || value.constructor == null;\n}\n\n/**\n * When the value is `Promise`-like, aka \"then-able\".\n */\nexport function isPromiseLike(value: any): boolean {\n  return typeof value.then === 'function';\n}\n\n/**\n * Whether the values passed are strictly equal or both NaN.\n */\nexport function sameValueZeroEqual(a: any, b: any): boolean {\n  return a === b || (a !== a && b !== b);\n}\n","import { isPlainObject, isPromiseLike, sameValueZeroEqual } from './utils';\n\nimport type {\n  CreateComparatorCreatorOptions,\n  EqualityComparator,\n} from '../index.d';\n\nconst ARGUMENTS_TAG = '[object Arguments]';\nconst BOOLEAN_TAG = '[object Boolean]';\nconst DATE_TAG = '[object Date]';\nconst REG_EXP_TAG = '[object RegExp]';\nconst MAP_TAG = '[object Map]';\nconst NUMBER_TAG = '[object Number]';\nconst OBJECT_TAG = '[object Object]';\nconst SET_TAG = '[object Set]';\nconst STRING_TAG = '[object String]';\n\nconst { toString } = Object.prototype;\n\nexport function createComparator<Meta>({\n  areArraysEqual,\n  areDatesEqual,\n  areMapsEqual,\n  areObjectsEqual,\n  areRegExpsEqual,\n  areSetsEqual,\n  createIsNestedEqual,\n}: CreateComparatorCreatorOptions<Meta>): EqualityComparator<Meta> {\n  const isEqual = createIsNestedEqual(comparator as EqualityComparator<Meta>);\n\n  /**\n   * compare the value of the two objects and return true if they are equivalent in values\n   */\n  function comparator(a: any, b: any, meta: Meta): boolean {\n    // If the items are strictly equal, no need to do a value comparison.\n    if (a === b) {\n      return true;\n    }\n\n    // If the items are not non-nullish objects, then the only possibility\n    // of them being equal but not strictly is if they are both `NaN`. Since\n    // `NaN` is uniquely not equal to itself, we can use self-comparison of\n    // both objects, which is faster than `isNaN()`.\n    if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n      return a !== a && b !== b;\n    }\n\n    // Checks are listed in order of commonality of use-case:\n    //   1. Common complex object types (plain object, array)\n    //   2. Common data values (date, regexp)\n    //   3. Less-common complex object types (map, set)\n    //   4. Less-common data values (promise, primitive wrappers)\n    // Inherently this is both subjective and assumptive, however\n    // when reviewing comparable libraries in the wild this order\n    // appears to be generally consistent.\n\n    // `isPlainObject` only checks against the object's own realm. Cross-realm\n    // comparisons are rare, and will be handled in the ultimate fallback, so\n    // we can avoid the `toString.call()` cost unless necessary.\n    if (isPlainObject(a) && isPlainObject(b)) {\n      return areObjectsEqual(a, b, isEqual, meta);\n    }\n\n    // `isArray()` works on subclasses and is cross-realm, so we can again avoid\n    // the `toString.call()` cost unless necessary by just checking if either\n    // and then both are arrays.\n    const aArray = Array.isArray(a);\n    const bArray = Array.isArray(b);\n\n    if (aArray || bArray) {\n      return aArray === bArray && areArraysEqual(a, b, isEqual, meta);\n    }\n\n    // Since this is a custom object, use the classic `toString.call()` to get its\n    // type. This is reasonably performant in modern environments like v8 and\n    // SpiderMonkey, and allows for cross-realm comparison when other checks like\n    // `instanceof` do not.\n    const aTag = toString.call(a);\n\n    if (aTag !== toString.call(b)) {\n      return false;\n    }\n\n    if (aTag === DATE_TAG) {\n      // `getTime()` showed better results compared to alternatives like `valueOf()`\n      // or the unary `+` operator.\n      return areDatesEqual(a, b, isEqual, meta);\n    }\n\n    if (aTag === REG_EXP_TAG) {\n      return areRegExpsEqual(a, b, isEqual, meta);\n    }\n\n    if (aTag === MAP_TAG) {\n      return areMapsEqual(a, b, isEqual, meta);\n    }\n\n    if (aTag === SET_TAG) {\n      return areSetsEqual(a, b, isEqual, meta);\n    }\n\n    // If a simple object tag, then we can prioritize a simple object comparison because\n    // it is likely a custom class. If an arguments tag, it should be treated as a standard\n    // object.\n    if (aTag === OBJECT_TAG || aTag === ARGUMENTS_TAG) {\n      // The exception for value comparison is `Promise`-like contracts. These should be\n      // treated the same as standard `Promise` objects, which means strict equality.\n      return isPromiseLike(a) || isPromiseLike(b)\n        ? false\n        : areObjectsEqual(a, b, isEqual, meta);\n    }\n\n    // As the penultimate fallback, check if the values passed are primitive wrappers. This\n    // is very rare in modern JS, which is why it is deprioritized compared to all other object\n    // types.\n    if (aTag === BOOLEAN_TAG || aTag === NUMBER_TAG || aTag === STRING_TAG) {\n      return sameValueZeroEqual(a.valueOf(), b.valueOf());\n    }\n\n    // If not matching any tags that require a specific type of comparison, then we hard-code false because\n    // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\n    //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\n    //     comparison that can be made.\n    //   - For types that can be introspected, but rarely have requirements to be compared\n    //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\n    //     use-cases (may be included in a future release, if requested enough).\n    //   - For types that can be introspected but do not have an objective definition of what\n    //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\n    // In all cases, these decisions should be reevaluated based on changes to the language and\n    // common development practices.\n    return false;\n  }\n\n  return comparator as EqualityComparator<Meta>;\n}\n","import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\n/**\n * Whether the arrays are equal in value.\n */\nexport function areArraysEqual(\n  a: any[],\n  b: any[],\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  let index = a.length;\n\n  if (b.length !== index) {\n    return false;\n  }\n\n  // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n  while (index-- > 0) {\n    if (!isEqual(a[index], b[index], index, index, a, b, meta)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the arrays are equal in value, including circular references.\n */\nexport const areArraysEqualCircular = createIsCircular(areArraysEqual);\n","import { sameValueZeroEqual } from './utils';\n\n/**\n * Whether the dates passed are equal in value.\n *\n * @NOTE\n * This is a standalone function instead of done inline in the comparator\n * to allow for overrides.\n */\nexport function areDatesEqual(a: Date, b: Date): boolean {\n  return sameValueZeroEqual(a.valueOf(), b.valueOf());\n}\n","import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\n/**\n * Whether the `Map`s are equal in value.\n */\nexport function areMapsEqual(\n  a: Map<any, any>,\n  b: Map<any, any>,\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  let isValueEqual = a.size === b.size;\n\n  if (!isValueEqual) {\n    return false;\n  }\n\n  if (!a.size) {\n    return true;\n  }\n\n  // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n  // the inability to control the performance of the resulting code. It also avoids excessive\n  // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n  // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n  // equality checks themselves.\n\n  const matchedIndices: Record<number, true> = {};\n\n  let indexA = 0;\n\n  a.forEach((aValue, aKey) => {\n    if (!isValueEqual) {\n      return;\n    }\n\n    let hasMatch = false;\n    let matchIndexB = 0;\n\n    b.forEach((bValue, bKey) => {\n      if (\n        !hasMatch &&\n        !matchedIndices[matchIndexB] &&\n        (hasMatch =\n          isEqual(aKey, bKey, indexA, matchIndexB, a, b, meta) &&\n          isEqual(aValue, bValue, aKey, bKey, a, b, meta))\n      ) {\n        matchedIndices[matchIndexB] = true;\n      }\n\n      matchIndexB++;\n    });\n\n    indexA++;\n    isValueEqual = hasMatch;\n  });\n\n  return isValueEqual;\n}\n\n/**\n * Whether the `Map`s are equal in value, including circular references.\n */\nexport const areMapsEqualCircular = createIsCircular(areMapsEqual);\n","import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\ninterface Dictionary<Value> {\n  [key: string]: Value;\n  $$typeof?: any;\n}\n\nconst OWNER = '_owner';\nconst { hasOwnProperty } = Object.prototype;\n\n/**\n * Whether the objects are equal in value.\n */\nexport function areObjectsEqual(\n  a: Dictionary<any>,\n  b: Dictionary<any>,\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  const keysA = Object.keys(a);\n\n  let index = keysA.length;\n\n  if (Object.keys(b).length !== index) {\n    return false;\n  }\n\n  let key: string;\n\n  // Decrementing `while` showed faster results than either incrementing or\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\n  // methods like `some` / `every` were not used to avoid incurring the garbage\n  // cost of anonymous callbacks.\n  while (index-- > 0) {\n    key = keysA[index];\n\n    if (key === OWNER) {\n      const reactElementA = !!a.$$typeof;\n      const reactElementB = !!b.$$typeof;\n\n      if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {\n        return false;\n      }\n    }\n\n    if (\n      !hasOwnProperty.call(b, key) ||\n      !isEqual(a[key], b[key], key, key, a, b, meta)\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Whether the objects are equal in value, including circular references.\n */\nexport const areObjectsEqualCircular = createIsCircular(areObjectsEqual);\n","/**\n * Whether the regexps passed are equal in value.\n *\n * @NOTE\n * This is a standalone function instead of done inline in the comparator\n * to allow for overrides. An example of this would be supporting a\n * pre-ES2015 environment where the `flags` property is not available.\n */\nexport function areRegExpsEqual(a: RegExp, b: RegExp): boolean {\n  return a.source === b.source && a.flags === b.flags;\n}\n","import { createIsCircular } from './utils';\n\nimport type { InternalEqualityComparator } from '../index.d';\n\n/**\n * Whether the `Set`s are equal in value.\n */\nexport function areSetsEqual(\n  a: Set<any>,\n  b: Set<any>,\n  isEqual: InternalEqualityComparator<any>,\n  meta: any,\n): boolean {\n  let isValueEqual = a.size === b.size;\n\n  if (!isValueEqual) {\n    return false;\n  }\n\n  if (!a.size) {\n    return true;\n  }\n\n  // The use of `forEach()` is to avoid the transpilation cost of `for...of` comparisons, and\n  // the inability to control the performance of the resulting code. It also avoids excessive\n  // iteration compared to doing comparisons of `keys()` and `values()`. As a result, though,\n  // we cannot short-circuit the iterations; bookkeeping must be done to short-circuit the\n  // equality checks themselves.\n\n  const matchedIndices: Record<number, true> = {};\n\n  a.forEach((aValue, aKey) => {\n    if (!isValueEqual) {\n      return;\n    }\n\n    let hasMatch = false;\n    let matchIndex = 0;\n\n    b.forEach((bValue, bKey) => {\n      if (\n        !hasMatch &&\n        !matchedIndices[matchIndex] &&\n        (hasMatch = isEqual(aValue, bValue, aKey, bKey, a, b, meta))\n      ) {\n        matchedIndices[matchIndex] = true;\n      }\n\n      matchIndex++;\n    });\n\n    isValueEqual = hasMatch;\n  });\n\n  return isValueEqual;\n}\n\n/**\n * Whether the `Set`s are equal in value, including circular references.\n */\nexport const areSetsEqualCircular = createIsCircular(areSetsEqual);\n","import { createComparator } from './comparator';\nimport { areArraysEqual, areArraysEqualCircular } from './arrays';\nimport { areDatesEqual } from './dates';\nimport { areMapsEqual, areMapsEqualCircular } from './maps';\nimport { areObjectsEqual, areObjectsEqualCircular } from './objects';\nimport { areRegExpsEqual } from './regexps';\nimport { areSetsEqual, areSetsEqualCircular } from './sets';\nimport { createDefaultIsNestedEqual, merge, sameValueZeroEqual } from './utils';\n\nimport type {\n  BaseCircularMeta,\n  CreateComparatorCreatorOptions,\n  EqualityComparator,\n  GetComparatorOptions,\n} from '../index.d';\n\nexport { sameValueZeroEqual };\n\nconst DEFAULT_CONFIG: CreateComparatorCreatorOptions<undefined> = Object.freeze(\n  {\n    areArraysEqual,\n    areDatesEqual,\n    areMapsEqual,\n    areObjectsEqual,\n    areRegExpsEqual,\n    areSetsEqual,\n    createIsNestedEqual: createDefaultIsNestedEqual,\n  },\n);\nconst DEFAULT_CIRCULAR_CONFIG: CreateComparatorCreatorOptions<BaseCircularMeta> =\n  Object.freeze({\n    areArraysEqual: areArraysEqualCircular,\n    areDatesEqual,\n    areMapsEqual: areMapsEqualCircular,\n    areObjectsEqual: areObjectsEqualCircular,\n    areRegExpsEqual,\n    areSetsEqual: areSetsEqualCircular,\n    createIsNestedEqual: createDefaultIsNestedEqual,\n  });\n\nconst isDeepEqual = createComparator(DEFAULT_CONFIG);\n\n/**\n * Whether the items passed are deeply-equal in value.\n */\nexport function deepEqual<A, B>(a: A, b: B): boolean {\n  return isDeepEqual(a, b, undefined);\n}\n\nconst isShallowEqual = createComparator(\n  merge(DEFAULT_CONFIG, { createIsNestedEqual: () => sameValueZeroEqual }),\n);\n\n/**\n * Whether the items passed are shallowly-equal in value.\n */\nexport function shallowEqual<A, B>(a: A, b: B): boolean {\n  return isShallowEqual(a, b, undefined);\n}\n\nconst isCircularDeepEqual = createComparator(DEFAULT_CIRCULAR_CONFIG);\n\n/**\n * Whether the items passed are deeply-equal in value, including circular references.\n */\nexport function circularDeepEqual<A, B>(a: A, b: B): boolean {\n  return isCircularDeepEqual(a, b, new WeakMap());\n}\n\nconst isCircularShallowEqual = createComparator(\n  merge(DEFAULT_CIRCULAR_CONFIG, {\n    createIsNestedEqual: () => sameValueZeroEqual,\n  }),\n);\n\n/**\n * Whether the items passed are shallowly-equal in value, including circular references.\n */\nexport function circularShallowEqual<A, B>(a: A, b: B): boolean {\n  return isCircularShallowEqual(a, b, new WeakMap());\n}\n\n/**\n * Create a custom equality comparison method.\n *\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\n * where the standard methods are not performant enough, but can also be used to provide\n * support for legacy environments that do not support expected features like\n * `RegExp.prototype.flags` out of the box.\n */\nexport function createCustomEqual<Meta = undefined>(\n  getComparatorOptions: GetComparatorOptions<Meta>,\n): EqualityComparator<Meta> {\n  return createComparator<Meta>(\n    merge(DEFAULT_CONFIG, getComparatorOptions(DEFAULT_CONFIG as any)),\n  );\n}\n\n/**\n * Create a custom equality comparison method that handles circular references. This is very\n * similar to `createCustomEqual`, with the only difference being that `meta` expects to be\n * populated with a `WeakMap`-like contract.\n *\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\n * where the standard methods are not performant enough, but can also be used to provide\n * support for legacy environments that do not support expected features like\n * `WeakMap` out of the box.\n */\nexport function createCustomCircularEqual<\n  Meta extends BaseCircularMeta = WeakMap<any, any>,\n>(getComparatorOptions: GetComparatorOptions<Meta>): EqualityComparator<Meta> {\n  const comparator = createComparator<Meta>(\n    merge(\n      DEFAULT_CIRCULAR_CONFIG,\n      getComparatorOptions(DEFAULT_CIRCULAR_CONFIG as any),\n    ),\n  );\n\n  return ((a: any, b: any, meta: any = new WeakMap()) =>\n    comparator(a, b, meta)) as EqualityComparator<Meta>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}