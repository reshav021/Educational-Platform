{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\India.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst India = () => {\n  _s();\n  const [data, setMyData] = useState([]);\n  const COLORS = [\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#1abc9c\", \"#3498db\", \"#9b59b6\", \"#34495e\", \"#f1c40f\", \"#e74c3c\", \"#95a5a6\", \"#2ecc71\", \"#8e44ad\", \"#d35400\", \"#7f8c8d\", \"#27ae60\"];\n  useEffect(() => {\n    axios.get('./india-clusters.json').then(res => setMyData(res.data));\n  }, [0]);\n\n  /*\r\n  const titles = data.reduce((item, { documents }) => {\r\n      documents.forEach(({ title }) => {\r\n          item[title] = (item[title] || 0) + 1;\r\n      });\r\n      return item;\r\n  }, {});\r\n  */\n\n  for (const {\n    documents\n  } of data) {\n    for (const {\n      title\n    } of documents) {\n      titles[title] = (titles[title] || 0) + 1;\n    }\n  }\n  const chartData = Object.entries(titles).map(_ref => {\n    let [title, count] = _ref;\n    return {\n      title,\n      count\n    };\n  });\n  console.log(chartData);\n  return /*#__PURE__*/_jsxDEV(PieChart, {\n    width: 400,\n    height: 400,\n    children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pie, {\n      data: chartData,\n      dataKey: \"count\",\n      nameKey: \"title\",\n      cx: \"50%\",\n      cy: \"50%\",\n      outerRadius: 80,\n      fill: \"#8884d8\",\n      label: true,\n      children: chartData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n        fill: COLORS[index % COLORS.length]\n      }, `cell-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(India, \"jgu45jU5n4WRA+QglclFYrLnflo=\");\n_c = India;\nexport default India;\n\n/*\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst India = () => {\r\n  const [data, setMyData] = useState([])\r\n\r\n  useEffect(() => {\r\n    axios.get('./india-clusters.json')\r\n      .then((res) => setMyData(res.data)\r\n    )\r\n  }, [0]);\r\n\r\n  const titles = data.flatMap((category) =>\r\n    category.documents.map((document) => document.title)\r\n  );\r\n\r\n  const titleCounts = titles.reduce((counts, title) => {\r\n    counts[title] = (counts[title] || 0) + 1;\r\n    return counts;\r\n  }, {});\r\n\r\n  const chartData = {\r\n    labels: Object.keys(titleCounts),\r\n    datasets: [\r\n      {\r\n        label: \"Titles\",\r\n        data: Object.values(titleCounts),\r\n        backgroundColor: [\r\n            \"#FF6384\",\r\n            \"#36A2EB\",\r\n            \"#FFCE56\",\r\n            \"#1abc9c\",\r\n            \"#3498db\",\r\n            \"#9b59b6\",\r\n            \"#34495e\",\r\n            \"#f1c40f\",\r\n            \"#e74c3c\",\r\n            \"#95a5a6\",\r\n            \"#2ecc71\",\r\n            \"#8e44ad\",\r\n            \"#d35400\",\r\n            \"#7f8c8d\",\r\n            \"#27ae60\"\r\n          ]   \r\n      }\r\n    ]\r\n  };\r\n\r\n  return <Pie data={chartData} />;\r\n};\r\n\r\nexport default India\r\n*/\nvar _c;\n$RefreshReg$(_c, \"India\");","map":{"version":3,"names":["axios","React","useState","useEffect","PieChart","Pie","Cell","Legend","jsxDEV","_jsxDEV","India","_s","data","setMyData","COLORS","get","then","res","documents","title","titles","chartData","Object","entries","map","_ref","count","console","log","width","height","children","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","nameKey","cx","cy","outerRadius","fill","label","entry","index","length","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app/src/Components/SubComponents/India.js"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\r\n\r\nconst India = () => {\r\n    const [data, setMyData] = useState([])\r\n    const COLORS = [\"#FF6384\",\"#36A2EB\",\"#FFCE56\",\"#1abc9c\",\"#3498db\",\"#9b59b6\",\"#34495e\",\"#f1c40f\",\"#e74c3c\",\"#95a5a6\",\"#2ecc71\",\"#8e44ad\",\"#d35400\",\"#7f8c8d\",\"#27ae60\"];\r\n\r\n    useEffect(() => {\r\n      axios.get('./india-clusters.json')\r\n        .then((res) => setMyData(res.data)\r\n      )\r\n    }, [0]);\r\n\r\n    /*\r\n    const titles = data.reduce((item, { documents }) => {\r\n        documents.forEach(({ title }) => {\r\n            item[title] = (item[title] || 0) + 1;\r\n        });\r\n        return item;\r\n    }, {});\r\n    */\r\n\r\n    for(const { documents } of data) {\r\n        for(const { title } of documents) {\r\n            titles[title] = (titles[title] || 0) + 1;\r\n        }\r\n    }\r\n    \r\n    const chartData = Object.entries(titles).map(([title, count]) => ({ title, count }));\r\n    console.log(chartData)\r\n\r\n    return (\r\n        <PieChart width={400} height={400}>\r\n            <Legend />\r\n            <Pie\r\n                data={chartData}\r\n                dataKey=\"count\"\r\n                nameKey=\"title\"\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                outerRadius={80}\r\n                fill=\"#8884d8\"\r\n                label\r\n            >\r\n                {\r\n                    chartData.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                    ))\r\n                }\r\n            </Pie>\r\n        </PieChart>\r\n    );\r\n};\r\n\r\nexport default India;\r\n\r\n\r\n\r\n/*\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst India = () => {\r\n  const [data, setMyData] = useState([])\r\n\r\n  useEffect(() => {\r\n    axios.get('./india-clusters.json')\r\n      .then((res) => setMyData(res.data)\r\n    )\r\n  }, [0]);\r\n\r\n  const titles = data.flatMap((category) =>\r\n    category.documents.map((document) => document.title)\r\n  );\r\n\r\n  const titleCounts = titles.reduce((counts, title) => {\r\n    counts[title] = (counts[title] || 0) + 1;\r\n    return counts;\r\n  }, {});\r\n\r\n  const chartData = {\r\n    labels: Object.keys(titleCounts),\r\n    datasets: [\r\n      {\r\n        label: \"Titles\",\r\n        data: Object.values(titleCounts),\r\n        backgroundColor: [\r\n            \"#FF6384\",\r\n            \"#36A2EB\",\r\n            \"#FFCE56\",\r\n            \"#1abc9c\",\r\n            \"#3498db\",\r\n            \"#9b59b6\",\r\n            \"#34495e\",\r\n            \"#f1c40f\",\r\n            \"#e74c3c\",\r\n            \"#95a5a6\",\r\n            \"#2ecc71\",\r\n            \"#8e44ad\",\r\n            \"#d35400\",\r\n            \"#7f8c8d\",\r\n            \"#27ae60\"\r\n          ]   \r\n      }\r\n    ]\r\n  };\r\n\r\n  return <Pie data={chartData} />;\r\n};\r\n\r\nexport default India\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}