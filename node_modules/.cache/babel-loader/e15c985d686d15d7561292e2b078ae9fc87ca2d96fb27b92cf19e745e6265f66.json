{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\IndiaCluster.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { PieChart, Pie, Label, Tooltip, Cell } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndiaCluster = () => {\n  _s();\n  const [myData, setMyData] = useState([]);\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF', '#F2F2F2'];\n  useEffect(() => {\n    axios.get('./india-clusters.json').then(res => setMyData(res.data));\n  }, [0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clusters\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: myData.map(post => {\n        let {\n          labels,\n          documents\n        } = post;\n        labels = labels[0];\n        for (let i = 0; i < documents.length; i++) {\n          let title = documents[i].title;\n          let content = documents[i].content;\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"displayPieChart\",\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        width: 550,\n        height: 500,\n        children: [/*#__PURE__*/_jsxDEV(Pie, {\n          data: myData,\n          dataKey: \"label_counts\",\n          nameKey: \"labels\",\n          outerRadius: 200,\n          innerRadius: 130,\n          labelLine: false,\n          cx: 280,\n          cy: 250,\n          label: entry => entry.labels,\n          children: myData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            fill: COLORS[index % COLORS.length],\n            children: /*#__PURE__*/_jsxDEV(Label, {\n              value: \"\",\n              position: \"center\",\n              content: _ref => {\n                let {\n                  value\n                } = _ref;\n                return `${value} (${entry.labels})`;\n              },\n              fontSize: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 33\n            }, this)\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_s(IndiaCluster, \"t4qxf8XXuxXukv7LfJC+zXl5Zcc=\");\n_c = IndiaCluster;\nexport default IndiaCluster;\n\n/*\r\nCorrect\r\n\r\n<div className=\"displayPieChart\">\r\n                <PieChart width={500} height={500}>\r\n                    <Pie data={myData} dataKey=\"label_counts\" nameKey=\"labels\" outerRadius={200} innerRadius={130} label>\r\n                        {myData.map((entry, index) => (\r\n                            <Label \r\n                                key={`label-${index}`} \r\n                                position=\"center\"\r\n                                fill=\"Black\" \r\n                                fontSize={30}\r\n                            > {entry.labels}\r\n                            </Label>\r\n                        ))}\r\n                    </Pie>\r\n                    <Tooltip />\r\n                </PieChart>\r\n            </div>\r\n*/\n\n/*\r\n<PieChart width={500} height={500}>\r\n                    <Pie \r\n                        data={myData} \r\n                        dataKey=\"label_counts\" \r\n                        nameKey=\"labels\" \r\n                        outerRadius={200} \r\n                        innerRadius={130} \r\n                        label\r\n                    ></Pie>\r\n                    <Tooltip />\r\n                </PieChart>\r\n*/\n\n/*\r\n<PieChart width={500} height={500}>\r\n    <Pie \r\n        data={myData} \r\n        dataKey=\"label_counts\" \r\n        innerRadius={130}\r\n        outerRadius={200} \r\n        fill=\"grey\" \r\n\r\n        \r\n    />\r\n</PieChart>\r\n\r\n\r\n<div>\r\n                <PieChart\r\n                    animate\r\n                    animationDuration={40}\r\n                    animationEasing=\"ease-in\"\r\n                    center={[50, 50]}\r\n                    data={myData}\r\n                    lineWidth={15}\r\n                    lengthAngle={360}\r\n                    paddingAngle={0}\r\n                    radius={50}\r\n                    rounded\r\n                    startAngle={0}\r\n                    viewBoxSize={[100, 100]}\r\n                    labelStyle={{\r\n                        fontSize: \"20px\",\r\n                        fontColor: \"FFFFFA\",\r\n                        fontWeight: \"500\",\r\n                        fontFamily: \"monospace\"\r\n                    }}\r\n                    label={myData.map((entry, index) => (\r\n                        <Label> {entry.labels}</Label>))}\r\n                    labelPosition={70}\r\n                />\r\n            </div>\r\n*/\nvar _c;\n$RefreshReg$(_c, \"IndiaCluster\");","map":{"version":3,"names":["axios","useState","useEffect","PieChart","Pie","Label","Tooltip","Cell","jsxDEV","_jsxDEV","IndiaCluster","_s","myData","setMyData","COLORS","get","then","res","data","className","children","map","post","labels","documents","i","length","title","content","fileName","_jsxFileName","lineNumber","columnNumber","width","height","dataKey","nameKey","outerRadius","innerRadius","labelLine","cx","cy","label","entry","index","fill","value","position","_ref","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app/src/Components/SubComponents/IndiaCluster.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { PieChart, Pie, Label, Tooltip, Cell } from \"recharts\";\r\n\r\nconst IndiaCluster = () => {\r\n    const [myData, setMyData] = useState([])\r\n    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF', '#F2F2F2'];\r\n\r\n    useEffect(() => {\r\n        axios.get('./india-clusters.json')\r\n          .then((res) => setMyData(res.data)\r\n        )\r\n    }, [0]);\r\n\r\n    return (  \r\n        <div className=\"clusters\">\r\n            <div>\r\n                {\r\n                    myData.map((post) => {\r\n                        let { labels,documents} = post\r\n                        \r\n                        labels = labels[0]\r\n\r\n                        for(let i=0;i<documents.length;i++){\r\n                            let title = documents[i].title\r\n                            let content = documents[i].content\r\n                        }\r\n                    })\r\n                }\r\n            </div> \r\n\r\n            <div className=\"displayPieChart\">\r\n                <PieChart width={550} height={500}>\r\n                    <Pie \r\n                        data={myData} \r\n                        dataKey=\"label_counts\" \r\n                        nameKey=\"labels\" \r\n                        outerRadius={200} \r\n                        innerRadius={130} \r\n                        labelLine={false}\r\n                        cx={280}\r\n                        cy={250}\r\n                        label={(entry) => entry.labels}\r\n                    >\r\n                        {\r\n                        myData.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]}>\r\n                                <Label \r\n                                    value=\"\" position=\"center\" \r\n                                    content={({ value }) => `${value} (${entry.labels})`} fontSize={20} \r\n                                />\r\n                            </Cell>\r\n                        ))\r\n                        }\r\n                        \r\n                    </Pie>\r\n                    <Tooltip />\r\n                </PieChart>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndiaCluster\r\n\r\n\r\n\r\n/*\r\nCorrect\r\n\r\n<div className=\"displayPieChart\">\r\n                <PieChart width={500} height={500}>\r\n                    <Pie data={myData} dataKey=\"label_counts\" nameKey=\"labels\" outerRadius={200} innerRadius={130} label>\r\n                        {myData.map((entry, index) => (\r\n                            <Label \r\n                                key={`label-${index}`} \r\n                                position=\"center\"\r\n                                fill=\"Black\" \r\n                                fontSize={30}\r\n                            > {entry.labels}\r\n                            </Label>\r\n                        ))}\r\n                    </Pie>\r\n                    <Tooltip />\r\n                </PieChart>\r\n            </div>\r\n*/\r\n\r\n/*\r\n<PieChart width={500} height={500}>\r\n                    <Pie \r\n                        data={myData} \r\n                        dataKey=\"label_counts\" \r\n                        nameKey=\"labels\" \r\n                        outerRadius={200} \r\n                        innerRadius={130} \r\n                        label\r\n                    ></Pie>\r\n                    <Tooltip />\r\n                </PieChart>\r\n*/\r\n\r\n/*\r\n<PieChart width={500} height={500}>\r\n    <Pie \r\n        data={myData} \r\n        dataKey=\"label_counts\" \r\n        innerRadius={130}\r\n        outerRadius={200} \r\n        fill=\"grey\" \r\n\r\n        \r\n    />\r\n</PieChart>\r\n\r\n\r\n<div>\r\n                <PieChart\r\n                    animate\r\n                    animationDuration={40}\r\n                    animationEasing=\"ease-in\"\r\n                    center={[50, 50]}\r\n                    data={myData}\r\n                    lineWidth={15}\r\n                    lengthAngle={360}\r\n                    paddingAngle={0}\r\n                    radius={50}\r\n                    rounded\r\n                    startAngle={0}\r\n                    viewBoxSize={[100, 100]}\r\n                    labelStyle={{\r\n                        fontSize: \"20px\",\r\n                        fontColor: \"FFFFFA\",\r\n                        fontWeight: \"500\",\r\n                        fontFamily: \"monospace\"\r\n                    }}\r\n                    label={myData.map((entry, index) => (\r\n                        <Label> {entry.labels}</Label>))}\r\n                    labelPosition={70}\r\n                />\r\n            </div>\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}