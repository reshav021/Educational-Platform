{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app-copy2\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\PieChart\\\\ListChartProgress.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { BiFullscreen } from \"react-icons/bi\";\nimport ProgressBar from \"../Progressbar/ProgressBar\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ListChartProgress(props) {\n  _s();\n  const [myData, setMyData] = useState([]);\n  const [searchKeyword, setSearchKeyword] = useState(0);\n  const chunks = [];\n  const videoRef = useRef();\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [videotimeNow, setCurrentVideoTime] = useState(0);\n  const [displayKeywordContainer, setDisplayKeywordContainer] = useState(false);\n  const progressTooltipRef = useRef(null);\n  const [fullscreen, setFullscreen] = useState(false);\n  const [fullscreenProgressBar, setfullscreenProgressBar] = useState(false);\n  let showDiv = props.showDiv;\n  let localtitle = props.myTitle;\n  let videoFileName = props.myVideoFileName;\n\n  // Setting the API/JSON data\n  useEffect(() => {\n    axios.get(\"./india.json\").then(res => setMyData(res.data));\n  }, []);\n\n  // Function to remove duplicates appearing in the search input \n  const removeDuplicateKeywords = () => {\n    const list = [];\n    const set = new Set();\n    return {\n      push(element) {\n        if (!set.has(element)) {\n          list.push(element);\n          set.add(element);\n        }\n      },\n      get() {\n        return list;\n      }\n    };\n  };\n\n  // Remove all duplicate keywords appearing in the search input \n  let allKeywords = removeDuplicateKeywords();\n\n  // Takes us to give time duration in the video\n  const handleSeekTo = time => {\n    if (videoRef.current) videoRef.current.currentTime = time + 1;\n  };\n\n  // Converting hh:mm:ss to seconds\n  const toSeconds = timeString => {\n    timeString = timeString + \"\";\n    let time = timeString.split(\":\");\n    let hr = parseInt(time[0], 10);\n    let min = parseInt(time[1], 10);\n    let sec = parseInt(time[2], 10);\n    return hr * 3600 + min * 60 + sec;\n  };\n\n  // Search a topic inside the video\n  const handleSearch = () => {\n    setDisplayKeywordContainer(true);\n    let selectedkeyword = document.getElementById(\"inputVal\").value;\n    selectedkeyword = selectedkeyword.toUpperCase();\n    if (selectedkeyword === \"Default\") selectedkeyword = \"\";\n    setSearchKeyword(selectedkeyword);\n  };\n  const handleTimeUpdate = newTime => {\n    videoRef.current.currentTime = newTime;\n    setCurrentTime(newTime);\n  };\n\n  // Gives the entire video duration\n  const handleDurationChange = () => {\n    setDuration(videoRef.current.duration);\n  };\n  function handleTime() {\n    setCurrentTime(videoRef.current.currentTime);\n    setCurrentVideoTime(videoRef.current.currentTime);\n  }\n  let [displayProgresss, setdisplayProgresss] = useState(true);\n\n  // Function to adjust to fullscreen view\n  const toggleFullScreen = async event => {\n    setdisplayProgresss(false);\n    const container = document.getElementById(\"video-container\");\n    const fullscreenApi = container.requestFullscreen || container.webkitRequestFullScreen || container.mozRequestFullScreen || container.msRequestFullscreen;\n    if (!document.fullscreenElement) {\n      setFullscreen(true);\n      fullscreenApi.call(container);\n    } else {\n      document.exitFullscreen();\n      setFullscreen(false);\n    }\n  };\n\n  // Event handler to detect fullscreen mode changes\n  const handleFullScreenChange = () => {\n    if (!document.fullscreenElement) {\n      setFullscreen(false);\n    }\n  };\n\n  // Register the event listener\n  document.addEventListener(\"fullscreenchange\", handleFullScreenChange);\n\n  // Removes the event listener when the component is unmounted/removed\n  useEffect(() => {\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", handleFullScreenChange);\n    };\n  }, []);\n\n  // Shows time in correct format mm:ss\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${String(seconds).padStart(2, \"0\")}`;\n  };\n\n  // Display topic in the progressbar of video\n  const displayTopic = event => {\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'none'\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const percentage = x / rect.width;\n    const time = duration * percentage;\n    let textToDisplay = '';\n    for (let i = 0; i < chunks.length; i++) {\n      let chunksData = chunks[i];\n      if (time > chunksData.start && time < chunksData.end) textToDisplay = chunksData.topic;\n    }\n    setfullscreenProgressBar(true);\n    if (fullscreen === true && progressTooltipRef.current) {\n      progressTooltipRef.current.style.display = \"block\";\n      progressTooltipRef.current.style.left = `${event.clientX}px`;\n      progressTooltipRef.current.style.top = `${rect.top - progressTooltipRef.current.offsetHeight}px`;\n      progressTooltipRef.current.innerText = textToDisplay + \" \" + formatTime(time);\n    }\n  };\n\n  // Hides the topic to be displayed when outside the fullscreen view\n  const notdisplayTopic = () => {\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'block'\n    setfullscreenProgressBar(false);\n    if (fullscreen === true && progressTooltipRef.current) {\n      progressTooltipRef.current.style.display = \"none\";\n    }\n  };\n  const [progress, setProgress] = useState(0);\n  useEffect(() => {\n    const handleProgress = () => {\n      if (videoRef.current && !isNaN(videoRef.current.duration)) {\n        setProgress(videoRef.current.currentTime / videoRef.current.duration * 100);\n      }\n    };\n    if (videoRef.current) {\n      videoRef.current.addEventListener(\"timeupdate\", handleProgress);\n    }\n    return () => {\n      if (videoRef.current) {\n        videoRef.current.removeEventListener(\"timeupdate\", handleProgress);\n      }\n    };\n  }, []);\n  const handleProgressBarChange = e => {\n    const progressBarValue = e.target.value;\n    setProgress(progressBarValue);\n    if (videoRef.current && !isNaN(videoRef.current.duration)) {\n      const seekTime = progressBarValue / 100 * videoRef.current.duration;\n      videoRef.current.currentTime = seekTime;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n_s(ListChartProgress, \"TYmUGJB1WXSqu8g7wrezY6XNt7Q=\");\n_c = ListChartProgress;\nexport default ListChartProgress;\nvar _c;\n$RefreshReg$(_c, \"ListChartProgress\");","map":{"version":3,"names":["axios","BiFullscreen","ProgressBar","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ListChartProgress","props","_s","myData","setMyData","searchKeyword","setSearchKeyword","chunks","videoRef","duration","setDuration","currentTime","setCurrentTime","videotimeNow","setCurrentVideoTime","displayKeywordContainer","setDisplayKeywordContainer","progressTooltipRef","fullscreen","setFullscreen","fullscreenProgressBar","setfullscreenProgressBar","showDiv","localtitle","myTitle","videoFileName","myVideoFileName","get","then","res","data","removeDuplicateKeywords","list","set","Set","push","element","has","add","allKeywords","handleSeekTo","time","current","toSeconds","timeString","split","hr","parseInt","min","sec","handleSearch","selectedkeyword","document","getElementById","value","toUpperCase","handleTimeUpdate","newTime","handleDurationChange","handleTime","displayProgresss","setdisplayProgresss","toggleFullScreen","event","container","fullscreenApi","requestFullscreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen","fullscreenElement","call","exitFullscreen","handleFullScreenChange","addEventListener","removeEventListener","formatTime","minutes","Math","floor","seconds","String","padStart","displayTopic","rect","target","getBoundingClientRect","x","clientX","left","percentage","width","textToDisplay","i","length","chunksData","start","end","topic","style","display","top","offsetHeight","innerText","notdisplayTopic","progress","setProgress","handleProgress","isNaN","handleProgressBarChange","e","progressBarValue","seekTime","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app-copy2/my-app/src/Components/SubComponents/PieChart/ListChartProgress.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { BiFullscreen } from \"react-icons/bi\"\r\nimport ProgressBar from \"../Progressbar/ProgressBar\"\r\nimport React, { useState, useEffect, useRef } from \"react\"\r\n\r\nfunction ListChartProgress(props) {\r\n  const [myData, setMyData] = useState([])\r\n  const [searchKeyword, setSearchKeyword] = useState(0)\r\n\r\n  const chunks = []\r\n  const videoRef = useRef() \r\n  \r\n  const [duration, setDuration] = useState(0)\r\n  const [currentTime, setCurrentTime] = useState(0)\r\n  const [videotimeNow, setCurrentVideoTime] = useState(0) \r\n  const [displayKeywordContainer,setDisplayKeywordContainer] = useState(false)\r\n\r\n  const progressTooltipRef = useRef(null);\r\n  const [fullscreen, setFullscreen] = useState(false);\r\n  const [fullscreenProgressBar, setfullscreenProgressBar] = useState(false)\r\n\r\n  let showDiv = props.showDiv\r\n  let localtitle = props.myTitle\r\n  let videoFileName = props.myVideoFileName\r\n\r\n  // Setting the API/JSON data\r\n  useEffect(() => {\r\n    axios.get(\"./india.json\").then((res) => setMyData(res.data))\r\n  }, [])\r\n\r\n  // Function to remove duplicates appearing in the search input \r\n  const removeDuplicateKeywords = () => {\r\n    const list = []\r\n    const set = new Set()\r\n\r\n    return {\r\n      push(element) {\r\n        if (!set.has(element)) {\r\n          list.push(element)\r\n          set.add(element)\r\n        }\r\n      },\r\n      get() {\r\n        return list\r\n      },\r\n    }\r\n  }\r\n\r\n  // Remove all duplicate keywords appearing in the search input \r\n  let allKeywords = removeDuplicateKeywords()\r\n\r\n  // Takes us to give time duration in the video\r\n  const handleSeekTo = (time) => {\r\n    if(videoRef.current)\r\n      videoRef.current.currentTime = time + 1\r\n  }\r\n\r\n  // Converting hh:mm:ss to seconds\r\n  const toSeconds = (timeString) => {\r\n    timeString = timeString + \"\"\r\n    let time = timeString.split(\":\")\r\n\r\n    let hr = parseInt(time[0], 10)\r\n    let min = parseInt(time[1], 10)\r\n    let sec = parseInt(time[2], 10)\r\n\r\n    return hr * 3600 + min * 60 + sec\r\n  }\r\n\r\n  // Search a topic inside the video\r\n  const handleSearch = () => {\r\n    setDisplayKeywordContainer(true)\r\n    let selectedkeyword = document.getElementById(\"inputVal\").value\r\n    selectedkeyword = selectedkeyword.toUpperCase()\r\n\r\n    if(selectedkeyword === \"Default\") \r\n      selectedkeyword = \"\"\r\n    setSearchKeyword(selectedkeyword)\r\n  }\r\n\r\n  const handleTimeUpdate = (newTime) => {\r\n    videoRef.current.currentTime = newTime\r\n    setCurrentTime(newTime)\r\n  }\r\n\r\n  // Gives the entire video duration\r\n  const handleDurationChange = () => {\r\n    setDuration(videoRef.current.duration)\r\n  }\r\n\r\n  function handleTime() {\r\n    setCurrentTime(videoRef.current.currentTime)\r\n    setCurrentVideoTime(videoRef.current.currentTime)\r\n  }\r\n\r\n  let [displayProgresss, setdisplayProgresss] = useState(true) \r\n\r\n  // Function to adjust to fullscreen view\r\n  const toggleFullScreen = async (event) => {\r\n    setdisplayProgresss(false)\r\n    const container = document.getElementById(\"video-container\");\r\n    const fullscreenApi = container.requestFullscreen || container.webkitRequestFullScreen ||\r\n      container.mozRequestFullScreen || container.msRequestFullscreen;\r\n\r\n    if(!document.fullscreenElement) {\r\n      setFullscreen(true);\r\n      fullscreenApi.call(container);\r\n    } \r\n    else {\r\n      document.exitFullscreen();\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  // Event handler to detect fullscreen mode changes\r\n  const handleFullScreenChange = () => {\r\n    if (!document.fullscreenElement) {\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  // Register the event listener\r\n  document.addEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n\r\n  // Removes the event listener when the component is unmounted/removed\r\n  useEffect(() => {\r\n    return () => {\r\n      document.removeEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n    };\r\n  }, []);\r\n\r\n  // Shows time in correct format mm:ss\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${String(seconds).padStart(2, \"0\")}`;\r\n  }\r\n\r\n  // Display topic in the progressbar of video\r\n  const displayTopic = (event) => {\r\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'none'\r\n    const rect = event.target.getBoundingClientRect();\r\n    const x = event.clientX - rect.left;\r\n    const percentage = x / rect.width;\r\n    const time = duration * percentage;\r\n    let textToDisplay = '';\r\n\r\n    for(let i=0;i<chunks.length;i++){\r\n      let chunksData = chunks[i];\r\n\r\n      if((time > chunksData.start) && (time < chunksData.end))\r\n        textToDisplay = chunksData.topic\r\n    }\r\n\r\n    setfullscreenProgressBar(true)\r\n\r\n    if(fullscreen === true && progressTooltipRef.current) {\r\n      progressTooltipRef.current.style.display = \"block\";\r\n      progressTooltipRef.current.style.left = `${event.clientX}px`;\r\n      progressTooltipRef.current.style.top = `${rect.top - progressTooltipRef.current.offsetHeight}px`;\r\n      progressTooltipRef.current.innerText = textToDisplay + \" \" + formatTime(time);\r\n    }\r\n  };\r\n  \r\n  // Hides the topic to be displayed when outside the fullscreen view\r\n  const notdisplayTopic = () => {\r\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'block'\r\n    setfullscreenProgressBar(false)\r\n\r\n    if(fullscreen === true && progressTooltipRef.current) {\r\n      progressTooltipRef.current.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  const [progress, setProgress] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    const handleProgress = () => {\r\n      if (videoRef.current && !isNaN(videoRef.current.duration)) {\r\n        setProgress(\r\n          (videoRef.current.currentTime / videoRef.current.duration) * 100\r\n        );\r\n      }\r\n    };\r\n\r\n    if (videoRef.current) {\r\n      videoRef.current.addEventListener(\"timeupdate\", handleProgress);\r\n    }\r\n\r\n    return () => {\r\n      if (videoRef.current) {\r\n        videoRef.current.removeEventListener(\"timeupdate\", handleProgress);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleProgressBarChange = (e) => {\r\n    const progressBarValue = e.target.value;\r\n    setProgress(progressBarValue);\r\n    if (videoRef.current && !isNaN(videoRef.current.duration)) {\r\n      const seekTime = (progressBarValue / 100) * videoRef.current.duration;\r\n      videoRef.current.currentTime = seekTime;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListChartProgress"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}