{"ast":null,"code":"/*\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect, useRef} from \"react\";\r\nimport ProgressBar from \"./Progressbar/ProgressBar\";\r\n\r\nconst removeDuplicateKeywords = () => {\r\n  const list = [];\r\n  const set = new Set();\r\n\r\n  return {\r\n    push(element) {\r\n      if (!set.has(element)) {\r\n        list.push(element);\r\n        set.add(element);\r\n      }\r\n    },\r\n    get() {\r\n      return list;\r\n    }\r\n  };\r\n}\r\n\r\nfunction VideoDetails() {\r\n  const [myData, setMyData] = useState([])\r\n  const [searchKeyword, setSearchKeyword] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const videoRef = useRef(null);\r\n\r\n  let allKeywords = removeDuplicateKeywords();\r\n  let titleofVideo = localStorage.getItem('title')\r\n  let localvideoFileName = localStorage.getItem('videoFileName')\r\n  let temp=''\r\n\r\n  const handleSeekTo = (time) => {\r\n    if (videoRef.current) {\r\n      videoRef.current.currentTime = time;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('./india.json')\r\n      .then((res) => setMyData(res.data)\r\n    )\r\n  }, []);\r\n\r\n  const toSeconds = (time) => {\r\n    let seconds = time.split(':')\r\n\r\n    let hr = parseInt(seconds[0], 10);\r\n    let min = parseInt(seconds[1], 10);\r\n    let sec = parseInt(seconds[2], 10);\r\n    \r\n    seconds = (hr * 3600) + (min * 60) + sec;\r\n\r\n    return seconds\r\n  }\r\n  \r\n  const myDiv = document.createElement('div');\r\n  myDiv.className = 'keywordContainer'\r\n\r\n  const displayTimeStamp = (searchKeyword,orginaltimeStamp,imgSrc) => {\r\n    \r\n    myDiv.innerHTML = ''\r\n    const timeStamp = new Set(orginaltimeStamp);\r\n\r\n    if(temp !== searchKeyword){\r\n      const btn = document.getElementById('videoDetails-searchBtn');\r\n      btn.addEventListener('click', function handleClick() {\r\n        myDiv.replaceChildren();\r\n        myDiv.style.border = 'none'\r\n      });\r\n      myDiv.replaceChildren();\r\n      myDiv.style.border = \"2px solid black\"\r\n    }\r\n    \r\n    for(let startTime of timeStamp.values()){\r\n      let originalTime = startTime\r\n      startTime = toSeconds(startTime)\r\n\r\n      const photoDiv = document.createElement('div');\r\n      photoDiv.style.border = \"2px solid black\"\r\n      photoDiv.className = 'photodiv-container';\r\n      photoDiv.onclick = handleSeekTo.bind(this,startTime);\r\n      \r\n      let img = document.createElement(\"img\");\r\n      img.className = 'keywordImage'\r\n      \r\n      let imgHover = document.createElement(\"img\");\r\n      //imgHover.src = \"image.png\";\r\n      imgHover.className = 'imgHoverEffect'\r\n\r\n\r\n      img.src = 'rbi/'+imgSrc;\r\n      imgHover.src = imgSrc;\r\n\r\n      photoDiv.appendChild(img);\r\n      //photoDiv.appendChild(imgHover);\r\n\r\n      const myButton = document.createElement('button');\r\n      myButton.innerHTML = originalTime;\r\n      myButton.id = 'seekToBtn';\r\n      myButton.onclick = handleSeekTo.bind(this,startTime);\r\n\r\n      photoDiv.append(myButton);\r\n      myDiv.append(photoDiv);\r\n      \r\n      photoDiv.addEventListener('mouseover', () => {\r\n        imgHover.style.display = 'block';\r\n        imgHover.style.left = photoDiv.offsetLeft + 'px';\r\n        imgHover.style.bottom = (photoDiv.offsetTop) + 'px';\r\n        //imgHover.style.bottom = (photoDiv.offsetTop + photoDiv.offsetHeight) + 'px';\r\n        //imgHover.style.bottom = (window.innerHeight - photoDiv.offsetTop) + 'px';\r\n      });\r\n      \r\n      photoDiv.addEventListener('mouseout', () => {\r\n        imgHover.style.display = 'none';\r\n      });\r\n    }\r\n        \r\n    document.body.append(myDiv);  \r\n  }\r\n\r\n  const handleSearch = () => {\r\n    let selectedkeyword = document.getElementById('inputVal').value\r\n    \r\n    selectedkeyword = selectedkeyword.toUpperCase()\r\n\r\n    if(selectedkeyword === \"Default\")\r\n        selectedkeyword = ''\r\n    setSearchKeyword(selectedkeyword)\r\n  }\r\n\r\n  const chunks = [];\r\n\r\n  const handleTimeUpdate = (newTime) => {\r\n    videoRef.current.currentTime = newTime;\r\n    setCurrentTime(newTime);\r\n  };\r\n\r\n  const handleDurationChange = () => {\r\n    setDuration(videoRef.current.duration);\r\n  };\r\n\r\n  const handleFullScreen = () => {\r\n    if(videoRef.current) {\r\n      videoRef.current.requestFullscreen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"videoDetails\">  \r\n      <div className=\"videoDetails-data\">\r\n        {\r\n          myData.map((post) => {\r\n            let { title, keyframes_text, chapters_list, image_metadata } = post            \r\n            localvideoFileName = localvideoFileName.toUpperCase() \r\n\r\n            let len = Object.keys(chapters_list).length\r\n            let timeStamp = [];\r\n            let imgSrc;\r\n\r\n            if(title.includes(titleofVideo) || titleofVideo.includes(title) || (titleofVideo === title)){\r\n              for(let i=1;i<=len;i++){\r\n                let obj = chapters_list[i]\r\n                let startTime = obj[0]\r\n                let keywords = obj[1]\r\n\r\n                let imageData = image_metadata[i]\r\n                let imagePath = imageData[0]\r\n  \r\n                if(keywords === searchKeyword){\r\n                  imgSrc = imagePath\r\n                }\r\n  \r\n                allKeywords.push(keywords)\r\n                keywords = keywords.toUpperCase()\r\n                \r\n                let obj2 = keyframes_text[i]\r\n                let endTime = obj2[1]\r\n                let startTimeSeconds = toSeconds(startTime)\r\n                let endTimeSeconds = toSeconds(endTime)\r\n  \r\n                const colors = [ \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#800000\", \"#FFA500\", \"#FFFFF0\" ];\r\n                \r\n                if(title.includes(titleofVideo) || titleofVideo.includes(title) || (titleofVideo === title)){\r\n                  const newChunk = {\r\n                    start: startTimeSeconds,\r\n                    end: endTimeSeconds-1,\r\n                    //color: colors[Math.floor(Math.random() * colors.length)],\r\n                    color: \"gray\",\r\n                    topic: keywords\r\n                  };\r\n                  chunks.push(newChunk);\r\n                }\r\n                \r\n                if(searchKeyword === '')\r\n                  return\r\n                if(keywords.includes(searchKeyword))\r\n                  timeStamp.push(startTime)\r\n              }\r\n            }\r\n            \r\n            return (<div>{displayTimeStamp(searchKeyword,timeStamp,imgSrc)}</div>)\r\n          })\r\n        }\r\n      </div>\r\n\r\n      <div className=\"videoDetails-video\">\r\n        <video\r\n          ref={videoRef}\r\n          src={localvideoFileName}\r\n          onTimeUpdate={() => setCurrentTime(videoRef.current.currentTime)}\r\n          onDurationChange={handleDurationChange}\r\n          height={360}\r\n          controls\r\n        />\r\n\r\n        <button id='fullScreen' onClick={handleFullScreen}>FullScreen</button>\r\n        \r\n        <ProgressBar\r\n          className=\"progressBar\"\r\n          currentTime={currentTime}\r\n          duration={duration}\r\n          onTimeUpdate={handleTimeUpdate}\r\n          chunks={chunks}\r\n        />\r\n      </div> \r\n\r\n      <div className=\"videoDetails-btn\">\r\n        <div className=\"keywords-container\">\r\n          <input id='inputVal' list=\"select-keyword\"/>\r\n\r\n          <datalist id='select-keyword' placeholder=\"Pick a keyword\">\r\n            <option id='option-keyword' value=\"\">Select a keyword</option>\r\n              { \r\n                allKeywords.get().sort().map((option, index) => {\r\n                  return <option key={index} > {option} </option>\r\n                })\r\n              }\r\n          </datalist >\r\n\r\n          <button className=\"videoDetails-searchBtn\" id=\"videoDetails-searchBtn\" onClick={handleSearch}>Search</button>\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoDetails;\r\n*/","map":{"version":3,"names":[],"sources":["C:/Users/reshav/Desktop/Makonis/my-app-copy/my-app/src/Components/SubComponents/VideoDetails.js"],"sourcesContent":["/*\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect, useRef} from \"react\";\r\nimport ProgressBar from \"./Progressbar/ProgressBar\";\r\n\r\nconst removeDuplicateKeywords = () => {\r\n  const list = [];\r\n  const set = new Set();\r\n\r\n  return {\r\n    push(element) {\r\n      if (!set.has(element)) {\r\n        list.push(element);\r\n        set.add(element);\r\n      }\r\n    },\r\n    get() {\r\n      return list;\r\n    }\r\n  };\r\n}\r\n\r\nfunction VideoDetails() {\r\n  const [myData, setMyData] = useState([])\r\n  const [searchKeyword, setSearchKeyword] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const videoRef = useRef(null);\r\n\r\n  let allKeywords = removeDuplicateKeywords();\r\n  let titleofVideo = localStorage.getItem('title')\r\n  let localvideoFileName = localStorage.getItem('videoFileName')\r\n  let temp=''\r\n\r\n  const handleSeekTo = (time) => {\r\n    if (videoRef.current) {\r\n      videoRef.current.currentTime = time;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('./india.json')\r\n      .then((res) => setMyData(res.data)\r\n    )\r\n  }, []);\r\n\r\n  const toSeconds = (time) => {\r\n    let seconds = time.split(':')\r\n\r\n    let hr = parseInt(seconds[0], 10);\r\n    let min = parseInt(seconds[1], 10);\r\n    let sec = parseInt(seconds[2], 10);\r\n    \r\n    seconds = (hr * 3600) + (min * 60) + sec;\r\n\r\n    return seconds\r\n  }\r\n  \r\n  const myDiv = document.createElement('div');\r\n  myDiv.className = 'keywordContainer'\r\n\r\n  const displayTimeStamp = (searchKeyword,orginaltimeStamp,imgSrc) => {\r\n    \r\n    myDiv.innerHTML = ''\r\n    const timeStamp = new Set(orginaltimeStamp);\r\n\r\n    if(temp !== searchKeyword){\r\n      const btn = document.getElementById('videoDetails-searchBtn');\r\n      btn.addEventListener('click', function handleClick() {\r\n        myDiv.replaceChildren();\r\n        myDiv.style.border = 'none'\r\n      });\r\n      myDiv.replaceChildren();\r\n      myDiv.style.border = \"2px solid black\"\r\n    }\r\n    \r\n    for(let startTime of timeStamp.values()){\r\n      let originalTime = startTime\r\n      startTime = toSeconds(startTime)\r\n\r\n      const photoDiv = document.createElement('div');\r\n      photoDiv.style.border = \"2px solid black\"\r\n      photoDiv.className = 'photodiv-container';\r\n      photoDiv.onclick = handleSeekTo.bind(this,startTime);\r\n      \r\n      let img = document.createElement(\"img\");\r\n      img.className = 'keywordImage'\r\n      \r\n      let imgHover = document.createElement(\"img\");\r\n      //imgHover.src = \"image.png\";\r\n      imgHover.className = 'imgHoverEffect'\r\n\r\n\r\n      img.src = 'rbi/'+imgSrc;\r\n      imgHover.src = imgSrc;\r\n\r\n      photoDiv.appendChild(img);\r\n      //photoDiv.appendChild(imgHover);\r\n\r\n      const myButton = document.createElement('button');\r\n      myButton.innerHTML = originalTime;\r\n      myButton.id = 'seekToBtn';\r\n      myButton.onclick = handleSeekTo.bind(this,startTime);\r\n\r\n      photoDiv.append(myButton);\r\n      myDiv.append(photoDiv);\r\n      \r\n      photoDiv.addEventListener('mouseover', () => {\r\n        imgHover.style.display = 'block';\r\n        imgHover.style.left = photoDiv.offsetLeft + 'px';\r\n        imgHover.style.bottom = (photoDiv.offsetTop) + 'px';\r\n        //imgHover.style.bottom = (photoDiv.offsetTop + photoDiv.offsetHeight) + 'px';\r\n        //imgHover.style.bottom = (window.innerHeight - photoDiv.offsetTop) + 'px';\r\n      });\r\n      \r\n      photoDiv.addEventListener('mouseout', () => {\r\n        imgHover.style.display = 'none';\r\n      });\r\n    }\r\n        \r\n    document.body.append(myDiv);  \r\n  }\r\n\r\n  const handleSearch = () => {\r\n    let selectedkeyword = document.getElementById('inputVal').value\r\n    \r\n    selectedkeyword = selectedkeyword.toUpperCase()\r\n\r\n    if(selectedkeyword === \"Default\")\r\n        selectedkeyword = ''\r\n    setSearchKeyword(selectedkeyword)\r\n  }\r\n\r\n  const chunks = [];\r\n\r\n  const handleTimeUpdate = (newTime) => {\r\n    videoRef.current.currentTime = newTime;\r\n    setCurrentTime(newTime);\r\n  };\r\n\r\n  const handleDurationChange = () => {\r\n    setDuration(videoRef.current.duration);\r\n  };\r\n\r\n  const handleFullScreen = () => {\r\n    if(videoRef.current) {\r\n      videoRef.current.requestFullscreen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"videoDetails\">  \r\n      <div className=\"videoDetails-data\">\r\n        {\r\n          myData.map((post) => {\r\n            let { title, keyframes_text, chapters_list, image_metadata } = post            \r\n            localvideoFileName = localvideoFileName.toUpperCase() \r\n\r\n            let len = Object.keys(chapters_list).length\r\n            let timeStamp = [];\r\n            let imgSrc;\r\n\r\n            if(title.includes(titleofVideo) || titleofVideo.includes(title) || (titleofVideo === title)){\r\n              for(let i=1;i<=len;i++){\r\n                let obj = chapters_list[i]\r\n                let startTime = obj[0]\r\n                let keywords = obj[1]\r\n\r\n                let imageData = image_metadata[i]\r\n                let imagePath = imageData[0]\r\n  \r\n                if(keywords === searchKeyword){\r\n                  imgSrc = imagePath\r\n                }\r\n  \r\n                allKeywords.push(keywords)\r\n                keywords = keywords.toUpperCase()\r\n                \r\n                let obj2 = keyframes_text[i]\r\n                let endTime = obj2[1]\r\n                let startTimeSeconds = toSeconds(startTime)\r\n                let endTimeSeconds = toSeconds(endTime)\r\n  \r\n                const colors = [ \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#800000\", \"#FFA500\", \"#FFFFF0\" ];\r\n                \r\n                if(title.includes(titleofVideo) || titleofVideo.includes(title) || (titleofVideo === title)){\r\n                  const newChunk = {\r\n                    start: startTimeSeconds,\r\n                    end: endTimeSeconds-1,\r\n                    //color: colors[Math.floor(Math.random() * colors.length)],\r\n                    color: \"gray\",\r\n                    topic: keywords\r\n                  };\r\n                  chunks.push(newChunk);\r\n                }\r\n                \r\n                if(searchKeyword === '')\r\n                  return\r\n                if(keywords.includes(searchKeyword))\r\n                  timeStamp.push(startTime)\r\n              }\r\n            }\r\n            \r\n            return (<div>{displayTimeStamp(searchKeyword,timeStamp,imgSrc)}</div>)\r\n          })\r\n        }\r\n      </div>\r\n\r\n      <div className=\"videoDetails-video\">\r\n        <video\r\n          ref={videoRef}\r\n          src={localvideoFileName}\r\n          onTimeUpdate={() => setCurrentTime(videoRef.current.currentTime)}\r\n          onDurationChange={handleDurationChange}\r\n          height={360}\r\n          controls\r\n        />\r\n\r\n        <button id='fullScreen' onClick={handleFullScreen}>FullScreen</button>\r\n        \r\n        <ProgressBar\r\n          className=\"progressBar\"\r\n          currentTime={currentTime}\r\n          duration={duration}\r\n          onTimeUpdate={handleTimeUpdate}\r\n          chunks={chunks}\r\n        />\r\n      </div> \r\n\r\n      <div className=\"videoDetails-btn\">\r\n        <div className=\"keywords-container\">\r\n          <input id='inputVal' list=\"select-keyword\"/>\r\n\r\n          <datalist id='select-keyword' placeholder=\"Pick a keyword\">\r\n            <option id='option-keyword' value=\"\">Select a keyword</option>\r\n              { \r\n                allKeywords.get().sort().map((option, index) => {\r\n                  return <option key={index} > {option} </option>\r\n                })\r\n              }\r\n          </datalist >\r\n\r\n          <button className=\"videoDetails-searchBtn\" id=\"videoDetails-searchBtn\" onClick={handleSearch}>Search</button>\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoDetails;\r\n*/"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}