{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app-copy\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\Progressbar\\\\FullScreenProgressBar.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Chunk from \"./Chunk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FullScreenProgressBar = _ref => {\n  _s();\n  var _progressBarRef$curre;\n  let {\n    duration,\n    onTimeUpdate,\n    chunks,\n    videotimeNow\n  } = _ref;\n  const [currentTime, setCurrentTime] = useState(0);\n  const [progressTime, setProgressTime] = useState(0);\n  const progressBarRef = useRef(null);\n\n  /*\r\n  const uniqueTopics = chunks.reduce((acc, topic) => {\r\n    if (!acc[topic.topic]) {\r\n      acc[topic.topic] = topic;\r\n    }\r\n    return acc;\r\n  }, {});\r\n  \r\n  chunks = Object.values(uniqueTopics);\r\n  */\n\n  //Take first starting value and last ending value for duplicate topics keyword\n  const uniqueTopics = chunks.reduce((acc, topic) => {\n    if (!acc[topic.topic]) {\n      acc[topic.topic] = {\n        ...topic\n      };\n    } else {\n      acc[topic.topic].end = topic.end;\n    }\n    return acc;\n  }, {});\n  chunks = Object.values(uniqueTopics).map(topic => ({\n    ...topic,\n    start: topic.start\n  }));\n  const progressBarWrapperRef = useRef(null);\n  const handleProgressClick = event => {\n    event.preventDefault();\n    const progressBar = progressBarRef.current;\n    const progressWidth = progressBar.offsetWidth;\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left;\n    const newTime = progressClicked / progressWidth * duration;\n    setProgressTime(progressClicked);\n    onTimeUpdate(newTime);\n  };\n  const progress = currentTime / duration * 100;\n  const timeNow = currentTime / ((_progressBarRef$curre = progressBarRef.current) === null || _progressBarRef$curre === void 0 ? void 0 : _progressBarRef$curre.duration) * 100;\n  let chunksToShow = [];\n  chunks.forEach(chunk => {\n    const chunkClass = progress >= chunk.start && progress <= chunk.end ? \"chunk active\" : \"chunk\";\n    if (progress >= chunk.end) {\n      chunksToShow.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: chunkClass\n      }, `${chunk.start}-${chunk.end}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this));\n    }\n  });\n  useEffect(() => {\n    const progressBar = progressBarRef.current;\n    const handleTimeUpdate = () => {\n      setCurrentTime(progressBar.currentTime);\n    };\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate);\n  }, []);\n  const renderChunks = () => {\n    return chunks.map((chunk, index) => /*#__PURE__*/_jsxDEV(Chunk, {\n      ...chunk,\n      duration: duration,\n      progressTime: progressTime\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this));\n  };\n\n  //console.log(videotimeNow)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-bar-wrapper\",\n    ref: progressBarWrapperRef\n    //onClick={handleProgressClick}\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      ref: progressBarRef,\n      children: [renderChunks(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-thumb\",\n        style: {\n          left: `${videotimeNow}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(FullScreenProgressBar, \"+hJHYBbK1fkAbZ5wSN4uuDDkCSQ=\");\n_c = FullScreenProgressBar;\nexport default FullScreenProgressBar;\nvar _c;\n$RefreshReg$(_c, \"FullScreenProgressBar\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Chunk","jsxDEV","_jsxDEV","FullScreenProgressBar","_ref","_s","_progressBarRef$curre","duration","onTimeUpdate","chunks","videotimeNow","currentTime","setCurrentTime","progressTime","setProgressTime","progressBarRef","uniqueTopics","reduce","acc","topic","end","Object","values","map","start","progressBarWrapperRef","handleProgressClick","event","preventDefault","progressBar","current","progressWidth","offsetWidth","progressClicked","clientX","getBoundingClientRect","left","newTime","progress","timeNow","chunksToShow","forEach","chunk","chunkClass","push","className","fileName","_jsxFileName","lineNumber","columnNumber","handleTimeUpdate","addEventListener","renderChunks","index","ref","children","style","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app-copy/my-app/src/Components/SubComponents/Progressbar/FullScreenProgressBar.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\"\r\nimport Chunk from \"./Chunk\"\r\n\r\nconst FullScreenProgressBar = ({ duration, onTimeUpdate, chunks, videotimeNow }) => {\r\n  const [currentTime, setCurrentTime] = useState(0)\r\n  const [progressTime, setProgressTime] = useState(0)\r\n  const progressBarRef = useRef(null)\r\n  \r\n  /*\r\n  const uniqueTopics = chunks.reduce((acc, topic) => {\r\n    if (!acc[topic.topic]) {\r\n      acc[topic.topic] = topic;\r\n    }\r\n    return acc;\r\n  }, {});\r\n  \r\n  chunks = Object.values(uniqueTopics);\r\n  */\r\n\r\n  //Take first starting value and last ending value for duplicate topics keyword\r\n  const uniqueTopics = chunks.reduce((acc, topic) => {\r\n    if (!acc[topic.topic]) {\r\n      acc[topic.topic] = { ...topic };\r\n    } \r\n    else {\r\n      acc[topic.topic].end = topic.end;\r\n    }\r\n    return acc;\r\n  }, {});\r\n  \r\n  chunks = Object.values(uniqueTopics).map(topic => ({ ...topic, start: topic.start }));\r\n\r\n  const progressBarWrapperRef = useRef(null);\r\n\r\n  const handleProgressClick = (event) => {\r\n    event.preventDefault();\r\n    const progressBar = progressBarRef.current\r\n    const progressWidth = progressBar.offsetWidth\r\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left\r\n    const newTime = (progressClicked / progressWidth) * duration\r\n    setProgressTime(progressClicked)\r\n    onTimeUpdate(newTime)\r\n  }\r\n\r\n  const progress = (currentTime / duration) * 100\r\n  const timeNow = (currentTime / progressBarRef.current?.duration) * 100;\r\n\r\n  let chunksToShow = []\r\n\r\n  chunks.forEach((chunk) => {\r\n    const chunkClass =\r\n      progress >= chunk.start && progress <= chunk.end\r\n        ? \"chunk active\"\r\n        : \"chunk\"\r\n\r\n    if (progress >= chunk.end) {\r\n      chunksToShow.push(\r\n        <div className={chunkClass} key={`${chunk.start}-${chunk.end}`} />\r\n      )\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    const progressBar = progressBarRef.current\r\n\r\n    const handleTimeUpdate = () => {\r\n      setCurrentTime(progressBar.currentTime)\r\n    }\r\n\r\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate)\r\n  }, [])\r\n\r\n  const renderChunks = () => {\r\n    return chunks.map((chunk, index) => (\r\n      <Chunk\r\n        key={index}\r\n        {...chunk}\r\n        duration={duration}\r\n        progressTime={progressTime}\r\n      />\r\n    ))\r\n  }\r\n\r\n  //console.log(videotimeNow)\r\n\r\n  return (\r\n    <div\r\n      className=\"progress-bar-wrapper\"\r\n      ref={progressBarWrapperRef}\r\n      //onClick={handleProgressClick}\r\n    >\r\n      <div\r\n        className=\"progress-bar\"\r\n        ref={progressBarRef}\r\n      >\r\n        {renderChunks()}\r\n        <div\r\n          className=\"progress-bar-thumb\"\r\n          style={{ left: `${videotimeNow}%` }}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FullScreenProgressBar"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}