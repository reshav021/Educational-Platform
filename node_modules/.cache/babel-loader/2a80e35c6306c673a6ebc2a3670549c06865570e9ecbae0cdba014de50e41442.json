{"ast":null,"code":"import _objectSpread from\"C:/Users/reshav/Desktop/Makonis/my-app-copy/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"C:/Users/reshav/Desktop/Makonis/my-app-copy/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useRef,useState,useEffect}from\"react\";import Chunk from\"./Chunk\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ProgressBar=function ProgressBar(_ref){var _progressBarRef$curre;var duration=_ref.duration,onTimeUpdate=_ref.onTimeUpdate,chunks=_ref.chunks,videotimeNow=_ref.videotimeNow;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),currentTime=_useState2[0],setCurrentTime=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),progressTime=_useState4[0],setProgressTime=_useState4[1];var progressBarRef=useRef(null);//console.log(videotimeNow)\nvar handleProgressClick=function handleProgressClick(event){var progressBar=progressBarRef.current;var progressWidth=progressBar.offsetWidth;var progressClicked=event.clientX-progressBar.getBoundingClientRect().left;setProgressTime(progressClicked);var newTime=progressClicked/progressWidth*duration;onTimeUpdate(newTime);};var progress=currentTime/duration*100;var timeNow=currentTime/((_progressBarRef$curre=progressBarRef.current)===null||_progressBarRef$curre===void 0?void 0:_progressBarRef$curre.duration)*100;//console.log(progress)\nvar chunksToShow=[];chunks.forEach(function(chunk){var chunkClass=progress>=chunk.start&&progress<=chunk.end?\"chunk active\":\"chunk\";if(progress>=chunk.end){chunksToShow.push(/*#__PURE__*/_jsx(\"div\",{className:chunkClass},\"\".concat(chunk.start,\"-\").concat(chunk.end)));}});useEffect(function(){var progressBar=progressBarRef.current;var handleTimeUpdate=function handleTimeUpdate(){setCurrentTime(progressBar.currentTime);};progressBar.addEventListener(\"timeupdate\",handleTimeUpdate);},[]);var renderChunks=function renderChunks(){return chunks.map(function(chunk,index){return/*#__PURE__*/_jsx(Chunk,_objectSpread(_objectSpread({},chunk),{},{duration:duration,progressTime:progressTime}),index);});};//console.log(progressTime)\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"progress-bar\",ref:progressBarRef,onClick:handleProgressClick,children:[renderChunks(),/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar-thumb\",style:{left:\"\".concat(videotimeNow,\"%\")}})]});};export default ProgressBar;","map":{"version":3,"names":["React","useRef","useState","useEffect","Chunk","jsx","_jsx","jsxs","_jsxs","ProgressBar","_ref","_progressBarRef$curre","duration","onTimeUpdate","chunks","videotimeNow","_useState","_useState2","_slicedToArray","currentTime","setCurrentTime","_useState3","_useState4","progressTime","setProgressTime","progressBarRef","handleProgressClick","event","progressBar","current","progressWidth","offsetWidth","progressClicked","clientX","getBoundingClientRect","left","newTime","progress","timeNow","chunksToShow","forEach","chunk","chunkClass","start","end","push","className","concat","handleTimeUpdate","addEventListener","renderChunks","map","index","_objectSpread","ref","onClick","children","style"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app-copy/my-app/src/Components/SubComponents/Progressbar/ProgressBar.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\"\r\nimport Chunk from \"./Chunk\"\r\n\r\nconst ProgressBar = ({ duration, onTimeUpdate, chunks, videotimeNow }) => {\r\n  const [currentTime, setCurrentTime] = useState(0)\r\n  const [progressTime, setProgressTime] = useState(0)\r\n  const progressBarRef = useRef(null)\r\n  //console.log(videotimeNow)\r\n\r\n  const handleProgressClick = (event) => {\r\n    const progressBar = progressBarRef.current\r\n    const progressWidth = progressBar.offsetWidth\r\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left\r\n    setProgressTime(progressClicked)\r\n    const newTime = (progressClicked / progressWidth) * duration\r\n    onTimeUpdate(newTime)\r\n    \r\n  }\r\n\r\n  const progress = (currentTime / duration) * 100\r\n  const timeNow = (currentTime / progressBarRef.current?.duration) * 100;\r\n  //console.log(progress)\r\n  let chunksToShow = []\r\n\r\n  chunks.forEach((chunk) => {\r\n    const chunkClass =\r\n      progress >= chunk.start && progress <= chunk.end\r\n        ? \"chunk active\"\r\n        : \"chunk\"\r\n\r\n    if (progress >= chunk.end) {\r\n      chunksToShow.push(\r\n        <div className={chunkClass} key={`${chunk.start}-${chunk.end}`} />\r\n      )\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    const progressBar = progressBarRef.current\r\n\r\n    const handleTimeUpdate = () => {\r\n      setCurrentTime(progressBar.currentTime)\r\n    }\r\n\r\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate)\r\n  }, [])\r\n\r\n  const renderChunks = () => {\r\n    return chunks.map((chunk, index) => (\r\n      <Chunk\r\n        key={index}\r\n        {...chunk}\r\n        duration={duration}\r\n        progressTime={progressTime}\r\n      />\r\n    ))\r\n  }\r\n\r\n  //console.log(progressTime)\r\n\r\n  return (\r\n    <div\r\n      className=\"progress-bar\"\r\n      ref={progressBarRef}\r\n      onClick={handleProgressClick}\r\n    >\r\n      {renderChunks()}\r\n      <div\r\n        className=\"progress-bar-thumb\"\r\n        style={{ left: `${videotimeNow}%` }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressBar\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}