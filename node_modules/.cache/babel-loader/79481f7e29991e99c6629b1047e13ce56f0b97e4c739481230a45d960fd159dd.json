{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app-copy2\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\VideoDetails.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { BiFullscreen } from \"react-icons/bi\";\nimport ProgressBar from \"./Progressbar/ProgressBar\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VideoDetails(props) {\n  _s();\n  const [myData, setMyData] = useState([]);\n  const [searchKeyword, setSearchKeyword] = useState(0);\n  const chunks = [];\n  const videoRef = useRef();\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [videotimeNow, setCurrentVideoTime] = useState(0);\n  const [displayKeywordContainer, setDisplayKeywordContainer] = useState(false);\n  const progressTooltipRef = useRef(null);\n  const [fullscreen, setFullscreen] = useState(false);\n  const [fullscreenProgressBar, setfullscreenProgressBar] = useState(false);\n  let showDiv = props.showDiv;\n  let localtitle = props.myTitle;\n  let videoFileName = props.myVideoFileName;\n\n  // Setting the API/JSON data\n  useEffect(() => {\n    axios.get(\"./india.json\").then(res => setMyData(res.data));\n  }, []);\n\n  // Function to remove duplicates appearing in the search input \n  const removeDuplicateKeywords = () => {\n    const list = [];\n    const set = new Set();\n    return {\n      push(element) {\n        if (!set.has(element)) {\n          list.push(element);\n          set.add(element);\n        }\n      },\n      get() {\n        return list;\n      }\n    };\n  };\n\n  // Remove all duplicate keywords appearing in the search input \n  let allKeywords = removeDuplicateKeywords();\n\n  // Takes us to give time duration in the video\n  const handleSeekTo = time => {\n    if (videoRef.current) videoRef.current.currentTime = time + 1;\n  };\n\n  // Converting hh:mm:ss to seconds\n  const toSeconds = timeString => {\n    timeString = timeString + \"\";\n    let time = timeString.split(\":\");\n    let hr = parseInt(time[0], 10);\n    let min = parseInt(time[1], 10);\n    let sec = parseInt(time[2], 10);\n    return hr * 3600 + min * 60 + sec;\n  };\n\n  // Search a topic inside the video\n  const handleSearch = () => {\n    setDisplayKeywordContainer(true);\n    let selectedkeyword = document.getElementById(\"inputVal\").value;\n    selectedkeyword = selectedkeyword.toUpperCase();\n    if (selectedkeyword === \"Default\") selectedkeyword = \"\";\n    setSearchKeyword(selectedkeyword);\n  };\n  const handleTimeUpdate = newTime => {\n    videoRef.current.currentTime = newTime;\n    setCurrentTime(newTime);\n  };\n\n  // Gives the entire video duration\n  const handleDurationChange = () => {\n    setDuration(videoRef.current.duration);\n  };\n  function handleTime() {\n    setCurrentTime(videoRef.current.currentTime);\n    setCurrentVideoTime(videoRef.current.currentTime);\n  }\n\n  // Function to adjust to fullscreen view\n  const toggleFullScreen = async event => {\n    const container = document.getElementById(\"video-container\");\n    const fullscreenApi = container.requestFullscreen || container.webkitRequestFullScreen || container.mozRequestFullScreen || container.msRequestFullscreen;\n    if (!document.fullscreenElement) {\n      setFullscreen(true);\n      fullscreenApi.call(container);\n    } else {\n      document.exitFullscreen();\n      setFullscreen(false);\n    }\n  };\n\n  // Event handler to detect fullscreen mode changes\n  const handleFullScreenChange = () => {\n    if (!document.fullscreenElement) {\n      setFullscreen(false);\n    }\n  };\n\n  // Register the event listener\n  document.addEventListener(\"fullscreenchange\", handleFullScreenChange);\n\n  // Removes the event listener when the component is unmounted/removed\n  useEffect(() => {\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", handleFullScreenChange);\n    };\n  }, []);\n\n  // Shows time in correct format mm:ss\n  const formatTime = time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${String(seconds).padStart(2, \"0\")}`;\n  };\n\n  // Display topic in the progressbar of video\n  const displayTopic = event => {\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'none'\n    const rect = event.target.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const percentage = x / rect.width;\n    const time = duration * percentage;\n    let textToDisplay = '';\n    for (let i = 0; i < chunks.length; i++) {\n      let chunksData = chunks[i];\n      if (time > chunksData.start && time < chunksData.end) textToDisplay = chunksData.topic;\n    }\n    setfullscreenProgressBar(true);\n    if (fullscreen === true && progressTooltipRef.current) {\n      progressTooltipRef.current.style.display = \"block\";\n      progressTooltipRef.current.style.left = `${event.clientX}px`;\n      progressTooltipRef.current.style.top = `${rect.top - progressTooltipRef.current.offsetHeight}px`;\n      progressTooltipRef.current.innerText = textToDisplay + \" \" + formatTime(time);\n    }\n  };\n\n  // Hides the topic to be displayed when outside the fullscreen view\n  const notdisplayTopic = () => {\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'block'\n    setfullscreenProgressBar(false);\n    if (fullscreen === true && progressTooltipRef.current) {\n      progressTooltipRef.current.style.display = \"none\";\n    }\n  };\n  const [progress, setProgress] = useState(0);\n  useEffect(() => {\n    const handleProgress = () => {\n      if (videoRef.current && !isNaN(videoRef.current.duration)) {\n        setProgress(videoRef.current.currentTime / videoRef.current.duration * 100);\n      }\n    };\n    if (videoRef.current) {\n      videoRef.current.addEventListener(\"timeupdate\", handleProgress);\n    }\n    return () => {\n      if (videoRef.current) {\n        videoRef.current.removeEventListener(\"timeupdate\", handleProgress);\n      }\n    };\n  }, []);\n  const handleProgressBarChange = e => {\n    const progressBarValue = e.target.value;\n    setProgress(progressBarValue);\n    if (videoRef.current && !isNaN(videoRef.current.duration)) {\n      const seekTime = progressBarValue / 100 * videoRef.current.duration;\n      videoRef.current.currentTime = seekTime;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"videoDetails\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listchartheader\",\n      children: [\"       \", /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"navbar\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          id: \"header-content\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            id: \"header-logo\",\n            src: \"/logo/img3.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videoDetails-data\",\n      children: myData.map(post => {\n        let {\n          title,\n          faculty,\n          domain,\n          chapters_list,\n          image_metadata\n        } = post;\n        title = title.toUpperCase();\n        faculty = faculty.toUpperCase();\n        domain = domain.toUpperCase();\n        localtitle = localtitle.toUpperCase();\n        if (title === localtitle) {\n          let len = Object.keys(chapters_list).length;\n          let timeStamp = [];\n          let imgSrc, imgFile;\n          for (let i = 1; i <= len; i++) {\n            let obj = chapters_list[i];\n            let startTime = obj[0];\n            let endTime = obj[1];\n            let keywords = obj[3];\n            let imageData = image_metadata[i];\n            //let imagePath = imageData[0]\n            let imagePath = imageData[0];\n            if (keywords === searchKeyword) {\n              imgSrc = imagePath;\n              imgFile = title;\n            }\n            keywords = keywords.toUpperCase();\n            allKeywords.push(keywords);\n            keywords = keywords.toUpperCase();\n            let startTimeSeconds = toSeconds(startTime);\n            let endTimeSeconds = toSeconds(endTime);\n\n            //Random colors\n            const colors = [\"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#800000\", \"#FFA500\", \"#FFFFF0\"];\n            const newChunk = {\n              start: startTimeSeconds,\n              end: endTimeSeconds - 1.5,\n              //color: colors[Math.floor(Math.random() * colors.length)],\n              color: \"gray\",\n              topic: keywords\n            };\n            chunks.push(newChunk); // Inserting all data related to a topic inside chunks[]\n\n            if (searchKeyword === \"\") return;\n            if (keywords.includes(searchKeyword))\n              // Inserting all the timestamps inside timeStamp[]\n              timeStamp.push(startTime);\n          }\n          let startTime = toSeconds(timeStamp[0]); // Converting hh:mm:ss to seconds\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: showDiv && displayKeywordContainer && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"keywordContainer\",\n              children: [\"    \", /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"photodiv-container\",\n                onClick: handleSeekTo.bind(this, startTime),\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"keywordImage\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: './ImgVideoData/' + imgFile + '/' + imgSrc\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  id: \"seekToBtn\",\n                  onClick: handleSeekTo.bind(this, startTime),\n                  children: [\"Seek to \", timeStamp[0]]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videoDetails-video\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        id: \"video-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          src: videoFileName,\n          onTimeUpdate: handleTime,\n          onDurationChange: handleDurationChange,\n          height: 359.6,\n          controls: true,\n          autoPlay: true,\n          onMouseMove: displayTopic,\n          onMouseOut: notdisplayTopic\n          //onProgress={handleProgress}\n          ,\n          id: \"video-player\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"top-overlay\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"                       \", /*#__PURE__*/_jsxDEV(BiFullscreen, {\n              id: \"fullscreen-toggle-btn\",\n              role: \"button\",\n              class: \"bi bi-fullscreen text-white text-outline\",\n              onClick: event => toggleFullScreen(event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"bottom-overlay\",\n          children: [fullscreenProgressBar && /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"progressTooltip\",\n            ref: progressTooltipRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"progresss\",\n            type: \"range\",\n            min: \"0\",\n            max: \"100\",\n            value: progress,\n            step: \"any\",\n            onChange: handleProgressBarChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        className: \"progressBar\",\n        id: \"normalProgressBar\",\n        currentTime: currentTime,\n        duration: duration,\n        onTimeUpdate: handleTimeUpdate,\n        chunks: chunks,\n        videotimeNow: videotimeNow,\n        value: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videoDetails-btn\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"inputVideoDetails\",\n        children: [\"      \", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"inputVal\",\n          list: \"select-keyword\",\n          autoComplete: \"off\",\n          placeholder: \"Search a topic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n          id: \"select-keyword\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            id: \"option-keyword\",\n            value: \"\",\n            children: \"Select a keyword\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), allKeywords.get().sort().map((option, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: [\" \", option, \" \"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 22\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"videoDetails-searchBtn\",\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoDetails, \"dB7o24RTV9N0CFD1dz8lnBANmJU=\");\n_c = VideoDetails;\nexport default VideoDetails;\nvar _c;\n$RefreshReg$(_c, \"VideoDetails\");","map":{"version":3,"names":["axios","BiFullscreen","ProgressBar","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","VideoDetails","props","_s","myData","setMyData","searchKeyword","setSearchKeyword","chunks","videoRef","duration","setDuration","currentTime","setCurrentTime","videotimeNow","setCurrentVideoTime","displayKeywordContainer","setDisplayKeywordContainer","progressTooltipRef","fullscreen","setFullscreen","fullscreenProgressBar","setfullscreenProgressBar","showDiv","localtitle","myTitle","videoFileName","myVideoFileName","get","then","res","data","removeDuplicateKeywords","list","set","Set","push","element","has","add","allKeywords","handleSeekTo","time","current","toSeconds","timeString","split","hr","parseInt","min","sec","handleSearch","selectedkeyword","document","getElementById","value","toUpperCase","handleTimeUpdate","newTime","handleDurationChange","handleTime","toggleFullScreen","event","container","fullscreenApi","requestFullscreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen","fullscreenElement","call","exitFullscreen","handleFullScreenChange","addEventListener","removeEventListener","formatTime","minutes","Math","floor","seconds","String","padStart","displayTopic","rect","target","getBoundingClientRect","x","clientX","left","percentage","width","textToDisplay","i","length","chunksData","start","end","topic","style","display","top","offsetHeight","innerText","notdisplayTopic","progress","setProgress","handleProgress","isNaN","handleProgressBarChange","e","progressBarValue","seekTime","className","children","id","src","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","faculty","domain","chapters_list","image_metadata","len","Object","keys","timeStamp","imgSrc","imgFile","obj","startTime","endTime","keywords","imageData","imagePath","startTimeSeconds","endTimeSeconds","colors","newChunk","color","includes","onClick","bind","ref","onTimeUpdate","onDurationChange","height","controls","autoPlay","onMouseMove","onMouseOut","role","class","type","max","step","onChange","autoComplete","placeholder","sort","option","index","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app-copy2/my-app/src/Components/SubComponents/VideoDetails.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { BiFullscreen } from \"react-icons/bi\"\r\nimport ProgressBar from \"./Progressbar/ProgressBar\"\r\nimport React, { useState, useEffect, useRef } from \"react\"\r\n\r\nfunction VideoDetails(props) {\r\n  const [myData, setMyData] = useState([])\r\n  const [searchKeyword, setSearchKeyword] = useState(0)\r\n\r\n  const chunks = []\r\n  const videoRef = useRef() \r\n  \r\n  const [duration, setDuration] = useState(0)\r\n  const [currentTime, setCurrentTime] = useState(0)\r\n  const [videotimeNow, setCurrentVideoTime] = useState(0) \r\n  const [displayKeywordContainer,setDisplayKeywordContainer] = useState(false)\r\n\r\n  const progressTooltipRef = useRef(null);\r\n  const [fullscreen, setFullscreen] = useState(false);\r\n  const [fullscreenProgressBar, setfullscreenProgressBar] = useState(false)\r\n\r\n  let showDiv = props.showDiv\r\n  let localtitle = props.myTitle\r\n  let videoFileName = props.myVideoFileName\r\n\r\n  // Setting the API/JSON data\r\n  useEffect(() => {\r\n    axios.get(\"./india.json\").then((res) => setMyData(res.data))\r\n  }, [])\r\n\r\n  // Function to remove duplicates appearing in the search input \r\n  const removeDuplicateKeywords = () => {\r\n    const list = []\r\n    const set = new Set()\r\n\r\n    return {\r\n      push(element) {\r\n        if (!set.has(element)) {\r\n          list.push(element)\r\n          set.add(element)\r\n        }\r\n      },\r\n      get() {\r\n        return list\r\n      },\r\n    }\r\n  }\r\n\r\n  // Remove all duplicate keywords appearing in the search input \r\n  let allKeywords = removeDuplicateKeywords()\r\n\r\n  // Takes us to give time duration in the video\r\n  const handleSeekTo = (time) => {\r\n    if(videoRef.current)\r\n      videoRef.current.currentTime = time + 1\r\n  }\r\n\r\n  // Converting hh:mm:ss to seconds\r\n  const toSeconds = (timeString) => {\r\n    timeString = timeString + \"\"\r\n    let time = timeString.split(\":\")\r\n\r\n    let hr = parseInt(time[0], 10)\r\n    let min = parseInt(time[1], 10)\r\n    let sec = parseInt(time[2], 10)\r\n\r\n    return hr * 3600 + min * 60 + sec\r\n  }\r\n\r\n  // Search a topic inside the video\r\n  const handleSearch = () => {\r\n    setDisplayKeywordContainer(true)\r\n    let selectedkeyword = document.getElementById(\"inputVal\").value\r\n    selectedkeyword = selectedkeyword.toUpperCase()\r\n\r\n    if(selectedkeyword === \"Default\") \r\n      selectedkeyword = \"\"\r\n    setSearchKeyword(selectedkeyword)\r\n  }\r\n\r\n  const handleTimeUpdate = (newTime) => {\r\n    videoRef.current.currentTime = newTime\r\n    setCurrentTime(newTime)\r\n  }\r\n\r\n  // Gives the entire video duration\r\n  const handleDurationChange = () => {\r\n    setDuration(videoRef.current.duration)\r\n  }\r\n\r\n  function handleTime() {\r\n    setCurrentTime(videoRef.current.currentTime)\r\n    setCurrentVideoTime(videoRef.current.currentTime)\r\n  }\r\n\r\n  // Function to adjust to fullscreen view\r\n  const toggleFullScreen = async (event) => {\r\n    const container = document.getElementById(\"video-container\");\r\n    const fullscreenApi = container.requestFullscreen || container.webkitRequestFullScreen ||\r\n      container.mozRequestFullScreen || container.msRequestFullscreen;\r\n\r\n    if(!document.fullscreenElement) {\r\n      setFullscreen(true);\r\n      fullscreenApi.call(container);\r\n    } \r\n    else {\r\n      document.exitFullscreen();\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  // Event handler to detect fullscreen mode changes\r\n  const handleFullScreenChange = () => {\r\n    if (!document.fullscreenElement) {\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  // Register the event listener\r\n  document.addEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n\r\n  // Removes the event listener when the component is unmounted/removed\r\n  useEffect(() => {\r\n    return () => {\r\n      document.removeEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n    };\r\n  }, []);\r\n\r\n  // Shows time in correct format mm:ss\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${String(seconds).padStart(2, \"0\")}`;\r\n  }\r\n\r\n  // Display topic in the progressbar of video\r\n  const displayTopic = (event) => {\r\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'none'\r\n    const rect = event.target.getBoundingClientRect();\r\n    const x = event.clientX - rect.left;\r\n    const percentage = x / rect.width;\r\n    const time = duration * percentage;\r\n    let textToDisplay = '';\r\n\r\n    for(let i=0;i<chunks.length;i++){\r\n      let chunksData = chunks[i];\r\n\r\n      if((time > chunksData.start) && (time < chunksData.end))\r\n        textToDisplay = chunksData.topic\r\n    }\r\n\r\n    setfullscreenProgressBar(true)\r\n\r\n    if(fullscreen === true && progressTooltipRef.current) {\r\n      progressTooltipRef.current.style.display = \"block\";\r\n      progressTooltipRef.current.style.left = `${event.clientX}px`;\r\n      progressTooltipRef.current.style.top = `${rect.top - progressTooltipRef.current.offsetHeight}px`;\r\n      progressTooltipRef.current.innerText = textToDisplay + \" \" + formatTime(time);\r\n    }\r\n  };\r\n  \r\n  // Hides the topic to be displayed when outside the fullscreen view\r\n  const notdisplayTopic = () => {\r\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'block'\r\n    setfullscreenProgressBar(false)\r\n\r\n    if(fullscreen === true && progressTooltipRef.current) {\r\n      progressTooltipRef.current.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  const [progress, setProgress] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    const handleProgress = () => {\r\n      if (videoRef.current && !isNaN(videoRef.current.duration)) {\r\n        setProgress(\r\n          (videoRef.current.currentTime / videoRef.current.duration) * 100\r\n        );\r\n      }\r\n    };\r\n\r\n    if (videoRef.current) {\r\n      videoRef.current.addEventListener(\"timeupdate\", handleProgress);\r\n    }\r\n\r\n    return () => {\r\n      if (videoRef.current) {\r\n        videoRef.current.removeEventListener(\"timeupdate\", handleProgress);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleProgressBarChange = (e) => {\r\n    const progressBarValue = e.target.value;\r\n    setProgress(progressBarValue);\r\n    if (videoRef.current && !isNaN(videoRef.current.duration)) {\r\n      const seekTime = (progressBarValue / 100) * videoRef.current.duration;\r\n      videoRef.current.currentTime = seekTime;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"videoDetails\">\r\n      <div className=\"listchartheader\">       {/* Displaying company logo at the top */}\r\n        <li className=\"navbar\">\r\n          <a id=\"header-content\"><img id=\"header-logo\" src='/logo/img3.png'></img></a>\r\n        </li>\r\n      </div>\r\n\r\n      <div className=\"videoDetails-data\">\r\n        {myData.map((post) => {\r\n          let { title, faculty, domain, chapters_list, image_metadata } = post\r\n\r\n          title = title.toUpperCase()\r\n          faculty = faculty.toUpperCase()\r\n          domain = domain.toUpperCase()\r\n          localtitle = localtitle.toUpperCase()\r\n\r\n          if(title === localtitle) {\r\n            let len = Object.keys(chapters_list).length\r\n            let timeStamp = []\r\n            let imgSrc,imgFile\r\n\r\n            for(let i = 1; i <= len; i++) {\r\n              let obj = chapters_list[i]\r\n              let startTime = obj[0]\r\n              let endTime = obj[1]\r\n              let keywords = obj[3]\r\n\r\n              let imageData = image_metadata[i]\r\n              //let imagePath = imageData[0]\r\n              let imagePath = imageData[0]\r\n\r\n              if (keywords === searchKeyword) {\r\n                imgSrc = imagePath\r\n                imgFile = title\r\n              }\r\n\r\n              keywords = keywords.toUpperCase()\r\n              allKeywords.push(keywords)\r\n              \r\n              keywords = keywords.toUpperCase()\r\n\r\n              let startTimeSeconds = toSeconds(startTime)\r\n              let endTimeSeconds = toSeconds(endTime)\r\n\r\n              //Random colors\r\n              const colors = [ \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#800000\", \"#FFA500\", \"#FFFFF0\", ]\r\n\r\n              const newChunk = {\r\n                start: startTimeSeconds,\r\n                end: endTimeSeconds - 1.5,\r\n                //color: colors[Math.floor(Math.random() * colors.length)],\r\n                color: \"gray\",\r\n                topic: keywords,\r\n              }\r\n\r\n              chunks.push(newChunk)                 // Inserting all data related to a topic inside chunks[]\r\n\r\n              if(searchKeyword === \"\") \r\n                return\r\n              \r\n              if(keywords.includes(searchKeyword))   // Inserting all the timestamps inside timeStamp[]\r\n                timeStamp.push(startTime)\r\n            }\r\n\r\n            let startTime = toSeconds(timeStamp[0])  // Converting hh:mm:ss to seconds\r\n\r\n            return (\r\n              <div>\r\n                {showDiv && displayKeywordContainer &&(\r\n                  <div className=\"keywordContainer\">    {/* Displaying photo and timestamp of a topic */}\r\n                    <div className=\"photodiv-container\" onClick = {handleSeekTo.bind(this, startTime)}>\r\n                      <div className=\"keywordImage\">\r\n                        <img src={'./ImgVideoData/' + imgFile + '/' +imgSrc}></img>\r\n                      </div>\r\n                      <button id=\"seekToBtn\" onClick = {handleSeekTo.bind(this, startTime)}>Seek to {timeStamp[0]}</button>\r\n                            \r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )\r\n          }\r\n        })}\r\n      </div>\r\n\r\n      <div className=\"videoDetails-video\">\r\n        <div className=\"row\" id=\"video-container\"> {/* Displaying video */}\r\n          <video\r\n            ref={videoRef}\r\n            src={videoFileName}\r\n            onTimeUpdate={handleTime}\r\n            onDurationChange={handleDurationChange}\r\n            height={359.6}\r\n            controls\r\n            autoPlay\r\n            onMouseMove={displayTopic}\r\n            onMouseOut={notdisplayTopic}\r\n            //onProgress={handleProgress}\r\n            id=\"video-player\"\r\n          />\r\n\r\n          <div id=\"top-overlay\">\r\n            <div>                       {/* Displaying progressbar on top of video */}\r\n              <BiFullscreen                 \r\n                id=\"fullscreen-toggle-btn\"\r\n                role=\"button\"\r\n                class=\"bi bi-fullscreen text-white text-outline\"\r\n                onClick={(event) => toggleFullScreen(event)}\r\n              ></BiFullscreen>\r\n            </div>\r\n          </div>\r\n\r\n          <div id=\"bottom-overlay\">\r\n            {fullscreenProgressBar && (\r\n              <div id=\"progressTooltip\" ref={progressTooltipRef}></div>\r\n            )}\r\n\r\n            {/*Blue color progressbar*/}\r\n            <input id=\"progresss\" type=\"range\" min=\"0\" max=\"100\" value={progress} step=\"any\" onChange={handleProgressBarChange}/>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Displaying the progress bar by sending data to ProgressBar.js file*/}\r\n        <ProgressBar\r\n          className=\"progressBar\"\r\n          id=\"normalProgressBar\"\r\n          currentTime={currentTime}\r\n          duration={duration}\r\n          onTimeUpdate={handleTimeUpdate}\r\n          chunks={chunks}\r\n          videotimeNow={videotimeNow}\r\n          value={2}\r\n        />\r\n\r\n        \r\n      </div>\r\n\r\n      <div className=\"videoDetails-btn\">\r\n        <div id=\"inputVideoDetails\">      {/* Displaying search input & button */}\r\n          <input id=\"inputVal\" list=\"select-keyword\" autoComplete=\"off\" placeholder=\"Search a topic\"/>\r\n\r\n          <datalist id=\"select-keyword\">\r\n            <option id=\"option-keyword\" value=\"\">\r\n              Select a keyword\r\n            </option>\r\n            {allKeywords.get().sort().map((option, index) => {\r\n              return <option key={index}> {option} </option>\r\n            })}\r\n          </datalist>\r\n        </div>\r\n\r\n        <button className=\"videoDetails-searchBtn\" onClick={handleSearch}>Search</button>     \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoDetails"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}