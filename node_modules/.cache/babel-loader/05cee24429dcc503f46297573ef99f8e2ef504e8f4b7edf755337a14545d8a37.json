{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\India.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst India = () => {\n  _s();\n  const [data, setMyData] = useState([]);\n  const [selectedOuterData, setSelectedOuterData] = useState(null);\n  const COLORS = [\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#1abc9c\", \"#3498db\", \"#9b59b6\", \"#34495e\", \"#f1c40f\", \"#e74c3c\", \"#95a5a6\", \"#2ecc71\", \"#8e44ad\", \"#d35400\", \"#7f8c8d\", \"#27ae60\"];\n  const handleOuterPieEnter = data => {\n    setSelectedOuterData(data);\n  };\n  useEffect(() => {\n    axios.get('./india-cluster.json').then(res => setMyData(res.data));\n  }, [0]);\n  const titles = data.reduce((item, _ref) => {\n    let {\n      documents\n    } = _ref;\n    documents.forEach(_ref2 => {\n      let {\n        title\n      } = _ref2;\n      if (item[title]) {\n        item[title]++; //title already exists, increment it's count by 1\n      } else {\n        item[title] = 1; //title does not exist, add it to the object(item) with count 1\n      }\n    });\n\n    return item;\n  }, {});\n  const chartData = [];\n  Object.keys(titles).forEach(title => {\n    const count = titles[title];\n    for (let i = 0; i < count; i++) {\n      chartData.push({\n        title,\n        count\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clusters\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"displayPieChart\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"piechart-content\",\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          width: 400,\n          height: 400,\n          children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Pie, {\n            data: chartData,\n            dataKey: \"count\",\n            nameKey: \"title\",\n            cx: \"50%\",\n            cy: \"50%\",\n            outerRadius: 80,\n            fill: \"#8884d8\",\n            label: true,\n            onClick: handleOuterPieEnter,\n            children: chartData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: COLORS[index % COLORS.length]\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), selectedOuterData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"piechart-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedOuterData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: data.map(post => {\n            let {\n              documents\n            } = post;\n            for (let i = 0; i < documents.length; i++) {\n              let title = documents[i].title;\n              if (title === selectedOuterData.title) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: documents[i].content\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 45\n                }, this);\n              }\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(India, \"PBIyjbB7H7lh0pqHe4TamOwR7Ow=\");\n_c = India;\nexport default India;\n\n/*\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst India = () => {\r\n  const [data, setMyData] = useState([])\r\n\r\n  useEffect(() => {\r\n    axios.get('./india-clusters.json')\r\n      .then((res) => setMyData(res.data)\r\n    )\r\n  }, [0]);\r\n\r\n  const titles = data.flatMap((category) =>\r\n    category.documents.map((document) => document.title)\r\n  );\r\n\r\n  const titleCounts = titles.reduce((counts, title) => {\r\n    counts[title] = (counts[title] || 0) + 1;\r\n    return counts;\r\n  }, {});\r\n\r\n  const chartData = {\r\n    labels: Object.keys(titleCounts),\r\n    datasets: [\r\n      {\r\n        label: \"Titles\",\r\n        data: Object.values(titleCounts),\r\n        backgroundColor: [\r\n            \"#FF6384\",\r\n            \"#36A2EB\",\r\n            \"#FFCE56\",\r\n            \"#1abc9c\",\r\n            \"#3498db\",\r\n            \"#9b59b6\",\r\n            \"#34495e\",\r\n            \"#f1c40f\",\r\n            \"#e74c3c\",\r\n            \"#95a5a6\",\r\n            \"#2ecc71\",\r\n            \"#8e44ad\",\r\n            \"#d35400\",\r\n            \"#7f8c8d\",\r\n            \"#27ae60\"\r\n          ]   \r\n      }\r\n    ]\r\n  };\r\n\r\n  return <Pie data={chartData} />;\r\n};\r\n\r\nexport default India\r\n*/\nvar _c;\n$RefreshReg$(_c, \"India\");","map":{"version":3,"names":["axios","React","useState","useEffect","PieChart","Pie","Cell","Legend","jsxDEV","_jsxDEV","India","_s","data","setMyData","selectedOuterData","setSelectedOuterData","COLORS","handleOuterPieEnter","get","then","res","titles","reduce","item","_ref","documents","forEach","_ref2","title","chartData","Object","keys","count","i","push","className","children","width","height","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","nameKey","cx","cy","outerRadius","fill","label","onClick","map","entry","index","length","post","content","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app/src/Components/SubComponents/India.js"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\r\n\r\nconst India = () => {\r\n    const [data, setMyData] = useState([])\r\n    const [selectedOuterData, setSelectedOuterData] = useState(null)\r\n    const COLORS = [\"#FF6384\",\"#36A2EB\",\"#FFCE56\",\"#1abc9c\",\"#3498db\",\"#9b59b6\",\"#34495e\",\"#f1c40f\",\"#e74c3c\",\"#95a5a6\",\"#2ecc71\",\"#8e44ad\",\"#d35400\",\"#7f8c8d\",\"#27ae60\"];\r\n\r\n    const handleOuterPieEnter = (data) => {\r\n        setSelectedOuterData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n      axios.get('./india-cluster.json')\r\n        .then((res) => setMyData(res.data)\r\n      )\r\n    }, [0]);\r\n\r\n    const titles = data.reduce((item, { documents }) => {\r\n        documents.forEach(({ title }) => {\r\n          if (item[title]) {\r\n            item[title]++;  //title already exists, increment it's count by 1\r\n          } else {\r\n            item[title] = 1;  //title does not exist, add it to the object(item) with count 1\r\n          }\r\n        });\r\n        return item;\r\n      }, {});\r\n\r\n    const chartData = [];\r\n        Object.keys(titles).forEach(title => {\r\n            const count = titles[title];\r\n\r\n            for(let i=0;i<count;i++){\r\n                chartData.push({ title, count });\r\n            }\r\n    });\r\n\r\n    return (\r\n        <div className=\"clusters\">\r\n            <div className=\"displayPieChart\">\r\n                <div className=\"piechart-content\">\r\n                    <PieChart width={400} height={400}>\r\n                        <Legend />\r\n                        <Pie\r\n                            data={chartData}\r\n                            dataKey=\"count\"\r\n                            nameKey=\"title\"\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            outerRadius={80}\r\n                            fill=\"#8884d8\"\r\n                            label\r\n                            onClick={handleOuterPieEnter}\r\n                        >\r\n                            {\r\n                                chartData.map((entry, index) => (\r\n                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                                ))\r\n                            }\r\n                        </Pie>\r\n                    </PieChart>\r\n                </div>\r\n\r\n                {selectedOuterData && (\r\n                    <div className=\"piechart-content\">\r\n                        <h2>{selectedOuterData.title}</h2>\r\n                        \r\n                        <div>\r\n                            {data.map((post) => {\r\n                                let { documents} = post\r\n\r\n                                for(let i=0;i<documents.length;i++){\r\n                                    let title = documents[i].title\r\n\r\n                                    if(title === selectedOuterData.title){\r\n                                        return (\r\n                                            <div>\r\n                                                <p key={i}>{documents[i].content}</p>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                }\r\n                            })}\r\n                        </div> \r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>  \r\n    );\r\n};\r\n\r\nexport default India;\r\n\r\n\r\n\r\n/*\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst India = () => {\r\n  const [data, setMyData] = useState([])\r\n\r\n  useEffect(() => {\r\n    axios.get('./india-clusters.json')\r\n      .then((res) => setMyData(res.data)\r\n    )\r\n  }, [0]);\r\n\r\n  const titles = data.flatMap((category) =>\r\n    category.documents.map((document) => document.title)\r\n  );\r\n\r\n  const titleCounts = titles.reduce((counts, title) => {\r\n    counts[title] = (counts[title] || 0) + 1;\r\n    return counts;\r\n  }, {});\r\n\r\n  const chartData = {\r\n    labels: Object.keys(titleCounts),\r\n    datasets: [\r\n      {\r\n        label: \"Titles\",\r\n        data: Object.values(titleCounts),\r\n        backgroundColor: [\r\n            \"#FF6384\",\r\n            \"#36A2EB\",\r\n            \"#FFCE56\",\r\n            \"#1abc9c\",\r\n            \"#3498db\",\r\n            \"#9b59b6\",\r\n            \"#34495e\",\r\n            \"#f1c40f\",\r\n            \"#e74c3c\",\r\n            \"#95a5a6\",\r\n            \"#2ecc71\",\r\n            \"#8e44ad\",\r\n            \"#d35400\",\r\n            \"#7f8c8d\",\r\n            \"#27ae60\"\r\n          ]   \r\n      }\r\n    ]\r\n  };\r\n\r\n  return <Pie data={chartData} />;\r\n};\r\n\r\nexport default India\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}