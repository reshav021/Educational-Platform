{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app-copy\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\VideoDetails.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ProgressBar from \"./Progressbar/ProgressBar\";\nimport DisplayVideo from \"./DisplayVideo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VideoDetails() {\n  _s();\n  const [myData, setMyData] = useState([]);\n  const [searchKeyword, setSearchKeyword] = useState(0);\n  const [instance, setInstance] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const videoRef = useRef(null);\n  const removeDuplicateKeywords = () => {\n    const list = [];\n    const set = new Set();\n    return {\n      push(element) {\n        if (!set.has(element)) {\n          list.push(element);\n          set.add(element);\n        }\n      },\n      get() {\n        return list;\n      }\n    };\n  };\n  let allKeywords = removeDuplicateKeywords();\n  let localtitle = localStorage.getItem(\"title\");\n  let videoFileName = localStorage.getItem(\"videoFileName\");\n  let temp = \"\";\n  const handleSeekTo = time => {\n    if (videoRef.current) {\n      videoRef.current.currentTime = time;\n    }\n  };\n  useEffect(() => {\n    axios.get(\"./india.json\").then(res => setMyData(res.data));\n  }, []);\n  const toSeconds = time => {\n    let seconds = time.split(\":\");\n    let hr = parseInt(seconds[0], 10);\n    let min = parseInt(seconds[1], 10);\n    let sec = parseInt(seconds[2], 10);\n    seconds = hr * 3600 + min * 60 + sec;\n    return seconds;\n  };\n  const myDiv = document.createElement(\"div\");\n  myDiv.className = \"keywordContainer\";\n  const displayTimeStamp = (searchKeyword, orginaltimeStamp, imgSrc) => {\n    myDiv.innerHTML = \"\";\n    const timeStamp = new Set(orginaltimeStamp);\n    if (temp !== searchKeyword) {\n      const btn = document.getElementById(\"videoDetails-searchBtn\");\n      btn.addEventListener(\"click\", function handleClick() {\n        myDiv.replaceChildren();\n        myDiv.style.border = \"none\";\n      });\n      myDiv.replaceChildren();\n      //myDiv.style.border = \"2px solid black\"\n    }\n\n    for (let startTime of timeStamp.values()) {\n      let originalTime = startTime;\n      startTime = toSeconds(startTime);\n      const photoDiv = document.createElement(\"div\");\n      photoDiv.className = \"photodiv-container\";\n      photoDiv.onclick = handleSeekTo.bind(this, startTime);\n      let img = document.createElement(\"img\");\n      img.className = \"keywordImage\";\n      let imgHover = document.createElement(\"img\");\n      //imgHover.src = \"image.png\";\n      imgHover.className = \"imgHoverEffect\";\n      img.src = \"rbi/\" + imgSrc;\n      imgHover.src = imgSrc;\n      photoDiv.appendChild(img);\n      //photoDiv.appendChild(imgHover);\n\n      const myButton = document.createElement(\"button\");\n      myButton.innerHTML = originalTime;\n      myButton.id = \"seekToBtn\";\n      myButton.onclick = handleSeekTo.bind(this, startTime);\n      photoDiv.append(myButton);\n      myDiv.append(photoDiv);\n      photoDiv.addEventListener(\"mouseover\", () => {\n        imgHover.style.display = \"block\";\n        imgHover.style.left = photoDiv.offsetLeft + \"px\";\n        imgHover.style.bottom = photoDiv.offsetTop + \"px\";\n        //imgHover.style.bottom = (photoDiv.offsetTop + photoDiv.offsetHeight) + 'px';\n        //imgHover.style.bottom = (window.innerHeight - photoDiv.offsetTop) + 'px';\n      });\n\n      photoDiv.addEventListener(\"mouseout\", () => {\n        imgHover.style.display = \"none\";\n      });\n    }\n    document.body.append(myDiv);\n  };\n  const handleSearch = () => {\n    let selectedkeyword = document.getElementById(\"inputVal\").value;\n    selectedkeyword = selectedkeyword.toUpperCase();\n    if (selectedkeyword === \"Default\") selectedkeyword = \"\";\n    setSearchKeyword(selectedkeyword);\n  };\n  const chunks = [];\n  const handleTimeUpdate = newTime => {\n    videoRef.current.currentTime = newTime;\n    setCurrentTime(newTime);\n  };\n  const handleDurationChange = () => {\n    setDuration(videoRef.current.duration);\n  };\n  const handleFullScreen = () => {\n    if (videoRef.current) {\n      videoRef.current.requestFullscreen();\n    }\n  };\n  const [showProgressBarOnFullScreen, setFullScreen] = useState(false);\n  const toggleFullScreen = async () => {\n    setFullScreen(true);\n    const container = document.getElementById(\"video-chat-container\");\n    const fullscreenApi = container.requestFullscreen || container.webkitRequestFullScreen || container.mozRequestFullScreen || container.msRequestFullscreen;\n    if (!document.fullscreenElement) {\n      fullscreenApi.call(container);\n    } else {\n      document.exitFullscreen();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"videoDetails\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videoDetails-data\",\n      children: myData.map(post => {\n        let {\n          title,\n          faculty,\n          domain,\n          keyframes_text,\n          chapters_list,\n          image_metadata,\n          keyframes_timestamp\n        } = post;\n        title = title.toUpperCase();\n        faculty = faculty.toUpperCase();\n        domain = domain.toUpperCase();\n        localtitle = localtitle.toUpperCase();\n        if (title === localtitle) {\n          let len = Object.keys(chapters_list).length;\n          let timeStamp = [];\n          let imgSrc;\n          for (let i = 1; i <= len; i++) {\n            let obj = chapters_list[i];\n            let startTime = obj[0];\n            let keywords = obj[1];\n            let imageData = image_metadata[i];\n            let imagePath = imageData[0];\n            if (keywords === searchKeyword) {\n              imgSrc = imagePath;\n            }\n            allKeywords.push(keywords);\n            keywords = keywords.toUpperCase();\n            let obj2 = keyframes_text[i];\n            let endTime = obj2[1];\n            let startTimeSeconds = toSeconds(startTime);\n            let endTimeSeconds = toSeconds(endTime);\n            const colors = [\"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#800000\", \"#FFA500\", \"#FFFFF0\"];\n            const newChunk = {\n              start: startTimeSeconds,\n              end: endTimeSeconds - 1,\n              //color: colors[Math.floor(Math.random() * colors.length)],\n              color: \"gray\",\n              topic: keywords\n            };\n            chunks.push(newChunk);\n            //console.log(chunks)\n\n            if (searchKeyword === \"\") return;\n            if (keywords.includes(searchKeyword)) timeStamp.push(startTime);\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: displayTimeStamp(searchKeyword, timeStamp, imgSrc)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videoDetails-video\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"p-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"row\",\n          id: \"video-chat-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"col-7 col-md-9 mb-lg-0 mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"position-relative\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"\",\n                children: /*#__PURE__*/_jsxDEV(\"video\", {\n                  ref: videoRef,\n                  src: videoFileName,\n                  onTimeUpdate: () => setCurrentTime(videoRef.current.currentTime),\n                  onDurationChange: handleDurationChange,\n                  height: 200,\n                  controls: true,\n                  id: \"video-player\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"top-overlay\",\n                class: \"w-100 p-2 d-flex align-items-center justify-content-between\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    id: \"fullscreen-toggle-btn\",\n                    role: \"button\",\n                    class: \"bi bi-fullscreen text-white text-outline\",\n                    onClick: toggleFullScreen,\n                    children: showProgressBarOnFullScreen && /*#__PURE__*/_jsxDEV(ProgressBar, {\n                      className: \"progressBar\",\n                      currentTime: currentTime,\n                      duration: duration,\n                      onTimeUpdate: handleTimeUpdate,\n                      chunks: chunks\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 279,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"bottom-overlay\",\n                class: \"w-100 p-2 d-flex align-items-center justify-content-between\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  id: \"fullscreen-toggle-btn\",\n                  role: \"button\",\n                  class: \"bi bi-fullscreen text-white text-outline\",\n                  onClick: toggleFullScreen,\n                  children: \"Bottom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videoDetails-btn\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keywords-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"inputVal\",\n          list: \"select-keyword\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n          id: \"select-keyword\",\n          placeholder: \"Pick a keyword\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            id: \"option-keyword\",\n            value: \"\",\n            children: \"Select a keyword\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), allKeywords.get().sort().map((option, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              children: [\" \", option, \" \"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"videoDetails-searchBtn\",\n          id: \"videoDetails-searchBtn\",\n          onClick: handleSearch,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoDetails, \"bvOy8PQONOmhGQ4B3BwC8ICSQAk=\");\n_c = VideoDetails;\nexport default VideoDetails;\n\n/*\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect, useRef} from \"react\";\r\nimport ProgressBar from \"./Progressbar/ProgressBar\";\r\nimport DisplayVideo from \"./DisplayVideo\";\r\n\r\nfunction VideoDetails() {\r\n  const [myData, setMyData] = useState([])\r\n  const [searchKeyword, setSearchKeyword] = useState(0);\r\n  const [instance, setInstance] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const videoRef = useRef(null);\r\n\r\n  const removeDuplicateKeywords = () => {\r\n    const list = [];\r\n    const set = new Set();\r\n  \r\n    return {\r\n      push(element) {\r\n        if (!set.has(element)) {\r\n          list.push(element);\r\n          set.add(element);\r\n        }\r\n      },\r\n      get() {\r\n        return list;\r\n      }\r\n    };\r\n  }\r\n\r\n  let allKeywords = removeDuplicateKeywords();\r\n  let localtitle = localStorage.getItem('title')\r\n  let videoFileName = localStorage.getItem('videoFileName')\r\n  let temp=''\r\n\r\n  const handleSeekTo = (time) => {\r\n    if (videoRef.current) {\r\n      videoRef.current.currentTime = time;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('./india.json')\r\n      .then((res) => setMyData(res.data)\r\n    )\r\n  }, []);\r\n\r\n  const toSeconds = (time) => {\r\n    let seconds = time.split(':')\r\n\r\n    let hr = parseInt(seconds[0], 10);\r\n    let min = parseInt(seconds[1], 10);\r\n    let sec = parseInt(seconds[2], 10);\r\n    \r\n    seconds = (hr * 3600) + (min * 60) + sec;\r\n\r\n    return seconds\r\n  }\r\n  \r\n  const myDiv = document.createElement('div');\r\n  myDiv.className = 'keywordContainer'\r\n\r\n  const displayTimeStamp = (searchKeyword,orginaltimeStamp,imgSrc) => {\r\n    myDiv.innerHTML = ''\r\n    const timeStamp = new Set(orginaltimeStamp);\r\n\r\n    if(temp !== searchKeyword){\r\n      const btn = document.getElementById('videoDetails-searchBtn');\r\n      btn.addEventListener('click', function handleClick() {\r\n        myDiv.replaceChildren();\r\n        myDiv.style.border = 'none'\r\n      });\r\n      myDiv.replaceChildren();\r\n      //myDiv.style.border = \"2px solid black\"\r\n    }\r\n    \r\n    for(let startTime of timeStamp.values()){\r\n      let originalTime = startTime\r\n      startTime = toSeconds(startTime)\r\n\r\n      const photoDiv = document.createElement('div');\r\n      photoDiv.className = 'photodiv-container';\r\n      photoDiv.onclick = handleSeekTo.bind(this,startTime);\r\n      \r\n      let img = document.createElement(\"img\");\r\n      img.className = 'keywordImage'\r\n      \r\n      let imgHover = document.createElement(\"img\");\r\n      //imgHover.src = \"image.png\";\r\n      imgHover.className = 'imgHoverEffect'\r\n\r\n\r\n      img.src = 'rbi/'+imgSrc;\r\n      imgHover.src = imgSrc;\r\n\r\n      photoDiv.appendChild(img);\r\n      //photoDiv.appendChild(imgHover);\r\n\r\n      const myButton = document.createElement('button');\r\n      myButton.innerHTML = originalTime;\r\n      myButton.id = 'seekToBtn';\r\n      myButton.onclick = handleSeekTo.bind(this,startTime);\r\n\r\n      photoDiv.append(myButton);\r\n      myDiv.append(photoDiv);\r\n      \r\n      photoDiv.addEventListener('mouseover', () => {\r\n        imgHover.style.display = 'block';\r\n        imgHover.style.left = photoDiv.offsetLeft + 'px';\r\n        imgHover.style.bottom = (photoDiv.offsetTop) + 'px';\r\n        //imgHover.style.bottom = (photoDiv.offsetTop + photoDiv.offsetHeight) + 'px';\r\n        //imgHover.style.bottom = (window.innerHeight - photoDiv.offsetTop) + 'px';\r\n      });\r\n      \r\n      photoDiv.addEventListener('mouseout', () => {\r\n        imgHover.style.display = 'none';\r\n      });\r\n    }\r\n        \r\n    document.body.append(myDiv);  \r\n  }\r\n\r\n  const handleSearch = () => {\r\n    let selectedkeyword = document.getElementById('inputVal').value\r\n    \r\n    selectedkeyword = selectedkeyword.toUpperCase()\r\n\r\n    if(selectedkeyword === \"Default\")\r\n        selectedkeyword = ''\r\n    setSearchKeyword(selectedkeyword)\r\n  }\r\n\r\n  const chunks = [];\r\n\r\n  const handleTimeUpdate = (newTime) => {\r\n    videoRef.current.currentTime = newTime;\r\n    setCurrentTime(newTime);\r\n  };\r\n\r\n  const handleDurationChange = () => {\r\n    setDuration(videoRef.current.duration);\r\n  };\r\n\r\n  const handleFullScreen = () => {\r\n    if(videoRef.current) {\r\n      videoRef.current.requestFullscreen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"videoDetails\">  \r\n      <div className=\"videoDetails-data\">\r\n        {\r\n          myData.map((post) => {\r\n            let { title, faculty, domain, keyframes_text, chapters_list, image_metadata,keyframes_timestamp } = post\r\n\r\n            title = title.toUpperCase()\r\n            faculty = faculty.toUpperCase()\r\n            domain = domain.toUpperCase()\r\n            localtitle = localtitle.toUpperCase()\r\n\r\n            if((title === localtitle)){\r\n              let len = Object.keys(chapters_list).length\r\n              let timeStamp = [];\r\n              let imgSrc;\r\n\r\n              for(let i=1;i<=len;i++){\r\n                let obj = chapters_list[i]\r\n                let startTime = obj[0]\r\n                let keywords = obj[1]\r\n\r\n                let imageData = image_metadata[i]\r\n                let imagePath = imageData[0]\r\n                \r\n                if(keywords === searchKeyword){\r\n                  imgSrc = imagePath\r\n                }\r\n\r\n                allKeywords.push(keywords)\r\n                keywords = keywords.toUpperCase()\r\n                \r\n                let obj2 = keyframes_text[i]\r\n                let endTime = obj2[1]\r\n                let startTimeSeconds = toSeconds(startTime)\r\n                let endTimeSeconds = toSeconds(endTime)\r\n\r\n                const colors = [ \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#800000\", \"#FFA500\", \"#FFFFF0\" ];\r\n\r\n                const newChunk = {\r\n                  start: startTimeSeconds,\r\n                  end: endTimeSeconds-1,\r\n                  //color: colors[Math.floor(Math.random() * colors.length)],\r\n                  color: \"gray\",\r\n                  topic: keywords\r\n                };\r\n                chunks.push(newChunk);\r\n                //console.log(chunks)\r\n                \r\n                if(searchKeyword === '')\r\n                  return\r\n                if(keywords.includes(searchKeyword))\r\n                  timeStamp.push(startTime)\r\n              }\r\n              \r\n              return (<div>{displayTimeStamp(searchKeyword,timeStamp,imgSrc)}</div>)\r\n            }\r\n          })\r\n        }\r\n      </div>\r\n\r\n      <div className=\"videoDetails-video\">\r\n        <video\r\n          ref={videoRef}\r\n          src={videoFileName}\r\n          onTimeUpdate={() => setCurrentTime(videoRef.current.currentTime)}\r\n          onDurationChange={handleDurationChange}\r\n          height={360}\r\n          controls\r\n          \r\n        />\r\n\r\n        <DisplayVideo videoFileName={videoFileName} chunks={chunks} currentTime={currentTime} duration={duration}/>\r\n\r\n        <button id='fullScreen' onClick={handleFullScreen}>FullScreen</button>\r\n        \r\n        <ProgressBar\r\n          className=\"progressBar\"\r\n          currentTime={currentTime}\r\n          duration={duration}\r\n          onTimeUpdate={handleTimeUpdate}\r\n          chunks={chunks}\r\n        />\r\n      </div> \r\n\r\n      <div className=\"videoDetails-btn\">\r\n        <div className=\"keywords-container\">\r\n          <input id='inputVal' list=\"select-keyword\"/>\r\n\r\n          <datalist id='select-keyword' placeholder=\"Pick a keyword\">\r\n            <option id='option-keyword' value=\"\">Select a keyword</option>\r\n              { \r\n                allKeywords.get().sort().map((option, index) => {\r\n                  return <option key={index} > {option} </option>\r\n                })\r\n              }\r\n          </datalist >\r\n\r\n          <button className=\"videoDetails-searchBtn\" id=\"videoDetails-searchBtn\" onClick={handleSearch}>Search</button>\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoDetails;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"VideoDetails\");","map":{"version":3,"names":["axios","React","useState","useEffect","useRef","ProgressBar","DisplayVideo","jsxDEV","_jsxDEV","VideoDetails","_s","myData","setMyData","searchKeyword","setSearchKeyword","instance","setInstance","currentTime","setCurrentTime","duration","setDuration","videoRef","removeDuplicateKeywords","list","set","Set","push","element","has","add","get","allKeywords","localtitle","localStorage","getItem","videoFileName","temp","handleSeekTo","time","current","then","res","data","toSeconds","seconds","split","hr","parseInt","min","sec","myDiv","document","createElement","className","displayTimeStamp","orginaltimeStamp","imgSrc","innerHTML","timeStamp","btn","getElementById","addEventListener","handleClick","replaceChildren","style","border","startTime","values","originalTime","photoDiv","onclick","bind","img","imgHover","src","appendChild","myButton","id","append","display","left","offsetLeft","bottom","offsetTop","body","handleSearch","selectedkeyword","value","toUpperCase","chunks","handleTimeUpdate","newTime","handleDurationChange","handleFullScreen","requestFullscreen","showProgressBarOnFullScreen","setFullScreen","toggleFullScreen","container","fullscreenApi","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen","fullscreenElement","call","exitFullscreen","children","map","post","title","faculty","domain","keyframes_text","chapters_list","image_metadata","keyframes_timestamp","len","Object","keys","length","i","obj","keywords","imageData","imagePath","obj2","endTime","startTimeSeconds","endTimeSeconds","colors","newChunk","start","end","color","topic","includes","fileName","_jsxFileName","lineNumber","columnNumber","class","ref","onTimeUpdate","onDurationChange","height","controls","role","onClick","placeholder","sort","option","index","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app-copy/my-app/src/Components/SubComponents/VideoDetails.js"],"sourcesContent":["import axios from \"axios\"\r\nimport React, { useState, useEffect, useRef } from \"react\"\r\nimport ProgressBar from \"./Progressbar/ProgressBar\"\r\nimport DisplayVideo from \"./DisplayVideo\"\r\n\r\nfunction VideoDetails() {\r\n  const [myData, setMyData] = useState([])\r\n  const [searchKeyword, setSearchKeyword] = useState(0)\r\n  const [instance, setInstance] = useState(0)\r\n  const [currentTime, setCurrentTime] = useState(0)\r\n  const [duration, setDuration] = useState(0)\r\n  const videoRef = useRef(null)\r\n\r\n  const removeDuplicateKeywords = () => {\r\n    const list = []\r\n    const set = new Set()\r\n\r\n    return {\r\n      push(element) {\r\n        if (!set.has(element)) {\r\n          list.push(element)\r\n          set.add(element)\r\n        }\r\n      },\r\n      get() {\r\n        return list\r\n      },\r\n    }\r\n  }\r\n\r\n  let allKeywords = removeDuplicateKeywords()\r\n  let localtitle = localStorage.getItem(\"title\")\r\n  let videoFileName = localStorage.getItem(\"videoFileName\")\r\n  let temp = \"\"\r\n\r\n  const handleSeekTo = (time) => {\r\n    if (videoRef.current) {\r\n      videoRef.current.currentTime = time\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios.get(\"./india.json\").then((res) => setMyData(res.data))\r\n  }, [])\r\n\r\n  const toSeconds = (time) => {\r\n    let seconds = time.split(\":\")\r\n\r\n    let hr = parseInt(seconds[0], 10)\r\n    let min = parseInt(seconds[1], 10)\r\n    let sec = parseInt(seconds[2], 10)\r\n\r\n    seconds = hr * 3600 + min * 60 + sec\r\n\r\n    return seconds\r\n  }\r\n\r\n  const myDiv = document.createElement(\"div\")\r\n  myDiv.className = \"keywordContainer\"\r\n\r\n  const displayTimeStamp = (searchKeyword, orginaltimeStamp, imgSrc) => {\r\n    myDiv.innerHTML = \"\"\r\n    const timeStamp = new Set(orginaltimeStamp)\r\n\r\n    if (temp !== searchKeyword) {\r\n      const btn = document.getElementById(\"videoDetails-searchBtn\")\r\n      btn.addEventListener(\"click\", function handleClick() {\r\n        myDiv.replaceChildren()\r\n        myDiv.style.border = \"none\"\r\n      })\r\n      myDiv.replaceChildren()\r\n      //myDiv.style.border = \"2px solid black\"\r\n    }\r\n\r\n    for (let startTime of timeStamp.values()) {\r\n      let originalTime = startTime\r\n      startTime = toSeconds(startTime)\r\n\r\n      const photoDiv = document.createElement(\"div\")\r\n      photoDiv.className = \"photodiv-container\"\r\n      photoDiv.onclick = handleSeekTo.bind(this, startTime)\r\n\r\n      let img = document.createElement(\"img\")\r\n      img.className = \"keywordImage\"\r\n\r\n      let imgHover = document.createElement(\"img\")\r\n      //imgHover.src = \"image.png\";\r\n      imgHover.className = \"imgHoverEffect\"\r\n\r\n      img.src = \"rbi/\" + imgSrc\r\n      imgHover.src = imgSrc\r\n\r\n      photoDiv.appendChild(img)\r\n      //photoDiv.appendChild(imgHover);\r\n\r\n      const myButton = document.createElement(\"button\")\r\n      myButton.innerHTML = originalTime\r\n      myButton.id = \"seekToBtn\"\r\n      myButton.onclick = handleSeekTo.bind(this, startTime)\r\n\r\n      photoDiv.append(myButton)\r\n      myDiv.append(photoDiv)\r\n\r\n      photoDiv.addEventListener(\"mouseover\", () => {\r\n        imgHover.style.display = \"block\"\r\n        imgHover.style.left = photoDiv.offsetLeft + \"px\"\r\n        imgHover.style.bottom = photoDiv.offsetTop + \"px\"\r\n        //imgHover.style.bottom = (photoDiv.offsetTop + photoDiv.offsetHeight) + 'px';\r\n        //imgHover.style.bottom = (window.innerHeight - photoDiv.offsetTop) + 'px';\r\n      })\r\n\r\n      photoDiv.addEventListener(\"mouseout\", () => {\r\n        imgHover.style.display = \"none\"\r\n      })\r\n    }\r\n\r\n    document.body.append(myDiv)\r\n  }\r\n\r\n  const handleSearch = () => {\r\n    let selectedkeyword = document.getElementById(\"inputVal\").value\r\n\r\n    selectedkeyword = selectedkeyword.toUpperCase()\r\n\r\n    if (selectedkeyword === \"Default\") selectedkeyword = \"\"\r\n    setSearchKeyword(selectedkeyword)\r\n  }\r\n\r\n  const chunks = []\r\n\r\n  const handleTimeUpdate = (newTime) => {\r\n    videoRef.current.currentTime = newTime\r\n    setCurrentTime(newTime)\r\n  }\r\n\r\n  const handleDurationChange = () => {\r\n    setDuration(videoRef.current.duration)\r\n  }\r\n\r\n  const handleFullScreen = () => {\r\n    if (videoRef.current) {\r\n      videoRef.current.requestFullscreen()\r\n    }\r\n  }\r\n\r\n  const [showProgressBarOnFullScreen, setFullScreen] = useState(false)\r\n  const toggleFullScreen = async () => {\r\n    setFullScreen(true)\r\n    const container = document.getElementById(\"video-chat-container\")\r\n    const fullscreenApi =\r\n      container.requestFullscreen ||\r\n      container.webkitRequestFullScreen ||\r\n      container.mozRequestFullScreen ||\r\n      container.msRequestFullscreen\r\n\r\n      if(!document.fullscreenElement) {\r\n        \r\n        fullscreenApi.call(container)\r\n      } else {\r\n        \r\n        document.exitFullscreen()\r\n      }\r\n  }\r\n\r\n  return (\r\n    <div className=\"videoDetails\">\r\n      <div className=\"videoDetails-data\">\r\n        {myData.map((post) => {\r\n          let {\r\n            title,\r\n            faculty,\r\n            domain,\r\n            keyframes_text,\r\n            chapters_list,\r\n            image_metadata,\r\n            keyframes_timestamp,\r\n          } = post\r\n\r\n          title = title.toUpperCase()\r\n          faculty = faculty.toUpperCase()\r\n          domain = domain.toUpperCase()\r\n          localtitle = localtitle.toUpperCase()\r\n\r\n          if (title === localtitle) {\r\n            let len = Object.keys(chapters_list).length\r\n            let timeStamp = []\r\n            let imgSrc\r\n\r\n            for (let i = 1; i <= len; i++) {\r\n              let obj = chapters_list[i]\r\n              let startTime = obj[0]\r\n              let keywords = obj[1]\r\n\r\n              let imageData = image_metadata[i]\r\n              let imagePath = imageData[0]\r\n\r\n              if (keywords === searchKeyword) {\r\n                imgSrc = imagePath\r\n              }\r\n\r\n              allKeywords.push(keywords)\r\n              keywords = keywords.toUpperCase()\r\n\r\n              let obj2 = keyframes_text[i]\r\n              let endTime = obj2[1]\r\n              let startTimeSeconds = toSeconds(startTime)\r\n              let endTimeSeconds = toSeconds(endTime)\r\n\r\n              const colors = [\r\n                \"#FF0000\",\r\n                \"#00FF00\",\r\n                \"#0000FF\",\r\n                \"#FFFF00\",\r\n                \"#FF00FF\",\r\n                \"#00FFFF\",\r\n                \"#800000\",\r\n                \"#008000\",\r\n                \"#000080\",\r\n                \"#808000\",\r\n                \"#800080\",\r\n                \"#008080\",\r\n                \"#C0C0C0\",\r\n                \"#800000\",\r\n                \"#FFA500\",\r\n                \"#FFFFF0\",\r\n              ]\r\n\r\n              const newChunk = {\r\n                start: startTimeSeconds,\r\n                end: endTimeSeconds - 1,\r\n                //color: colors[Math.floor(Math.random() * colors.length)],\r\n                color: \"gray\",\r\n                topic: keywords,\r\n              }\r\n              chunks.push(newChunk)\r\n              //console.log(chunks)\r\n\r\n              if (searchKeyword === \"\") return\r\n              if (keywords.includes(searchKeyword)) timeStamp.push(startTime)\r\n            }\r\n\r\n            return (\r\n              <div>{displayTimeStamp(searchKeyword, timeStamp, imgSrc)}</div>\r\n            )\r\n          }\r\n        })}\r\n      </div>\r\n\r\n      <div className=\"videoDetails-video\">\r\n        <div class=\"p-3\">\r\n          <div class=\"row\" id=\"video-chat-container\">\r\n            <div class=\"col-7 col-md-9 mb-lg-0 mb-3\">\r\n              <div class=\"position-relative\">\r\n                <div class=\"\">\r\n                  <video\r\n                    ref={videoRef}\r\n                    src={videoFileName}\r\n                    onTimeUpdate={() =>\r\n                      setCurrentTime(videoRef.current.currentTime)\r\n                    }\r\n                    onDurationChange={handleDurationChange}\r\n                    height={200}\r\n                    controls\r\n                    id=\"video-player\"\r\n                  />\r\n                </div>\r\n                <div\r\n                  id=\"top-overlay\"\r\n                  class=\"w-100 p-2 d-flex align-items-center justify-content-between\"\r\n                >\r\n                  <div>\r\n                    <i\r\n                      id=\"fullscreen-toggle-btn\"\r\n                      role=\"button\"\r\n                      class=\"bi bi-fullscreen text-white text-outline\"\r\n                      onClick={toggleFullScreen}\r\n                    >\r\n                      {showProgressBarOnFullScreen && (\r\n                        <ProgressBar\r\n                          className=\"progressBar\"\r\n                          currentTime={currentTime}\r\n                          duration={duration}\r\n                          onTimeUpdate={handleTimeUpdate}\r\n                          chunks={chunks}\r\n                        />\r\n                      )}\r\n                    </i>\r\n                  </div>\r\n                </div>\r\n\r\n                <div\r\n                  id=\"bottom-overlay\"\r\n                  class=\"w-100 p-2 d-flex align-items-center justify-content-between\"\r\n                >\r\n                  <i\r\n                    id=\"fullscreen-toggle-btn\"\r\n                    role=\"button\"\r\n                    class=\"bi bi-fullscreen text-white text-outline\"\r\n                    onClick={toggleFullScreen}\r\n                  >\r\n                    Bottom\r\n                  </i>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        \r\n      </div>\r\n\r\n      <div className=\"videoDetails-btn\">\r\n        <div className=\"keywords-container\">\r\n          <input id=\"inputVal\" list=\"select-keyword\" />\r\n\r\n          <datalist id=\"select-keyword\" placeholder=\"Pick a keyword\">\r\n            <option id=\"option-keyword\" value=\"\">\r\n              Select a keyword\r\n            </option>\r\n            {allKeywords\r\n              .get()\r\n              .sort()\r\n              .map((option, index) => {\r\n                return <option key={index}> {option} </option>\r\n              })}\r\n          </datalist>\r\n\r\n          <button\r\n            className=\"videoDetails-searchBtn\"\r\n            id=\"videoDetails-searchBtn\"\r\n            onClick={handleSearch}\r\n          >\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoDetails\r\n\r\n/*\r\nimport axios from \"axios\";\r\nimport React, { useState, useEffect, useRef} from \"react\";\r\nimport ProgressBar from \"./Progressbar/ProgressBar\";\r\nimport DisplayVideo from \"./DisplayVideo\";\r\n\r\nfunction VideoDetails() {\r\n  const [myData, setMyData] = useState([])\r\n  const [searchKeyword, setSearchKeyword] = useState(0);\r\n  const [instance, setInstance] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const videoRef = useRef(null);\r\n\r\n  const removeDuplicateKeywords = () => {\r\n    const list = [];\r\n    const set = new Set();\r\n  \r\n    return {\r\n      push(element) {\r\n        if (!set.has(element)) {\r\n          list.push(element);\r\n          set.add(element);\r\n        }\r\n      },\r\n      get() {\r\n        return list;\r\n      }\r\n    };\r\n  }\r\n\r\n  let allKeywords = removeDuplicateKeywords();\r\n  let localtitle = localStorage.getItem('title')\r\n  let videoFileName = localStorage.getItem('videoFileName')\r\n  let temp=''\r\n\r\n  const handleSeekTo = (time) => {\r\n    if (videoRef.current) {\r\n      videoRef.current.currentTime = time;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('./india.json')\r\n      .then((res) => setMyData(res.data)\r\n    )\r\n  }, []);\r\n\r\n  const toSeconds = (time) => {\r\n    let seconds = time.split(':')\r\n\r\n    let hr = parseInt(seconds[0], 10);\r\n    let min = parseInt(seconds[1], 10);\r\n    let sec = parseInt(seconds[2], 10);\r\n    \r\n    seconds = (hr * 3600) + (min * 60) + sec;\r\n\r\n    return seconds\r\n  }\r\n  \r\n  const myDiv = document.createElement('div');\r\n  myDiv.className = 'keywordContainer'\r\n\r\n  const displayTimeStamp = (searchKeyword,orginaltimeStamp,imgSrc) => {\r\n    myDiv.innerHTML = ''\r\n    const timeStamp = new Set(orginaltimeStamp);\r\n\r\n    if(temp !== searchKeyword){\r\n      const btn = document.getElementById('videoDetails-searchBtn');\r\n      btn.addEventListener('click', function handleClick() {\r\n        myDiv.replaceChildren();\r\n        myDiv.style.border = 'none'\r\n      });\r\n      myDiv.replaceChildren();\r\n      //myDiv.style.border = \"2px solid black\"\r\n    }\r\n    \r\n    for(let startTime of timeStamp.values()){\r\n      let originalTime = startTime\r\n      startTime = toSeconds(startTime)\r\n\r\n      const photoDiv = document.createElement('div');\r\n      photoDiv.className = 'photodiv-container';\r\n      photoDiv.onclick = handleSeekTo.bind(this,startTime);\r\n      \r\n      let img = document.createElement(\"img\");\r\n      img.className = 'keywordImage'\r\n      \r\n      let imgHover = document.createElement(\"img\");\r\n      //imgHover.src = \"image.png\";\r\n      imgHover.className = 'imgHoverEffect'\r\n\r\n\r\n      img.src = 'rbi/'+imgSrc;\r\n      imgHover.src = imgSrc;\r\n\r\n      photoDiv.appendChild(img);\r\n      //photoDiv.appendChild(imgHover);\r\n\r\n      const myButton = document.createElement('button');\r\n      myButton.innerHTML = originalTime;\r\n      myButton.id = 'seekToBtn';\r\n      myButton.onclick = handleSeekTo.bind(this,startTime);\r\n\r\n      photoDiv.append(myButton);\r\n      myDiv.append(photoDiv);\r\n      \r\n      photoDiv.addEventListener('mouseover', () => {\r\n        imgHover.style.display = 'block';\r\n        imgHover.style.left = photoDiv.offsetLeft + 'px';\r\n        imgHover.style.bottom = (photoDiv.offsetTop) + 'px';\r\n        //imgHover.style.bottom = (photoDiv.offsetTop + photoDiv.offsetHeight) + 'px';\r\n        //imgHover.style.bottom = (window.innerHeight - photoDiv.offsetTop) + 'px';\r\n      });\r\n      \r\n      photoDiv.addEventListener('mouseout', () => {\r\n        imgHover.style.display = 'none';\r\n      });\r\n    }\r\n        \r\n    document.body.append(myDiv);  \r\n  }\r\n\r\n  const handleSearch = () => {\r\n    let selectedkeyword = document.getElementById('inputVal').value\r\n    \r\n    selectedkeyword = selectedkeyword.toUpperCase()\r\n\r\n    if(selectedkeyword === \"Default\")\r\n        selectedkeyword = ''\r\n    setSearchKeyword(selectedkeyword)\r\n  }\r\n\r\n  const chunks = [];\r\n\r\n  const handleTimeUpdate = (newTime) => {\r\n    videoRef.current.currentTime = newTime;\r\n    setCurrentTime(newTime);\r\n  };\r\n\r\n  const handleDurationChange = () => {\r\n    setDuration(videoRef.current.duration);\r\n  };\r\n\r\n  const handleFullScreen = () => {\r\n    if(videoRef.current) {\r\n      videoRef.current.requestFullscreen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"videoDetails\">  \r\n      <div className=\"videoDetails-data\">\r\n        {\r\n          myData.map((post) => {\r\n            let { title, faculty, domain, keyframes_text, chapters_list, image_metadata,keyframes_timestamp } = post\r\n\r\n            title = title.toUpperCase()\r\n            faculty = faculty.toUpperCase()\r\n            domain = domain.toUpperCase()\r\n            localtitle = localtitle.toUpperCase()\r\n\r\n            if((title === localtitle)){\r\n              let len = Object.keys(chapters_list).length\r\n              let timeStamp = [];\r\n              let imgSrc;\r\n\r\n              for(let i=1;i<=len;i++){\r\n                let obj = chapters_list[i]\r\n                let startTime = obj[0]\r\n                let keywords = obj[1]\r\n\r\n                let imageData = image_metadata[i]\r\n                let imagePath = imageData[0]\r\n                \r\n                if(keywords === searchKeyword){\r\n                  imgSrc = imagePath\r\n                }\r\n\r\n                allKeywords.push(keywords)\r\n                keywords = keywords.toUpperCase()\r\n                \r\n                let obj2 = keyframes_text[i]\r\n                let endTime = obj2[1]\r\n                let startTimeSeconds = toSeconds(startTime)\r\n                let endTimeSeconds = toSeconds(endTime)\r\n\r\n                const colors = [ \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#800000\", \"#FFA500\", \"#FFFFF0\" ];\r\n\r\n                const newChunk = {\r\n                  start: startTimeSeconds,\r\n                  end: endTimeSeconds-1,\r\n                  //color: colors[Math.floor(Math.random() * colors.length)],\r\n                  color: \"gray\",\r\n                  topic: keywords\r\n                };\r\n                chunks.push(newChunk);\r\n                //console.log(chunks)\r\n                \r\n                if(searchKeyword === '')\r\n                  return\r\n                if(keywords.includes(searchKeyword))\r\n                  timeStamp.push(startTime)\r\n              }\r\n              \r\n              return (<div>{displayTimeStamp(searchKeyword,timeStamp,imgSrc)}</div>)\r\n            }\r\n          })\r\n        }\r\n      </div>\r\n\r\n      <div className=\"videoDetails-video\">\r\n        <video\r\n          ref={videoRef}\r\n          src={videoFileName}\r\n          onTimeUpdate={() => setCurrentTime(videoRef.current.currentTime)}\r\n          onDurationChange={handleDurationChange}\r\n          height={360}\r\n          controls\r\n          \r\n        />\r\n\r\n        <DisplayVideo videoFileName={videoFileName} chunks={chunks} currentTime={currentTime} duration={duration}/>\r\n\r\n        <button id='fullScreen' onClick={handleFullScreen}>FullScreen</button>\r\n        \r\n        <ProgressBar\r\n          className=\"progressBar\"\r\n          currentTime={currentTime}\r\n          duration={duration}\r\n          onTimeUpdate={handleTimeUpdate}\r\n          chunks={chunks}\r\n        />\r\n      </div> \r\n\r\n      <div className=\"videoDetails-btn\">\r\n        <div className=\"keywords-container\">\r\n          <input id='inputVal' list=\"select-keyword\"/>\r\n\r\n          <datalist id='select-keyword' placeholder=\"Pick a keyword\">\r\n            <option id='option-keyword' value=\"\">Select a keyword</option>\r\n              { \r\n                allKeywords.get().sort().map((option, index) => {\r\n                  return <option key={index} > {option} </option>\r\n                })\r\n              }\r\n          </datalist >\r\n\r\n          <button className=\"videoDetails-searchBtn\" id=\"videoDetails-searchBtn\" onClick={handleSearch}>Search</button>\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoDetails;\r\n*/\r\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhQA,IAAA+I,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}