{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\IndiaCluster.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { PieChart, Pie, Label, Tooltip, Cell } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndiaCluster = () => {\n  _s();\n  const [myData, setMyData] = useState([]);\n  const [selectedData, setSelectedData] = useState(null);\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF', '#F2F2F2'];\n  const handlePieEnter = data => {\n    setSelectedData(data);\n  };\n  useEffect(() => {\n    axios.get('./india-clusters.json').then(res => setMyData(res.data));\n  }, [0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clusters\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: myData.map(post => {\n        let {\n          labels,\n          documents\n        } = post;\n        labels = labels[0];\n        for (let i = 0; i < documents.length; i++) {\n          let title = documents[i].title;\n          let content = documents[i].content;\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"displayPieChart\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"piechart-content\",\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          width: 560,\n          height: 500,\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            data: myData,\n            dataKey: \"label_counts\",\n            nameKey: \"labels\",\n            outerRadius: 200,\n            innerRadius: 130,\n            labelLine: false,\n            cx: 280,\n            cy: 250,\n            animationDuration: 0,\n            label: entry => entry.labels\n            //onMouseEnter={handlePieEnter}\n            ,\n            onClick: handlePieEnter,\n            children: myData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: COLORS[index % COLORS.length],\n              children: /*#__PURE__*/_jsxDEV(Label, {\n                position: \"inside\",\n                content: _ref => {\n                  let {\n                    value\n                  } = _ref;\n                  return `${value} (${entry.labels})`;\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 37\n              }, this)\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), selectedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"piechart-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: selectedData.labels\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Topics: \", selectedData.label_counts]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedData.documents[0].title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: myData.map(post => {\n            let {\n              labels,\n              documents\n            } = post;\n            labels = labels[0];\n            labels = labels.toUpperCase();\n            if (selectedData.labels === labels) {\n              console.log(\"True\");\n              for (let i = 0; i < documents.length; i++) {\n                let title = documents[i].title;\n                let content = documents[i].content;\n                console.log(title);\n              }\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_s(IndiaCluster, \"eVN5Cq2a2FAOTu3t8bzD+AeFw6k=\");\n_c = IndiaCluster;\nexport default IndiaCluster;\n\n/*\r\nCorrect\r\n\r\n<div className=\"displayPieChart\">\r\n                <PieChart width={500} height={500}>\r\n                    <Pie data={myData} dataKey=\"label_counts\" nameKey=\"labels\" outerRadius={200} innerRadius={130} label>\r\n                        {myData.map((entry, index) => (\r\n                            <Label \r\n                                key={`label-${index}`} \r\n                                position=\"center\"\r\n                                fill=\"Black\" \r\n                                fontSize={30}\r\n                            > {entry.labels}\r\n                            </Label>\r\n                        ))}\r\n                    </Pie>\r\n                    <Tooltip />\r\n                </PieChart>\r\n            </div>\r\n*/\n\n/*\r\n<PieChart width={500} height={500}>\r\n                    <Pie \r\n                        data={myData} \r\n                        dataKey=\"label_counts\" \r\n                        nameKey=\"labels\" \r\n                        outerRadius={200} \r\n                        innerRadius={130} \r\n                        label\r\n                    ></Pie>\r\n                    <Tooltip />\r\n                </PieChart>\r\n*/\n\n/*\r\n<PieChart width={500} height={500}>\r\n    <Pie \r\n        data={myData} \r\n        dataKey=\"label_counts\" \r\n        innerRadius={130}\r\n        outerRadius={200} \r\n        fill=\"grey\" \r\n\r\n        \r\n    />\r\n</PieChart>\r\n\r\n\r\n<div>\r\n                <PieChart\r\n                    animate\r\n                    animationDuration={40}\r\n                    animationEasing=\"ease-in\"\r\n                    center={[50, 50]}\r\n                    data={myData}\r\n                    lineWidth={15}\r\n                    lengthAngle={360}\r\n                    paddingAngle={0}\r\n                    radius={50}\r\n                    rounded\r\n                    startAngle={0}\r\n                    viewBoxSize={[100, 100]}\r\n                    labelStyle={{\r\n                        fontSize: \"20px\",\r\n                        fontColor: \"FFFFFA\",\r\n                        fontWeight: \"500\",\r\n                        fontFamily: \"monospace\"\r\n                    }}\r\n                    label={myData.map((entry, index) => (\r\n                        <Label> {entry.labels}</Label>))}\r\n                    labelPosition={70}\r\n                />\r\n            </div>\r\n*/\nvar _c;\n$RefreshReg$(_c, \"IndiaCluster\");","map":{"version":3,"names":["axios","useState","useEffect","PieChart","Pie","Label","Tooltip","Cell","jsxDEV","_jsxDEV","IndiaCluster","_s","myData","setMyData","selectedData","setSelectedData","COLORS","handlePieEnter","data","get","then","res","className","children","map","post","labels","documents","i","length","title","content","fileName","_jsxFileName","lineNumber","columnNumber","width","height","dataKey","nameKey","outerRadius","innerRadius","labelLine","cx","cy","animationDuration","label","entry","onClick","index","fill","position","_ref","value","label_counts","toUpperCase","console","log","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app/src/Components/SubComponents/IndiaCluster.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { PieChart, Pie, Label, Tooltip, Cell } from \"recharts\";\r\n\r\nconst IndiaCluster = () => {\r\n    const [myData, setMyData] = useState([])\r\n    const [selectedData, setSelectedData] = useState(null);\r\n    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF', '#F2F2F2'];\r\n    \r\n    const handlePieEnter = (data) => {\r\n        setSelectedData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get('./india-clusters.json')\r\n          .then((res) => setMyData(res.data)\r\n        )\r\n    }, [0]);\r\n\r\n    return (  \r\n        <div className=\"clusters\">\r\n            <div>\r\n                {\r\n                    myData.map((post) => {\r\n                        let { labels,documents} = post\r\n                        \r\n                        labels = labels[0]\r\n\r\n                        for(let i=0;i<documents.length;i++){\r\n                            let title = documents[i].title\r\n                            let content = documents[i].content\r\n                        }\r\n                    })\r\n                }\r\n            </div> \r\n\r\n            <div className=\"displayPieChart\">\r\n                <div className=\"piechart-content\">\r\n                    <PieChart width={560} height={500}>\r\n                        <Pie \r\n                            data={myData} \r\n                            dataKey=\"label_counts\" \r\n                            nameKey=\"labels\" \r\n                            outerRadius={200} \r\n                            innerRadius={130} \r\n                            labelLine={false}\r\n                            cx={280}\r\n                            cy={250}\r\n                            animationDuration={0}\r\n                            label={(entry) => entry.labels}\r\n                            //onMouseEnter={handlePieEnter}\r\n                            onClick={handlePieEnter}\r\n                        >\r\n                            {\r\n                                myData.map((entry, index) => (\r\n                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]}>\r\n                                    <Label \r\n                                    position=\"inside\" \r\n                                    content={({ value }) => `${value} (${entry.labels})`}\r\n                                    />\r\n                                </Cell>\r\n                                ))\r\n                            }\r\n                        </Pie>\r\n                        <Tooltip />\r\n                    </PieChart>\r\n                </div>\r\n            \r\n                {selectedData && (\r\n                    <div className=\"piechart-content\">\r\n                        <h3>{selectedData.labels}</h3>\r\n                        <p>Topics: {selectedData.label_counts}</p>\r\n\r\n                        <p>{selectedData.documents[0].title}</p>\r\n\r\n                        <div>\r\n                            {\r\n                                myData.map((post) => {\r\n                                    let { labels,documents} = post\r\n                                    \r\n                                    labels = labels[0]\r\n                                    labels = labels.toUpperCase()\r\n\r\n                                    if(selectedData.labels === labels){\r\n                                        console.log(\"True\")\r\n                                        for(let i=0;i<documents.length;i++){\r\n                                            let title = documents[i].title\r\n                                            let content = documents[i].content\r\n\r\n                                            console.log(title)\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                        </div> \r\n                    </div>\r\n                )}\r\n           \r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndiaCluster\r\n\r\n\r\n\r\n/*\r\nCorrect\r\n\r\n<div className=\"displayPieChart\">\r\n                <PieChart width={500} height={500}>\r\n                    <Pie data={myData} dataKey=\"label_counts\" nameKey=\"labels\" outerRadius={200} innerRadius={130} label>\r\n                        {myData.map((entry, index) => (\r\n                            <Label \r\n                                key={`label-${index}`} \r\n                                position=\"center\"\r\n                                fill=\"Black\" \r\n                                fontSize={30}\r\n                            > {entry.labels}\r\n                            </Label>\r\n                        ))}\r\n                    </Pie>\r\n                    <Tooltip />\r\n                </PieChart>\r\n            </div>\r\n*/\r\n\r\n/*\r\n<PieChart width={500} height={500}>\r\n                    <Pie \r\n                        data={myData} \r\n                        dataKey=\"label_counts\" \r\n                        nameKey=\"labels\" \r\n                        outerRadius={200} \r\n                        innerRadius={130} \r\n                        label\r\n                    ></Pie>\r\n                    <Tooltip />\r\n                </PieChart>\r\n*/\r\n\r\n/*\r\n<PieChart width={500} height={500}>\r\n    <Pie \r\n        data={myData} \r\n        dataKey=\"label_counts\" \r\n        innerRadius={130}\r\n        outerRadius={200} \r\n        fill=\"grey\" \r\n\r\n        \r\n    />\r\n</PieChart>\r\n\r\n\r\n<div>\r\n                <PieChart\r\n                    animate\r\n                    animationDuration={40}\r\n                    animationEasing=\"ease-in\"\r\n                    center={[50, 50]}\r\n                    data={myData}\r\n                    lineWidth={15}\r\n                    lengthAngle={360}\r\n                    paddingAngle={0}\r\n                    radius={50}\r\n                    rounded\r\n                    startAngle={0}\r\n                    viewBoxSize={[100, 100]}\r\n                    labelStyle={{\r\n                        fontSize: \"20px\",\r\n                        fontColor: \"FFFFFA\",\r\n                        fontWeight: \"500\",\r\n                        fontFamily: \"monospace\"\r\n                    }}\r\n                    label={myData.map((entry, index) => (\r\n                        <Label> {entry.labels}</Label>))}\r\n                    labelPosition={70}\r\n                />\r\n            </div>\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}