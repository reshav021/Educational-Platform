{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app-copy\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\Progressbar\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Chunk from \"./Chunk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = _ref => {\n  _s();\n  let {\n    duration,\n    onTimeUpdate,\n    chunks\n  } = _ref;\n  const [currentTime, setCurrentTime] = useState(0);\n  const progressBarRef = useRef(null);\n  const progressBarFillRef = useRef(null);\n  const handleProgressClick = event => {\n    const progressBar = progressBarRef.current;\n    const progressWidth = progressBar.offsetWidth;\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left;\n    const newTime = progressClicked / progressWidth * duration;\n    onTimeUpdate(newTime);\n  };\n  const handleDrag = event => {\n    const progressBar = progressBarRef.current;\n    const progressBarFill = progressBarFillRef.current;\n    const progressWidth = progressBar.offsetWidth;\n    const progressFillWidth = progressBarFill.offsetWidth;\n    const dragStart = event.clientX;\n    const fillStart = progressBarFill.offsetLeft;\n    const maxFillLeft = progressWidth - progressFillWidth;\n    const handleDragMove = event => {\n      const dragDistance = event.clientX - dragStart;\n      let fillLeft = fillStart + dragDistance;\n      if (fillLeft < 0) {\n        fillLeft = 0;\n      } else if (fillLeft > maxFillLeft) {\n        fillLeft = maxFillLeft;\n      }\n      const progress = fillLeft / maxFillLeft;\n      const newTime = progress * duration;\n      onTimeUpdate(newTime);\n      progressBarFill.style.left = `${fillLeft}px`;\n    };\n    const handleDragEnd = () => {\n      document.removeEventListener(\"mousemove\", handleDragMove);\n      document.removeEventListener(\"mouseup\", handleDragEnd);\n    };\n    document.addEventListener(\"mousemove\", handleDragMove);\n    document.addEventListener(\"mouseup\", handleDragEnd);\n  };\n  const progress = currentTime / duration * 100;\n  let chunksToShow = [];\n  chunks.forEach(chunk => {\n    const chunkClass = progress >= chunk.start && progress <= chunk.end ? \"chunk active\" : \"chunk\";\n    if (progress >= chunk.end) {\n      chunksToShow.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: chunkClass\n      }, `${chunk.start}-${chunk.end}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this));\n    }\n  });\n  useEffect(() => {\n    const progressBar = progressBarRef.current;\n    const handleTimeUpdate = () => {\n      setCurrentTime(progressBar.currentTime);\n    };\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate);\n    return () => {\n      progressBar.removeEventListener(\"timeupdate\", handleTimeUpdate);\n    };\n  }, []);\n  const renderChunks = () => {\n    return chunks.map((chunk, index) => /*#__PURE__*/_jsxDEV(Chunk, {\n      ...chunk,\n      duration: duration\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-bar\",\n    ref: progressBarRef,\n    onClick: handleProgressClick,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-fill\",\n      style: {\n        width: `${progress}%`\n      },\n      ref: progressBarFillRef,\n      draggable: \"true\",\n      onDragStart: event => event.preventDefault(),\n      onDrag: handleDrag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), renderChunks()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgressBar, \"KpQEbWcDMMOKq2Y9bMHymle+dEo=\");\n_c = ProgressBar;\nexport default ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Chunk","jsxDEV","_jsxDEV","ProgressBar","_ref","_s","duration","onTimeUpdate","chunks","currentTime","setCurrentTime","progressBarRef","progressBarFillRef","handleProgressClick","event","progressBar","current","progressWidth","offsetWidth","progressClicked","clientX","getBoundingClientRect","left","newTime","handleDrag","progressBarFill","progressFillWidth","dragStart","fillStart","offsetLeft","maxFillLeft","handleDragMove","dragDistance","fillLeft","progress","style","handleDragEnd","document","removeEventListener","addEventListener","chunksToShow","forEach","chunk","chunkClass","start","end","push","className","fileName","_jsxFileName","lineNumber","columnNumber","handleTimeUpdate","renderChunks","map","index","ref","onClick","children","width","draggable","onDragStart","preventDefault","onDrag","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app-copy/my-app/src/Components/SubComponents/Progressbar/ProgressBar.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport Chunk from \"./Chunk\";\r\n\r\nconst ProgressBar = ({ duration, onTimeUpdate, chunks }) => {\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const progressBarRef = useRef(null);\r\n  const progressBarFillRef = useRef(null);\r\n\r\n  const handleProgressClick = (event) => {\r\n    const progressBar = progressBarRef.current;\r\n    const progressWidth = progressBar.offsetWidth;\r\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left;\r\n    const newTime = (progressClicked / progressWidth) * duration;\r\n    onTimeUpdate(newTime);\r\n  };\r\n\r\n  const handleDrag = (event) => {\r\n    const progressBar = progressBarRef.current;\r\n    const progressBarFill = progressBarFillRef.current;\r\n    const progressWidth = progressBar.offsetWidth;\r\n    const progressFillWidth = progressBarFill.offsetWidth;\r\n    const dragStart = event.clientX;\r\n    const fillStart = progressBarFill.offsetLeft;\r\n    const maxFillLeft = progressWidth - progressFillWidth;\r\n\r\n    const handleDragMove = (event) => {\r\n      const dragDistance = event.clientX - dragStart;\r\n      let fillLeft = fillStart + dragDistance;\r\n\r\n      if (fillLeft < 0) {\r\n        fillLeft = 0;\r\n      } else if (fillLeft > maxFillLeft) {\r\n        fillLeft = maxFillLeft;\r\n      }\r\n\r\n      const progress = fillLeft / maxFillLeft;\r\n      const newTime = progress * duration;\r\n      onTimeUpdate(newTime);\r\n\r\n      progressBarFill.style.left = `${fillLeft}px`;\r\n    };\r\n\r\n    const handleDragEnd = () => {\r\n      document.removeEventListener(\"mousemove\", handleDragMove);\r\n      document.removeEventListener(\"mouseup\", handleDragEnd);\r\n    };\r\n\r\n    document.addEventListener(\"mousemove\", handleDragMove);\r\n    document.addEventListener(\"mouseup\", handleDragEnd);\r\n  };\r\n\r\n  const progress = (currentTime / duration) * 100;\r\n\r\n  let chunksToShow = [];\r\n\r\n  chunks.forEach((chunk) => {\r\n    const chunkClass =\r\n      progress >= chunk.start && progress <= chunk.end\r\n        ? \"chunk active\"\r\n        : \"chunk\";\r\n\r\n    if (progress >= chunk.end) {\r\n      chunksToShow.push(\r\n        <div className={chunkClass} key={`${chunk.start}-${chunk.end}`} />\r\n      );\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const progressBar = progressBarRef.current;\r\n\r\n    const handleTimeUpdate = () => {\r\n      setCurrentTime(progressBar.currentTime);\r\n    };\r\n\r\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate);\r\n\r\n    return () => {\r\n      progressBar.removeEventListener(\"timeupdate\", handleTimeUpdate);\r\n    };\r\n  }, []);\r\n\r\n  const renderChunks = () => {\r\n    return chunks.map((chunk, index) => (\r\n      <Chunk key={index} {...chunk} duration={duration} />\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"progress-bar\" ref={progressBarRef} onClick={handleProgressClick}>\r\n      <div\r\n        className=\"progress-bar-fill\"\r\n        style={{ width: `${progress}%` }}\r\n        ref={progressBarFillRef}\r\n        draggable=\"true\"\r\n        onDragStart={(event) => event.preventDefault()}\r\n        onDrag={handleDrag}\r\n      />\r\n      {renderChunks()}\r\n    </div>\r\n  );\r\n  }\r\n\r\nexport default ProgressBar"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}