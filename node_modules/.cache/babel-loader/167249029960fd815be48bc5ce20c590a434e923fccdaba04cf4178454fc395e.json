{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshav\\\\Desktop\\\\Makonis\\\\my-app-copy\\\\my-app\\\\src\\\\Components\\\\SubComponents\\\\Progressbar\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Chunk from \"./Chunk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = _ref => {\n  _s();\n  var _progressBarRef$curre;\n  let {\n    duration,\n    onTimeUpdate,\n    chunks,\n    videotimeNow\n  } = _ref;\n  consolele.log(chunks);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [progressTime, setProgressTime] = useState(0);\n  const progressBarRef = useRef(null);\n  //console.log(videotimeNow)\n\n  const handleProgressClick = event => {\n    const progressBar = progressBarRef.current;\n    const progressWidth = progressBar.offsetWidth;\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left;\n    setProgressTime(progressClicked);\n    const newTime = progressClicked / progressWidth * duration;\n    onTimeUpdate(newTime);\n  };\n  const progress = currentTime / duration * 100;\n  const timeNow = currentTime / ((_progressBarRef$curre = progressBarRef.current) === null || _progressBarRef$curre === void 0 ? void 0 : _progressBarRef$curre.duration) * 100;\n  //console.log(progress)\n  let chunksToShow = [];\n  chunks.forEach(chunk => {\n    const chunkClass = progress >= chunk.start && progress <= chunk.end ? \"chunk active\" : \"chunk\";\n    if (progress >= chunk.end) {\n      chunksToShow.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: chunkClass\n      }, `${chunk.start}-${chunk.end}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this));\n    }\n  });\n  useEffect(() => {\n    const progressBar = progressBarRef.current;\n    const handleTimeUpdate = () => {\n      setCurrentTime(progressBar.currentTime);\n    };\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate);\n  }, []);\n  const renderChunks = () => {\n    return chunks.map((chunk, index) => /*#__PURE__*/_jsxDEV(Chunk, {\n      ...chunk,\n      duration: duration,\n      progressTime: progressTime\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this));\n  };\n\n  //console.log(progressTime)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-bar\",\n    ref: progressBarRef,\n    onClick: handleProgressClick,\n    children: [renderChunks(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-thumb\",\n      style: {\n        left: `${videotimeNow}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgressBar, \"H6da2JoXle5IyiIfBvJDFNVPhyU=\");\n_c = ProgressBar;\nexport default ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Chunk","jsxDEV","_jsxDEV","ProgressBar","_ref","_s","_progressBarRef$curre","duration","onTimeUpdate","chunks","videotimeNow","consolele","log","currentTime","setCurrentTime","progressTime","setProgressTime","progressBarRef","handleProgressClick","event","progressBar","current","progressWidth","offsetWidth","progressClicked","clientX","getBoundingClientRect","left","newTime","progress","timeNow","chunksToShow","forEach","chunk","chunkClass","start","end","push","className","fileName","_jsxFileName","lineNumber","columnNumber","handleTimeUpdate","addEventListener","renderChunks","map","index","ref","onClick","children","style","_c","$RefreshReg$"],"sources":["C:/Users/reshav/Desktop/Makonis/my-app-copy/my-app/src/Components/SubComponents/Progressbar/ProgressBar.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\"\r\nimport Chunk from \"./Chunk\"\r\n\r\nconst ProgressBar = ({ duration, onTimeUpdate, chunks, videotimeNow }) => {\r\n  consolele.log(chunks)\r\n  const [currentTime, setCurrentTime] = useState(0)\r\n  const [progressTime, setProgressTime] = useState(0)\r\n  const progressBarRef = useRef(null)\r\n  //console.log(videotimeNow)\r\n\r\n  const handleProgressClick = (event) => {\r\n    const progressBar = progressBarRef.current\r\n    const progressWidth = progressBar.offsetWidth\r\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left\r\n    setProgressTime(progressClicked)\r\n    const newTime = (progressClicked / progressWidth) * duration\r\n    onTimeUpdate(newTime)\r\n    \r\n  }\r\n\r\n  const progress = (currentTime / duration) * 100\r\n  const timeNow = (currentTime / progressBarRef.current?.duration) * 100;\r\n  //console.log(progress)\r\n  let chunksToShow = []\r\n\r\n  chunks.forEach((chunk) => {\r\n    const chunkClass =\r\n      progress >= chunk.start && progress <= chunk.end\r\n        ? \"chunk active\"\r\n        : \"chunk\"\r\n\r\n    if (progress >= chunk.end) {\r\n      chunksToShow.push(\r\n        <div className={chunkClass} key={`${chunk.start}-${chunk.end}`} />\r\n      )\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    const progressBar = progressBarRef.current\r\n\r\n    const handleTimeUpdate = () => {\r\n      setCurrentTime(progressBar.currentTime)\r\n    }\r\n\r\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate)\r\n  }, [])\r\n\r\n  const renderChunks = () => {\r\n    return chunks.map((chunk, index) => (\r\n      <Chunk\r\n        key={index}\r\n        {...chunk}\r\n        duration={duration}\r\n        progressTime={progressTime}\r\n      />\r\n    ))\r\n  }\r\n\r\n  //console.log(progressTime)\r\n\r\n  return (\r\n    <div\r\n      className=\"progress-bar\"\r\n      ref={progressBarRef}\r\n      onClick={handleProgressClick}\r\n    >\r\n      {renderChunks()}\r\n      <div\r\n        className=\"progress-bar-thumb\"\r\n        style={{ left: `${videotimeNow}%` }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressBar\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}