[{"E:\\Makonis\\New folder\\Makonis\\my-app\\src\\index.js":"1","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\reportWebVitals.js":"2","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\App.js":"3","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\Header.js":"4","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\Content.js":"5","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\VideoDetails.js":"6","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\SearchBar.js":"7","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\PieChart\\Charts.js":"8","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\PieChart\\List.js":"9","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\Progressbar\\ProgressBar.js":"10","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\PieChart\\ListChartVideoProgress.js":"11","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\Progressbar\\Chunk.js":"12"},{"size":556,"mtime":1681216024903,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1679997362823,"results":"15","hashOfConfig":"14"},{"size":1151,"mtime":1685342730222,"results":"16","hashOfConfig":"14"},{"size":269,"mtime":1684748509028,"results":"17","hashOfConfig":"14"},{"size":3936,"mtime":1690343849249,"results":"18","hashOfConfig":"14"},{"size":12307,"mtime":1685009779556,"results":"19","hashOfConfig":"14"},{"size":917,"mtime":1693992886457,"results":"20","hashOfConfig":"14"},{"size":22936,"mtime":1690343431546,"results":"21","hashOfConfig":"14"},{"size":15528,"mtime":1690343453754,"results":"22","hashOfConfig":"14"},{"size":3198,"mtime":1684918712812,"results":"23","hashOfConfig":"14"},{"size":10458,"mtime":1685102567223,"results":"24","hashOfConfig":"14"},{"size":1955,"mtime":1684822276279,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z5we2s",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},"E:\\Makonis\\New folder\\Makonis\\my-app\\src\\index.js",[],[],"E:\\Makonis\\New folder\\Makonis\\my-app\\src\\reportWebVitals.js",[],[],"E:\\Makonis\\New folder\\Makonis\\my-app\\src\\App.js",["70"],[],"import React from 'react';\nimport Header from './Components/Header';\nimport Content from './Components/Content';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport VideoDetails from './Components/SubComponents/VideoDetails';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Content/>} />\n        <Route path=\"/videoDetails\" element={<VideoDetails/>} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n\n\n/*\nimport React from 'react';\nimport Header from './Components/Header';\nimport Content from './Components/Content';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport VideoDetails from './Components/SubComponents/VideoDetails';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Components/style.css'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Header/>\n      \n      <Routes>\n        <Route path=\"/\" element={<Content/>} />\n        <Route path=\"/videoDetails\" element={<VideoDetails/>} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n*/","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\Header.js",[],[],"E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\Content.js",["71","72","73","74","75","76","77","78","79"],[],"import axios from \"axios\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport SearchBar from \"./SubComponents/SearchBar\"\r\nimport Charts from \"./SubComponents/PieChart/Charts\"\r\nimport List from \"./SubComponents/PieChart/List\"\r\n\r\nconst Content = () => {\r\n  const [myData, setMyData] = useState([])\r\n  let [searchData, setSearchData] = useState(\"\") //Search Value\r\n\r\n  //List View & PieChart\r\n  let showChartList = false\r\n  let [showPieChartContent, setShowPieChartContent] = useState(false)\r\n  let [showListContent, setShowListContent] = useState(true)\r\n\r\n  const getSearchData = (data) => {\r\n    data = data.toLowerCase()\r\n    setSearchData(data)\r\n  }\r\n\r\n  // Getting the data from JSON file\r\n  useEffect(() => {\r\n    axios.get(\"data.json\").then((res) => {\r\n      setMyData(res.data)\r\n    })\r\n  }, [])\r\n\r\n  const [isClicked, setIsClicked] = useState(false);\r\n\r\n  const handleListContent = () => {\r\n    setIsClicked(true);\r\n    var listBtn = document.getElementById(\"listBtn\");\r\n    var pieChartBtn = document.getElementById(\"pieChartBtn\");\r\n\r\n    pieChartBtn.style.backgroundColor = \"\";     // Remove highlight from pieChartBtn\r\n    listBtn.style.backgroundColor = \"grey\";\r\n\r\n    setShowPieChartContent(false)\r\n    setShowListContent(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsClicked(true); // Set isClicked to true when the component mounts\r\n  }, []);\r\n\r\n  const handlePieChartContent = () => {\r\n    var pieChartBtn = document.getElementById(\"pieChartBtn\");\r\n    var listBtn = document.getElementById(\"listBtn\");\r\n\r\n    listBtn.style.backgroundColor = \"\";        // Remove highlight from listBtn\r\n    pieChartBtn.style.backgroundColor = \"grey\";\r\n\r\n    setShowListContent(false)\r\n    setShowPieChartContent(true)\r\n  }\r\n\r\n  const displayListData = (searchData) => {\r\n    return (\r\n      <div className=\"list\">\r\n        <List searchData={searchData} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const displayPieChartData = (searchData) => {\r\n    return (\r\n      <div className=\"PieChart\">\r\n        <Charts searchData={searchData} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  let uniqueId = Math.floor(Math.random() * 100) + 1;\r\n\r\n  if(searchData) {\r\n    document.querySelector('.searchFilter').style.paddingTop = \"0.7rem\";\r\n    document.querySelector('.header').style.display = 'block'\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header\">\r\n        <li className=\"navbar\">\r\n          <a id=\"header-content\"></a>\r\n          <a id=\"home\" href=\"./\">Home</a>\r\n        </li>\r\n      </div>\r\n      {!searchData && (\r\n        <div className=\"homepage-content\">\r\n          <p id=\"homepage-header\">Educational Video Platform</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"searchFilter\">\r\n        <div className=\"searchBar\">\r\n          <SearchBar onSubmit={getSearchData} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid\">\r\n        {myData.map((item) => {\r\n          if(searchData !== \"\") {\r\n            showChartList = true\r\n            \r\n            //Getting data from JSON file which is stored myData, & accessing this by using map() -> {currentItems.map()}\r\n            let { domain, title, duration, faculty, video_url, transcript } = item\r\n\r\n            searchData = searchData.toUpperCase()\r\n            domain = domain.toUpperCase()\r\n            faculty = faculty.toUpperCase()\r\n            title = title.toUpperCase()\r\n          }\r\n        })}\r\n      </div>\r\n\r\n\r\n      {showChartList && (\r\n        <div className=\"chartList\">\r\n          <button id=\"listBtn\" style={{ backgroundColor: isClicked ? \"grey\" : \"\" }} onClick={handleListContent} >List</button>\r\n          <button id=\"pieChartBtn\" onClick={handlePieChartContent}>Pie Chart</button>\r\n\r\n          {showPieChartContent && <div key={uniqueId}>{displayPieChartData(searchData)}</div>}\r\n          {showListContent && <div key={uniqueId+1}>{displayListData(searchData)}</div>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\VideoDetails.js",["80","81","82","83","84","85","86","87","88"],[],"import axios from \"axios\"\r\nimport { BiFullscreen } from \"react-icons/bi\"\r\nimport ProgressBar from \"./Progressbar/ProgressBar\"\r\nimport React, { useState, useEffect, useRef } from \"react\"\r\n\r\nfunction VideoDetails(props) {\r\n  const [myData, setMyData] = useState([])\r\n  const [searchKeyword, setSearchKeyword] = useState(0)\r\n\r\n  const chunks = []\r\n  const videoRef = useRef() \r\n  \r\n  const [duration, setDuration] = useState(0)\r\n  const [currentTime, setCurrentTime] = useState(0)\r\n  const [videotimeNow, setCurrentVideoTime] = useState(0) \r\n  const [displayKeywordContainer,setDisplayKeywordContainer] = useState(false)\r\n\r\n  const progressTooltipRef = useRef(null);\r\n  const [fullscreen, setFullscreen] = useState(false);\r\n  const [fullscreenProgressBar, setfullscreenProgressBar] = useState(false)\r\n\r\n  let showDiv = props.showDiv\r\n  let localtitle = props.myTitle\r\n  let videoFileName = props.myVideoFileName\r\n\r\n  // Setting the API/JSON data\r\n  useEffect(() => {\r\n    axios.get(\"./india.json\").then((res) => setMyData(res.data))\r\n  }, [])\r\n\r\n  // Function to remove duplicates appearing in the search input \r\n  const removeDuplicateKeywords = () => {\r\n    const list = []\r\n    const set = new Set()\r\n\r\n    return {\r\n      push(element) {\r\n        if (!set.has(element)) {\r\n          list.push(element)\r\n          set.add(element)\r\n        }\r\n      },\r\n      get() {\r\n        return list\r\n      },\r\n    }\r\n  }\r\n\r\n  // Remove all duplicate keywords appearing in the search input \r\n  let allKeywords = removeDuplicateKeywords()\r\n\r\n  // Takes us to give time duration in the video\r\n  const handleSeekTo = (time) => {\r\n    if(videoRef.current)\r\n      videoRef.current.currentTime = time + 1\r\n  }\r\n\r\n  // Converting hh:mm:ss to seconds\r\n  const toSeconds = (timeString) => {\r\n    timeString = timeString + \"\"\r\n    let time = timeString.split(\":\")\r\n\r\n    let hr = parseInt(time[0], 10)\r\n    let min = parseInt(time[1], 10)\r\n    let sec = parseInt(time[2], 10)\r\n\r\n    return hr * 3600 + min * 60 + sec\r\n  }\r\n\r\n  // Search a topic inside the video\r\n  const handleSearch = () => {\r\n    setDisplayKeywordContainer(true)\r\n    let selectedkeyword = document.getElementById(\"inputVal\").value\r\n    selectedkeyword = selectedkeyword.toUpperCase()\r\n\r\n    if(selectedkeyword === \"Default\") \r\n      selectedkeyword = \"\"\r\n    setSearchKeyword(selectedkeyword)\r\n  }\r\n\r\n  const handleTimeUpdate = (newTime) => {\r\n    videoRef.current.currentTime = newTime\r\n    setCurrentTime(newTime)\r\n  }\r\n\r\n  // Gives the entire video duration\r\n  const handleDurationChange = () => {\r\n    setDuration(videoRef.current.duration)\r\n  }\r\n\r\n  function handleTime() {\r\n    setCurrentTime(videoRef.current.currentTime)\r\n    setCurrentVideoTime(videoRef.current.currentTime)\r\n  }\r\n\r\n  // Function to adjust to fullscreen view\r\n  const toggleFullScreen = async (event) => {\r\n    const container = document.getElementById(\"video-container\");\r\n    const fullscreenApi = container.requestFullscreen || container.webkitRequestFullScreen ||\r\n      container.mozRequestFullScreen || container.msRequestFullscreen;\r\n\r\n    if(!document.fullscreenElement) {\r\n      setFullscreen(true);\r\n      fullscreenApi.call(container);\r\n    } \r\n    else {\r\n      document.exitFullscreen();\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  // Event handler to detect fullscreen mode changes\r\n  const handleFullScreenChange = () => {\r\n    if (!document.fullscreenElement) {\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  // Register the event listener\r\n  document.addEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n\r\n  // Removes the event listener when the component is unmounted/removed\r\n  useEffect(() => {\r\n    return () => {\r\n      document.removeEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n    };\r\n  }, []);\r\n\r\n  // Shows time in correct format mm:ss\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${String(seconds).padStart(2, \"0\")}`;\r\n  }\r\n\r\n  // Display topic in the progressbar of video\r\n  const displayTopic = (event) => {\r\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'none'\r\n    const rect = event.target.getBoundingClientRect();\r\n    const x = event.clientX - rect.left;\r\n    const percentage = x / rect.width;\r\n    const time = duration * percentage;\r\n    let textToDisplay = '';\r\n\r\n    for(let i=0;i<chunks.length;i++){\r\n      let chunksData = chunks[i];\r\n\r\n      if((time > chunksData.start) && (time < chunksData.end))\r\n        textToDisplay = chunksData.topic\r\n    }\r\n\r\n    setfullscreenProgressBar(true)\r\n\r\n    if(fullscreen === true && progressTooltipRef.current) {\r\n      progressTooltipRef.current.style.display = \"block\";\r\n      progressTooltipRef.current.style.left = `${event.clientX}px`;\r\n      progressTooltipRef.current.style.top = `${rect.top - progressTooltipRef.current.offsetHeight}px`;\r\n      progressTooltipRef.current.innerText = textToDisplay + \" \" + formatTime(time);\r\n    }\r\n  };\r\n  \r\n  // Hides the topic to be displayed when outside the fullscreen view\r\n  const notdisplayTopic = () => {\r\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'block'\r\n    setfullscreenProgressBar(false)\r\n\r\n    if(fullscreen === true && progressTooltipRef.current) {\r\n      progressTooltipRef.current.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  const [progress, setProgress] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    const handleProgress = () => {\r\n      if (videoRef.current && !isNaN(videoRef.current.duration)) {\r\n        setProgress(\r\n          (videoRef.current.currentTime / videoRef.current.duration) * 100\r\n        );\r\n      }\r\n    };\r\n\r\n    if (videoRef.current) {\r\n      videoRef.current.addEventListener(\"timeupdate\", handleProgress);\r\n    }\r\n\r\n    return () => {\r\n      if (videoRef.current) {\r\n        videoRef.current.removeEventListener(\"timeupdate\", handleProgress);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleProgressBarChange = (e) => {\r\n    const progressBarValue = e.target.value;\r\n    setProgress(progressBarValue);\r\n    if (videoRef.current && !isNaN(videoRef.current.duration)) {\r\n      const seekTime = (progressBarValue / 100) * videoRef.current.duration;\r\n      videoRef.current.currentTime = seekTime;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"videoDetails\">\r\n      <div className=\"listchartheader\">       {/* Displaying company logo at the top */}\r\n        <li className=\"navbar\">\r\n          <a id=\"header-content\"><img id=\"header-logo\" src='/logo/img3.png'></img></a>\r\n        </li>\r\n      </div>\r\n\r\n      <div className=\"videoDetails-data\">\r\n        {myData.map((post) => {\r\n          let { title, faculty, domain, chapters_list, image_metadata } = post\r\n\r\n          title = title.toUpperCase()\r\n          faculty = faculty.toUpperCase()\r\n          domain = domain.toUpperCase()\r\n          localtitle = localtitle.toUpperCase()\r\n\r\n          if(title === localtitle) {\r\n            let len = Object.keys(chapters_list).length\r\n            let timeStamp = []\r\n            let imgSrc,imgFile\r\n\r\n            for(let i = 1; i <= len; i++) {\r\n              let obj = chapters_list[i]\r\n              let startTime = obj[0]\r\n              let endTime = obj[1]\r\n              let keywords = obj[3]\r\n\r\n              //let imageData = image_metadata[i].image_filename\r\n              //let imagePath = imageData[0]\r\n              //let imagePath = imageData[2]\r\n              //let imagePath = imageData[i]\r\n\r\n              let imagePath;\r\n\r\n              let imageFilenames = image_metadata.image_filename;\r\n              \r\n              imagePath = imageFilenames[i-1]\r\n              \r\n\r\n              if(keywords === searchKeyword) {\r\n                imgSrc = imagePath\r\n                imgFile = title\r\n              }\r\n\r\n              keywords = keywords.toUpperCase()\r\n              allKeywords.push(keywords)\r\n              \r\n              keywords = keywords.toUpperCase()\r\n\r\n              let startTimeSeconds = toSeconds(startTime)\r\n              let endTimeSeconds = toSeconds(endTime)\r\n\r\n              //Random colors\r\n              const colors = [ \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#800000\", \"#FFA500\", \"#FFFFF0\", ]\r\n\r\n              const newChunk = {\r\n                start: startTimeSeconds,\r\n                end: endTimeSeconds - 1.5,\r\n                //color: colors[Math.floor(Math.random() * colors.length)],\r\n                color: \"gray\",\r\n                topic: keywords,\r\n              }\r\n\r\n              chunks.push(newChunk)                 // Inserting all data related to a topic inside chunks[]\r\n\r\n              if(searchKeyword === \"\") \r\n                return\r\n              \r\n              if(keywords.includes(searchKeyword))   // Inserting all the timestamps inside timeStamp[]\r\n                timeStamp.push(startTime)\r\n            }\r\n\r\n            let startTime = toSeconds(timeStamp[0])  // Converting hh:mm:ss to seconds\r\n\r\n            return (\r\n              <div>\r\n                {showDiv && displayKeywordContainer &&(\r\n                  <div className=\"keywordContainer\">    {/* Displaying photo and timestamp of a topic */}\r\n                    <div className=\"photodiv-container\" onClick = {handleSeekTo.bind(this, startTime)}>\r\n                      <div className=\"keywordImage\">\r\n                        <img src={'./ImgVideoData/' + imgFile + '/' +imgSrc}></img>\r\n                      </div>\r\n                      <button id=\"seekToBtn\" onClick = {handleSeekTo.bind(this, startTime)}>Seek to {timeStamp[0]}</button>\r\n                            \r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )\r\n          }\r\n        })}\r\n      </div>\r\n\r\n      <div className=\"videoDetails-video\">\r\n        <div className=\"row\" id=\"video-container\"> {/* Displaying video */}\r\n          <video\r\n            ref={videoRef}\r\n            src={videoFileName}\r\n            onTimeUpdate={handleTime}\r\n            onDurationChange={handleDurationChange}\r\n            height={359.6}\r\n            controls\r\n            autoPlay\r\n            onMouseMove={displayTopic}\r\n            onMouseOut={notdisplayTopic}\r\n            //onProgress={handleProgress}\r\n            id=\"video-player\"\r\n          />\r\n\r\n          <div id=\"top-overlay\">\r\n            <div>                       {/* Displaying progressbar on top of video */}\r\n              <BiFullscreen                 \r\n                id=\"fullscreen-toggle-btn\"\r\n                role=\"button\"\r\n                class=\"bi bi-fullscreen text-white text-outline\"\r\n                onClick={(event) => toggleFullScreen(event)}\r\n              ></BiFullscreen>\r\n            </div>\r\n          </div>\r\n\r\n          <div id=\"bottom-overlay\">\r\n            {fullscreenProgressBar && (\r\n              <div id=\"progressTooltip\" ref={progressTooltipRef}></div>\r\n            )}\r\n\r\n            {/*Blue color progressbar*/}\r\n            <input id=\"progresss\" type=\"range\" min=\"0\" max=\"100\" value={progress} step=\"any\" onChange={handleProgressBarChange}/>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Displaying the progress bar by sending data to ProgressBar.js file*/}\r\n        <ProgressBar\r\n          className=\"progressBar\"\r\n          id=\"normalProgressBar\"\r\n          currentTime={currentTime}\r\n          duration={duration}\r\n          onTimeUpdate={handleTimeUpdate}\r\n          chunks={chunks}\r\n          videotimeNow={videotimeNow}\r\n          value={2}\r\n        />\r\n\r\n        \r\n      </div>\r\n\r\n      <div className=\"videoDetails-btn\">\r\n        <div id=\"inputVideoDetails\">      {/* Displaying search input & button */}\r\n          <input id=\"inputVal\" list=\"select-keyword\" autoComplete=\"off\" placeholder=\"Search a topic\"/>\r\n\r\n          <datalist id=\"select-keyword\">\r\n            <option id=\"option-keyword\" value=\"\">\r\n              Select a keyword\r\n            </option>\r\n            {allKeywords.get().sort().map((option, index) => {\r\n              return <option key={index}> {option} </option>\r\n            })}\r\n          </datalist>\r\n        </div>\r\n\r\n        <button className=\"videoDetails-searchBtn\" onClick={handleSearch}>Search</button>     \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoDetails","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\SearchBar.js",[],[],"E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\PieChart\\Charts.js",["89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116"],[],"import axios from \"axios\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { PieChart, Pie, Label, Tooltip, Cell, Legend } from \"recharts\"\r\nimport VideoDetails from \"../VideoDetails\"\r\nimport ListChartVideoProgress from './ListChartVideoProgress'\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\n\r\nconst Charts = (props) => {\r\n  const searchData = props.searchData\r\n  const [myData, setMyData] = useState([])\r\n \r\n  const [OuterChartData, setOuterChartData] = useState([])\r\n\r\n  const InnerColors = [ \"#0088FE\",\"#FF7F50\",\"#00C49F\",\"#6B8E23\",\"#008080\",\"#3CB371\",\"#FF6384\",\"#F2F2F2\",\"#34495e\",\"#f1c40f\" ]\r\n  const OuterColors = [ \"#FF6384\", \"#36A2EB\", \"#483D8B\", \"#1abc9c\", \"#3498db\", \"#9b59b6\", \"#34495e\", \"#f1c40f\", \"#e74c3c\", \"#95a5a6\", \"#2ecc71\", \"#8e44ad\", \"#d35400\", \"#7f8c8d\", \"#27ae60\", ]\r\n\r\n  const [selectedTopic, setSelectedTopic] = useState(null)\r\n  const [myallData, setmyallData] = useState([])\r\n\r\n  let flag = true, display = false\r\n  let jsonPath, jsonPathCluster, myDataLength, innerlabelCount=0, allLabelCount=0\r\n  // Used to set a random value for a key in a div \r\n  let uniqueId = Math.floor(Math.random() * 100) + 1; \r\n\r\n  let [showInnerContent, setShowInnerContent] = useState(false)\r\n  let [showOuterContent, setShowOuterContent] = useState(false)\r\n  let [showAllInnerContent, setShowAllInnerContent] = useState(true)\r\n\r\n  let [count, setCount] = useState(0);\r\n  let allFacultyName = [], allSubjects = [];\r\n  let newOuterChartData = []\r\n\r\n  const [selectedInnerData, setSelectedInnerData] = useState(null)\r\n  const [selectedOuterData, setSelectedOuterData] = useState(null)\r\n\r\n  // Set the data for outer piechart \r\n  /*\r\n  useEffect(() => { \r\n    myData.forEach((post) => {\r\n      let { labels,documents } = post\r\n\r\n      for(let i=0; i<documents.length; i++) {\r\n        let title = documents[i].title\r\n        let titleCount = 1\r\n        newOuterChartData.push({ title: title, count: titleCount })\r\n      }\r\n    })\r\n    setOuterChartData(newOuterChartData)\r\n  }, [myData])\r\n  */\r\n  \r\n  let [displayOuterPieChartoverlay, setdisplayOuterPieChartoverlay] = useState(false)\r\n  let [innerChartLabel, setinnerChartLabel] = useState(null)\r\n\r\n  //Set data for inner clicked label in inner piechart\r\n  const setDataOuterPiechart = (label) => {\r\n    setinnerChartLabel(label)\r\n\r\n    myData.forEach((post) => {\r\n      let { labels,documents } = post\r\n\r\n      if(label === labels[0]){\r\n        for(let i=0; i<documents.length; i++) {\r\n          let title = documents[i].title\r\n          let titleCount = 1\r\n          newOuterChartData.push({ title: title, count: titleCount })\r\n        }\r\n      }\r\n    })\r\n    setOuterChartData(newOuterChartData.slice(0,10))      // Retrive only 10 data from the cluster file\r\n    setdisplayOuterPieChartoverlay(true)\r\n  }\r\n\r\n  // Set the selected data for inner piechart\r\n  const handleInnerPieEnter = (data) => {\r\n    setDataOuterPiechart(data.labels[0])\r\n    setSelectedInnerData(data)\r\n    setSelectedTopic(data.labels[0])\r\n    setShowOuterContent(false)\r\n    setShowAllInnerContent(false)\r\n    setShowInnerContent(true)\r\n  }\r\n\r\n  // Set the selected data for outer piechart\r\n  const handleOuterPieEnter = (data) => {\r\n    setSelectedOuterData(data)\r\n    setSelectedTopic(data.name)\r\n    setShowInnerContent(false)\r\n    setShowAllInnerContent(false)\r\n    setShowOuterContent(true)\r\n  }\r\n\r\n  if (\"INDIA\".includes(searchData)) {\r\n    jsonPathCluster = \"./india-cluster.json\"\r\n    jsonPath = './india.json'\r\n  } \r\n  else if (\"PHYSICS\".includes(searchData)) {\r\n    jsonPathCluster = \"./physics-cluster.json\"\r\n    jsonPath = './physics.json'\r\n  } \r\n  else if (\"LAW\".includes(searchData)) {\r\n    jsonPathCluster = \"./law-cluster.json\"\r\n    jsonPath = './law.json'\r\n  }\r\n  else {\r\n    myDataLength = 0      // If that keyword doesn't exist\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios.get(jsonPath).then((res) => setmyallData(res.data))\r\n  }, [searchData])\r\n\r\n  useEffect(() => {\r\n    axios.get(jsonPathCluster).then((res) => {\r\n      const slicedData = res.data.slice(0, 10);  // Retrive only 10 data from the cluster file\r\n      setMyData(slicedData);\r\n    });\r\n  }, [searchData]);\r\n\r\n  \r\n\r\n  const [myTitle, setTitle] = useState();\r\n  const [showDiv, setShowDiv] = useState(false);\r\n  const [myVideoFileName, setVideoFileName] = useState();\r\n\r\n  // Set value for title & videoFileName for Watch Video \r\n  const handleshowDiv = (title,videoFileName) => {\r\n    setShowDiv(true)\r\n    setTitle(title)\r\n    setVideoFileName(videoFileName)\r\n  };\r\n\r\n  // Hide outerPieChartCloseBtn\r\n  const outerChartCloseBtn = () => {\r\n    document.getElementById('outerPieChartoverlay').style.display = 'none'\r\n    displayOuterPieChartoverlay = false\r\n  }\r\n\r\n  const handlehideDiv = () => {\r\n    setShowDiv(false)\r\n    setTitle()\r\n    setVideoFileName()\r\n  }\r\n\r\n  const [facultySelected, setFaculty] = useState('');\r\n  const [subjectSelected, setSubject] = useState('');\r\n\r\n  const closeTranscript = () => {\r\n    document.querySelector('#displayTranscript').style.display = 'none'\r\n  }\r\n\r\n  const closeFilterBtn = () => {\r\n    document.querySelector('#displayFilter').style.display = 'none'\r\n  }\r\n\r\n  // Set the faculty which is selected in search input of Faculty\r\n  const onFacultyChange = () => {\r\n    let selectedTeacher = document.getElementById(\"inputValFaculty\").value;\r\n\r\n    if(selectedTeacher === \"Default\") \r\n      selectedTeacher = \"\";\r\n\r\n    setFaculty(selectedTeacher)\r\n  };\r\n\r\n  // Set the subject which is selected in search input of Subject\r\n  const onSubjectChange = () => {\r\n    let selectedSubject = document.getElementById(\"inputValSubject\").value;\r\n\r\n    if(selectedSubject === \"Default\") \r\n      selectedSubject = \"\";\r\n\r\n    setSubject(selectedSubject)\r\n  };\r\n\r\n  // Adding condition for the filters\r\n  const addfilter = (faculty, facultySelected, domain, subjectSelected) => {\r\n    return (facultySelected === faculty && subjectSelected === domain) || \r\n      (facultySelected === faculty && subjectSelected === '') ||\r\n      (facultySelected === '' && subjectSelected === domain) ||\r\n      (facultySelected === '' && subjectSelected === '')\r\n  }\r\n\r\n  // Displaying the Description/Audio_Transcript of the video using a popover\r\n  const renderDescriptionOverlay = (content) => {\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\" rootClose placement=\"top\"\r\n        overlay={\r\n          <Popover id={`displayTranscript`} style={{height:\"260px\",width:\"252px\",zIndex:0}}>\r\n            <Popover.Header as=\"h3\">\r\n              Description\r\n              <button id='closeTranscript' onClick={closeTranscript.bind(this)}><i class=\"fa fa-close\"></i></button>\r\n            </Popover.Header>\r\n            <Popover.Body style={{height:\"205px\",width:\"250px\", overflowX:\"hidden\"}}>\r\n              {content}\r\n            </Popover.Body>\r\n          </Popover>\r\n        }\r\n      > \r\n        <button id='descriptionBtn'>Description</button>\r\n      </OverlayTrigger>\r\n    )\r\n  }\r\n\r\n  // Download audio_transcript\r\n  const downloadTxtFile = (title,transcript) => {\r\n    const element = document.createElement('a');\r\n    element.style.fontFamily = 'Arial';\r\n    element.style.fontSize = '20px';\r\n    element.style.textAlign = 'justify';\r\n    \r\n    const file = new Blob([transcript], {\r\n      type: \"text/html; charset=utf-8\",\r\n    });\r\n  \r\n    element.href = URL.createObjectURL(file);\r\n    element.download = title + \".doc\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  } \r\n\r\n  const displayedTitles = [];\r\n\r\n  // Display the video, watch video button and description\r\n  const displayContent = (title,content,audio_transcript,videoFileName) => {\r\n    if (!displayedTitles.includes(title)){    // Check if title already displayed/exist don't show that video\r\n      count++;\r\n      displayedTitles.push(title);\r\n      \r\n      return (\r\n        <div className=\"displaylistContent\">\r\n          <h4 id=\"list-title\">{title}</h4>\r\n          <ListChartVideoProgress myTitle={title} myVideoFileName={videoFileName} showDiv={showDiv}/>\r\n          {renderDescriptionOverlay(content)}\r\n          <button id='view-VideoDetails' onClick={() => handleshowDiv(title, videoFileName)}>Watch Detailed Video</button>\r\n          <button id='downloadBtn' onClick={downloadTxtFile.bind(this,title,audio_transcript)}>Download Notes</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const [selectedInnerSliceIndex, setSelectedInnerSliceIndex] = useState(null);\r\n  const [selectedOuterSliceIndex, setSelectedOuterSliceIndex] = useState(null);\r\n  \r\n  // Used to display labels just outside the inner piechart\r\n  const handleInnerSliceClick = (index) => {\r\n    setFaculty('')\r\n    setSubject('')\r\n    setSelectedOuterSliceIndex(null);\r\n    setSelectedInnerSliceIndex(index);\r\n  };\r\n  \r\n  // Used to display labels just outside the outer piechart\r\n  const handleOuterSliceClick = (index) => {\r\n    setFaculty('')\r\n    setSubject('')\r\n    setSelectedInnerSliceIndex(null);\r\n    setSelectedOuterSliceIndex(index);\r\n  };\r\n\r\n  // Used to reset the filters\r\n  const handleResetFilter =() => {\r\n    document.getElementById(\"inputValFaculty\").value = ''\r\n    document.getElementById(\"inputValSubject\").value = ''\r\n    setFaculty('')\r\n    setSubject('')\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(searchData !== '') {\r\n      setFaculty('');\r\n      setSubject('');\r\n    }\r\n  }, [searchData]);\r\n\r\n  // Display only 5 sentences of a audio_transcript\r\n  const extractFiveSentences = (inputText) => {\r\n    const sentences = inputText.split('.');\r\n    const validSentences = sentences.filter(sentence => sentence.trim() !== '');\r\n  \r\n    if (validSentences.length >= 5) {\r\n      return validSentences.slice(0, 5).join('. ') + '.';\r\n    } else {\r\n      return validSentences.join('. ') + '.';\r\n    }\r\n  }\r\n\r\n  // Display the filters\r\n  const renderFilterOverlay = () => {\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\"\r\n        rootClose\r\n        placement=\"bottom-end\"\r\n        overlay={\r\n          <Popover id={`displayFilter`} style={{ height: \"260px\", width: \"230px\", zIndex: 0 }}>\r\n            <Popover.Header as=\"h3\" style={{display: \"flex\"}}>\r\n              Filter\r\n              <button id=\"resetBtn\" onClick={handleResetFilter}>Reset</button>\r\n              <button id='closeFilterBtn' onClick={closeFilterBtn.bind(this)}><i className=\"fa fa-close\"></i></button>\r\n            </Popover.Header>\r\n            <Popover.Body style={{ height: \"205px\", width: \"242.5px\", overflow: \"hidden\" }}>\r\n              <div>\r\n                <div className=\"selectedValue\">\r\n                  {facultySelected} {subjectSelected}\r\n                </div>\r\n                <div id='facultyFilter'>\r\n                  Faculty\r\n                  \r\n                  <input id=\"inputValFaculty\" list=\"select-faculty\" placeholder=\"Search for faculty\" onChange={onFacultyChange} />\r\n                  <datalist id=\"select-faculty\">\r\n                    <option id=\"option-keyword\" value=\"\">Search for faculty</option>\r\n                    {[...new Set(allFacultyName)].map((option, index) => (\r\n                      <option key={index}>{option}</option>\r\n                    ))}\r\n                  </datalist>\r\n                </div>\r\n\r\n                <div id='subjectFilter'>\r\n                  Subject\r\n\r\n                  <input id=\"inputValSubject\" list=\"select-subject\" placeholder=\"Search for subject\" onChange={onSubjectChange} />\r\n                  <datalist id=\"select-subject\">\r\n                    <option id=\"option-keyword\" value=\"\">Search for subject</option>\r\n                    {[...new Set(allSubjects)].map((option, index) => {\r\n                      return <option key={index}> {option} </option>;\r\n                    })}\r\n                  </datalist>\r\n                </div>\r\n              </div>\r\n            </Popover.Body>\r\n          </Popover>\r\n        }\r\n      >\r\n        <button id='filterBtn'>Filter</button>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n\r\n  if(myDataLength === 0){\r\n    return (\r\n      <h3 id='noResults'>No results found</h3>\r\n    )\r\n  }\r\n  else{\r\n    return (\r\n      <div key={uniqueId} className=\"displayPieChart\">\r\n        {myallData.map((post) => {\r\n          let { title, summary, faculty, domain } = post \r\n\r\n          allSubjects.push(domain.toUpperCase())\r\n          allFacultyName.push(faculty.toUpperCase())\r\n        })}\r\n\r\n        {myData.map((post) => {\r\n          let { labels, documents } = post\r\n  \r\n          labels = labels[0]\r\n          \r\n          if(selectedInnerData)\r\n            innerlabelCount = selectedInnerData.documents.length\r\n  \r\n          for(let i=0;i<documents.length;i++){\r\n            allLabelCount++;\r\n          }\r\n  \r\n          documents.map((doc, i) => {\r\n            let domain = doc.domain\r\n            let faculty = doc.faculty\r\n  \r\n            allSubjects.push(domain)\r\n            allFacultyName.push(faculty)\r\n          })\r\n        })}\r\n        \r\n        {showDiv && (\r\n          <div id=\"overlay\">\r\n            <button id='closeBtn' onClick={handlehideDiv}>\r\n              <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n            </button>\r\n            <VideoDetails myTitle={myTitle} myVideoFileName={myVideoFileName} showDiv={showDiv}/>\r\n          </div>\r\n        )}\r\n  \r\n        {displayOuterPieChartoverlay && (\r\n          <div id=\"outerPieChartoverlay\">\r\n            <h4 id='innerChartLabel'>Topic: {innerChartLabel}</h4>\r\n            <button id='closeOuterChartBtn' onClick={outerChartCloseBtn}>\r\n              <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n            </button>\r\n            <PieChart width={700} height={500}>\r\n              <Pie\r\n                data={OuterChartData}             //Display Outer PieChart \r\n                dataKey=\"count\"\r\n                nameKey=\"title\"\r\n                cx={323}\r\n                cy={242}\r\n                labelLine={false}\r\n                isAnimationActive={false}\r\n                animationDuration={0}\r\n                outerRadius={162}\r\n                innerRadius={138}\r\n                fontWeight='bold'\r\n                fontSize='12px'\r\n                label={(entry) => entry.title.toUpperCase()}\r\n                onClick={handleOuterPieEnter}\r\n              >\r\n                {OuterChartData.map((entry, index) => (\r\n                  <Cell\r\n                    key={`cell-${index}`}\r\n                    fill={OuterColors[index % OuterColors.length]}\r\n                    stroke={selectedOuterSliceIndex === index ? '#000' : '#fff'}\r\n                    strokeWidth={selectedOuterSliceIndex === index ? 2 : 1}\r\n                    onClick={() => handleOuterSliceClick(index)}\r\n                  />\r\n                ))}\r\n              </Pie>\r\n            </PieChart>    \r\n          </div>\r\n        )}\r\n\r\n        <div id=\"pieChartView\">\r\n          <PieChart width={700} height={500}>\r\n            <Pie\r\n              data={myData}                   //Display Inner PieChart \r\n              dataKey=\"count\"\r\n              nameKey=\"labels\"\r\n              cx={323}\r\n              cy={242}\r\n              labelLine={false}\r\n              isAnimationActive={false}\r\n              animationDuration={0}\r\n              outerRadius={162}\r\n              innerRadius={138}\r\n              label={({ cx, cy, midAngle, innerRadius, outerRadius, index, title, labels }) => {\r\n                const RADIAN = Math.PI / 180;\r\n                const radius = innerRadius + (outerRadius - innerRadius) * 1.2;\r\n                const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n                const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n  \r\n                return (\r\n                  <text\r\n                    x={x}\r\n                    y={y}\r\n                    fill={InnerColors[index % InnerColors.length]}\r\n                    textAnchor={x > cx ? 'start' : 'end'}\r\n                    dominantBaseline=\"central\"\r\n                    style={{ fontSize: '12px', fontWeight: 'bold'}}\r\n                  >\r\n                    {labels[0].toUpperCase()}\r\n                  </text>\r\n                );\r\n              }}\r\n              onClick={handleInnerPieEnter}\r\n            >\r\n              {myData.map((entry, index) => (\r\n                <Cell\r\n                key={`cell-${index}`}\r\n                fill={InnerColors[index % InnerColors.length]}\r\n                stroke={selectedInnerSliceIndex === index ? 'black' : 'none'}\r\n                strokeWidth={selectedInnerSliceIndex === index ? 2 : 0}\r\n                onClick={() => handleInnerSliceClick(index)}\r\n              />\r\n              ))}\r\n            </Pie>\r\n          </PieChart>\r\n        </div>\r\n  \r\n        <div className=\"displayPieChartContent\">\r\n\r\n          {/* Displaying the label data(India & Bengal) which has been clicked by user in inner piechart*/}\r\n          {showInnerContent && selectedInnerData && (\r\n            <div className=\"piechart-content\">\r\n              \r\n\r\n              {myData.map((post) => {\r\n                let { labels, documents } = post\r\n\r\n                labels = labels[0]\r\n\r\n                if (selectedInnerData.labels[0] === labels) {\r\n                  return documents.map((doc, i) => {\r\n                    let title = doc.title\r\n                    let content = doc.content\r\n                    //let domain = doc.domain\r\n                    //let faculty = doc.faculty\r\n                    //let videoFileName = './rbi/' + doc.video_File_Name + '.mp4'\r\n                    let videoFileName = './ImgVideoData' + '/video/' + doc.title + '.mp4'\r\n\r\n                    let facultyName, domainName, transcript\r\n\r\n                    {myallData.map((post) => {\r\n                      let { title, summary, faculty, domain, audio_transcript } = post \r\n                      let newTitle = title\r\n    \r\n                      summary = summary[0].toUpperCase() + summary.slice(1,)\r\n                      transcript = audio_transcript\r\n\r\n                      if(doc.title === newTitle){\r\n                        content = extractFiveSentences(summary)\r\n                        facultyName = faculty\r\n                        domainName = domain\r\n                      }\r\n                    })}\r\n\r\n                    if(facultySelected !== '' || subjectSelected !== '')\r\n                      innerlabelCount = count\r\n                    else\r\n                      innerlabelCount = count + 1\r\n\r\n                    display = true\r\n\r\n                    let filters = addfilter(facultyName, facultySelected, domainName, subjectSelected)\r\n\r\n                    if(filters)\r\n                      return (<div key={i}> {displayContent(title,content,transcript,videoFileName)} </div>)\r\n                  })\r\n                }\r\n              })}\r\n              \r\n              {display && (\r\n                <div className=\"label-count\" key={uniqueId}>\r\n                  <h4 id='allResultstext'>All results for {selectedTopic}: {innerlabelCount}</h4>\r\n                  {renderFilterOverlay()}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n  \r\n          {/* Displaying the label data(India & Bengal) which has been clicked by user in outer piechart*/}\r\n          {showOuterContent && (\r\n            <div className=\"piechart-content\">\r\n              <div className=\"label-count\" key={uniqueId}>\r\n                <h4 id='allResultstext'>All results for {selectedTopic}: {1}</h4>\r\n              </div>\r\n              {myData.map((post) => {\r\n                let { documents } = post\r\n  \r\n                return documents.map((doc, i) => {\r\n                  let title = doc.title\r\n                  let content = doc.content\r\n                  let domain = doc.domain\r\n                  let faculty = doc.faculty\r\n                  //let videoFileName = './rbi/' + doc.video_File_Name + '.mp4'\r\n                  let videoFileName = './ImgVideoData' + '/video/' + doc.title + '.mp4'\r\n  \r\n                  if (title === selectedOuterData?.title && flag === true) {\r\n                    flag = false\r\n\r\n                    let facultyName, domainName, transcript\r\n  \r\n                    {myallData.map((post) => {\r\n                      let { title, summary, faculty, domain, audio_transcript } = post \r\n                      let newTitle = title\r\n    \r\n                      summary = summary[0].toUpperCase() + summary.slice(1,)\r\n                      transcript = audio_transcript\r\n\r\n                      if(doc.title === newTitle){\r\n                        content = extractFiveSentences(summary)\r\n                        facultyName = faculty\r\n                        domainName = domain\r\n                      }\r\n                    })}\r\n  \r\n                    let filters = addfilter(facultyName, facultySelected, domainName, subjectSelected)\r\n  \r\n                    if(filters)\r\n                      return (<div key={i}> {displayContent(title,content,transcript,videoFileName)} </div>)\r\n                  }\r\n                })\r\n              })}\r\n            </div>\r\n          )}\r\n  \r\n          {/* Displaying all the data which exist in clustered file */}\r\n          {showAllInnerContent && (\r\n            <div className=\"piechart-content\">\r\n              {myData.map((post) => {\r\n                let { labels, documents } = post\r\n\r\n                labels = labels[0]\r\n\r\n                return documents.map((doc, i) => {\r\n                  let title = doc.title\r\n                  let content = doc.content\r\n                  //let domain = doc.domain\r\n                  //let faculty = doc.faculty\r\n                  let videoFileName = './ImgVideoData' + '/video/' + doc.title + '.mp4'\r\n\r\n                  let facultyName, domainName, transcript\r\n\r\n                  {myallData.map((post) => {\r\n                    let { title, summary, faculty, domain, audio_transcript } = post \r\n                    let newTitle = title\r\n  \r\n                    summary = summary[0].toUpperCase() + summary.slice(1,)\r\n                    transcript = audio_transcript\r\n                    \r\n                    if(doc.title === newTitle){\r\n                      content = extractFiveSentences(summary)\r\n                      facultyName = faculty\r\n                      domainName = domain\r\n                    }\r\n                  })}\r\n\r\n                  allLabelCount = count\r\n                  display = true\r\n\r\n                  let filters = addfilter(facultyName, facultySelected, domainName, subjectSelected)\r\n\r\n                  if(filters)\r\n                    return (<div key={i}> {displayContent(title,content,transcript,videoFileName)} </div>)\r\n                })\r\n              })}\r\n\r\n              {display && (\r\n                <div className=\"label-count\" key={uniqueId}>\r\n                  <h4 id='allResultstext'>All results: {allLabelCount}</h4>\r\n                  {renderFilterOverlay()} \r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Charts","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\PieChart\\List.js",["117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],[],"import axios from \"axios\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport VideoDetails from \"../VideoDetails\"\r\nimport ListChartVideoProgress from './ListChartVideoProgress'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Popover from 'react-bootstrap/Popover';\r\n\r\nfunction List(props) {\r\n  let searchData = props.searchData\r\n\r\n  const [myData, setMyData] = useState([])\r\n  const [myAlllabel, setAllLabels] = useState(true)\r\n  const [mylabel, setLabels] = useState(null)\r\n  const [myallData, setmyallData] = useState([])\r\n\r\n  let myDataLength, display = false\r\n  let jsonPathCluster, jsonPath, labelCount = 0, allLabelCount = 0\r\n  let [selectedTopic, setSelectedTopic] = useState(null)\r\n  let uniqueId = Math.floor(Math.random() * 100) + 1; \r\n\r\n  if (\"INDIA\".includes(searchData)) {\r\n    jsonPathCluster = \"./india-cluster.json\"\r\n    jsonPath = './india.json'\r\n  } \r\n  else if (\"PHYSICS\".includes(searchData)) {\r\n    jsonPathCluster = \"./physics-cluster.json\"\r\n    jsonPath = './physics.json'\r\n  } \r\n  else if (\"LAW\".includes(searchData)) {\r\n    jsonPathCluster = \"./law-cluster.json\"\r\n    jsonPath = './law.json'\r\n  }\r\n  else {\r\n    myDataLength = 0      // If that keyword doesn't exist\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios.get(jsonPathCluster).then((res) => setMyData(res.data))\r\n  }, [searchData])\r\n\r\n  useEffect(() => {\r\n    axios.get(jsonPath).then((res) => setmyallData(res.data))\r\n  }, [searchData])\r\n\r\n  const [activeButton, setActiveButton] = useState(null);\r\n  let [facultySelected, setFaculty] = useState('');\r\n  let [subjectSelected, setSubject] = useState('');\r\n  \r\n  let allFacultyName = [], allSubjects = [];\r\n  let [count, setCount] = useState(0);\r\n\r\n  const [filterBtn, setfilterBtn] = useState(false)\r\n\r\n  // Set the value of the label like India & Bengal\r\n  const handleListClick = (event, labels, documents) => {\r\n    setFaculty('')\r\n    setSubject('')\r\n    setSelectedTopic(labels)\r\n\r\n    var currentButton = event.target;\r\n    currentButton.style.backgroundColor = \"grey\";\r\n\r\n    if(activeButton && activeButton !== currentButton) {\r\n      activeButton.style.backgroundColor = \"\";\r\n      activeButton.style.border = \"\";\r\n      activeButton.style.height = \"\"\r\n      activeButton.style.width = \"\"\r\n    }\r\n\r\n    setActiveButton(currentButton);\r\n    setAllLabels(false);\r\n    setLabels(labels);\r\n  };\r\n\r\n  const closeTranscript = () => {\r\n    document.querySelector('#displayTranscript').style.display = 'none'\r\n  }\r\n\r\n  const closeFilterBtn = () => {\r\n    document.querySelector('#displayFilter').style.display = 'none'\r\n  }\r\n\r\n  // Displaying the Description/Audio_Transcript of the video using a popover\r\n  const renderDescriptionOverlay = (content) => {\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\" rootClose placement=\"top\"\r\n        overlay={\r\n          <Popover id={`displayTranscript`} style={{height:\"260px\",width:\"252px\",zIndex:0}}>\r\n            <Popover.Header as=\"h3\">\r\n              Description\r\n              <button id='closeTranscript' onClick={closeTranscript.bind(this)}><i class=\"fa fa-close\"></i></button>\r\n            </Popover.Header>\r\n            <Popover.Body style={{height:\"205px\",width:\"250px\", overflowX:\"hidden\"}}>\r\n              {content}\r\n            </Popover.Body>\r\n          </Popover>\r\n        }\r\n      > \r\n        <button id='descriptionBtn'>Description</button>\r\n      </OverlayTrigger>\r\n    )\r\n  }\r\n\r\n  // Download audio_transcript\r\n  const downloadTxtFile = (title,transcript) => {\r\n    const element = document.createElement('a');\r\n    element.style.fontFamily = 'Arial';\r\n    element.style.fontSize = '20px';\r\n    element.style.textAlign = 'justify';\r\n    \r\n    const file = new Blob([transcript], {\r\n      type: \"text/html; charset=utf-8\",\r\n    });\r\n  \r\n    element.href = URL.createObjectURL(file);\r\n    element.download = title + \".doc\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  } \r\n\r\n  //Remove duplicate videos based on title\r\n  const displayedTitles = [];\r\n\r\n  // Display the video, watch video button and description\r\n  const displayContent = (title,content,audio_transcript,videoFileName) => {\r\n    if (!displayedTitles.includes(title)){      // Check if title already displayed/exist don't show that video\r\n      count++;\r\n      displayedTitles.push(title);\r\n      \r\n      // <video src={videoFileName} controls height=\"360px\" width=\"100%\" id='video-player'></video>\r\n\r\n      return (\r\n        <div className=\"displaylistContent\">\r\n          <h4 id=\"list-title\">{title}</h4>\r\n          <ListChartVideoProgress myTitle={title} myVideoFileName={videoFileName} showDiv={showDiv}/>\r\n          {renderDescriptionOverlay(content)}\r\n          <button id='view-VideoDetails' onClick={() => handleshowDiv(title, videoFileName)}>Watch Detailed Video</button> \r\n          <button id='downloadBtn' onClick={downloadTxtFile.bind(this,title,audio_transcript)}>Download Notes</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const [showDiv, setShowDiv] = useState(false);\r\n  const [myTitle, setTitle] = useState();\r\n  const [myVideoFileName, setVideoFileName] = useState();\r\n\r\n  // Set value for title & videoFileName for Watch Video \r\n  const handleshowDiv = (title,videoFileName) => {\r\n    setShowDiv(true)\r\n    setTitle(title)\r\n    setVideoFileName(videoFileName)\r\n  };\r\n\r\n  const handlehideDiv = () => {\r\n    setShowDiv(false)\r\n    setTitle()\r\n    setVideoFileName()\r\n  }\r\n\r\n  // Set the faculty which is selected in search input of Faculty\r\n  const onFacultyChange = () => {\r\n    let selectedTeacher = document.getElementById(\"inputValFaculty\").value;\r\n\r\n    if(selectedTeacher === \"Default\") \r\n      selectedTeacher = \"\";\r\n    \r\n    setFaculty(selectedTeacher)\r\n  };\r\n\r\n  // Set the subject which is selected in search input of Subject\r\n  const onSubjectChange = () => {\r\n    let selectedSubject = document.getElementById(\"inputValSubject\").value;\r\n    \r\n    if(selectedSubject === \"Default\") \r\n      selectedSubject = \"\";\r\n    \r\n    setSubject(selectedSubject)\r\n  };\r\n\r\n  \r\n\r\n  const handleFilterBtn = () => {\r\n    setfilterBtn(true)\r\n  }\r\n\r\n  // Used to reset the filters\r\n  const handleResetFilter = () => {\r\n    document.getElementById(\"inputValFaculty\").value = ''\r\n    document.getElementById(\"inputValSubject\").value = ''\r\n    setFaculty('')\r\n    setSubject('')\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(searchData !== '') {\r\n      setFaculty('');\r\n      setSubject('');\r\n    }\r\n  }, [searchData]);\r\n\r\n\r\n  // Display only 5 sentences of a audio_transcript\r\n  const extractFiveSentences = (inputText) => {\r\n    const sentences = inputText.split('.');\r\n    const validSentences = sentences.filter(sentence => sentence.trim() !== '');\r\n  \r\n    if (validSentences.length >= 5) {\r\n      return validSentences.slice(0, 5).join('. ') + '.';\r\n    } else {\r\n      return validSentences.join('. ') + '.';\r\n    }\r\n  }\r\n\r\n  // Display the filters\r\n  const renderFilterOverlay = () => {\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\"\r\n        rootClose\r\n        placement=\"bottom-end\"\r\n        overlay={\r\n          <Popover id={`displayFilter`} style={{ height: \"260px\", width: \"230px\", zIndex: 0 }}>\r\n            <Popover.Header as=\"h3\" style={{display: \"flex\"}}>\r\n              Filter\r\n              <button id=\"resetBtn\" onClick={handleResetFilter}>Reset</button>\r\n              <button id='closeFilterBtn' onClick={closeFilterBtn.bind(this)}><i className=\"fa fa-close\"></i></button>\r\n            </Popover.Header>\r\n            <Popover.Body style={{ height: \"205px\", width: \"242.5px\" }}>\r\n              <div>\r\n                <div className=\"selectedValue\">\r\n                  {facultySelected} {subjectSelected}\r\n                </div>\r\n                <div id='facultyFilter'>\r\n                  Faculty\r\n                  \r\n                  <input id=\"inputValFaculty\" list=\"select-faculty\" placeholder=\"Search for faculty\" onChange={onFacultyChange} />\r\n                  <datalist id=\"select-faculty\">\r\n                    <option id=\"option-keyword\" value=\"\">Search for faculty</option>\r\n                    {[...new Set(allFacultyName)].map((option, index) => (\r\n                      <option key={index}>{option}</option>\r\n                    ))}\r\n                  </datalist>\r\n                </div>\r\n\r\n                <div id='subjectFilter'>\r\n                  Subject\r\n\r\n                  <input id=\"inputValSubject\" list=\"select-subject\" placeholder=\"Search for subject\" onChange={onSubjectChange} />\r\n                  <datalist id=\"select-subject\">\r\n                    <option id=\"option-keyword\" value=\"\">Search for subject</option>\r\n                    {[...new Set(allSubjects)].map((option, index) => {\r\n                      return <option key={index}> {option} </option>;\r\n                    })}\r\n                  </datalist>\r\n                </div>\r\n              </div>\r\n            </Popover.Body>\r\n          </Popover>\r\n        }\r\n      >\r\n        <button id='filterBtn' onClick={handleFilterBtn}>Filter</button>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n\r\n  // Adding condition for the filters\r\n  const addfilter = (faculty, facultySelected, domain, subjectSelected) => {\r\n    return (facultySelected === faculty && subjectSelected === domain) || \r\n      (facultySelected === faculty && subjectSelected === '') ||\r\n      (facultySelected === '' && subjectSelected === domain) ||\r\n      (facultySelected === '' && subjectSelected === '')\r\n  }\r\n\r\n  let allLabelsList = []\r\n  \r\n  if(myDataLength === 0){\r\n    return (\r\n      <h3 id='noResults'>No results found</h3>\r\n    )\r\n  }\r\n  else{\r\n    return (\r\n      <div className=\"displayList\">\r\n        {/* Used to display videoDetails */}\r\n        {showDiv && (\r\n          <div id=\"overlay\">\r\n            <button id='closeBtn' onClick={handlehideDiv}>\r\n              <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n            </button>\r\n            <VideoDetails myTitle={myTitle} myVideoFileName={myVideoFileName} showDiv={showDiv}/>\r\n          </div>\r\n        )}\r\n  \r\n        <div id=\"listView\">\r\n          {myallData.map((post) => {\r\n            let { title, summary, faculty, domain } = post \r\n\r\n            allSubjects.push(domain.toUpperCase())\r\n            allFacultyName.push(faculty.toUpperCase())\r\n          })}\r\n          {myData.map((post) => {\r\n            let { labels, documents } = post\r\n  \r\n            labels = labels[0]\r\n  \r\n            \r\n  \r\n            documents.map((doc, i) => {\r\n              let domain = doc.domain\r\n              let faculty = doc.faculty\r\n  \r\n              //allSubjects.push(domain)\r\n              //allFacultyName.push(faculty)\r\n            })\r\n  \r\n            {/* Display the label buttons, here labels are India & Bengal */}\r\n            return (\r\n              <div className=\"displayLabelList\">\r\n                <button id=\"list-btn\" onClick={(event) => handleListClick(event, labels, documents)}>\r\n                  {labels}\r\n                </button>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n  \r\n        {/* Displaying all the data which exist in clustered file */}\r\n        {myAlllabel && (\r\n          <div className=\"list-content\" id=\"list-content\">\r\n            <div className=\"labels-Data\">\r\n              {myData.map((post) => {\r\n                \r\n                let { labels, documents } = post\r\n  \r\n                labels = labels[0]\r\n  \r\n                return documents.map((doc, i) => {\r\n                  let content\r\n                  let title = doc.title\r\n                  //let content = doc.content\r\n                  //let domain = doc.domain\r\n                  //let faculty = doc.faculty\r\n                  \r\n                  let videoFileName = './ImgVideoData' + '/video/' + doc.title + '.mp4'\r\n                  //let videoFileName = './' + doc.title + '/' + doc.title + '.mp4'\r\n                  //let videoFileName = './' + title + '/' + title + '.mp4'\r\n  \r\n                  let facultyName, domainName, transcript\r\n\r\n                  {myallData.map((post) => {\r\n                    let { title, summary, faculty, domain, audio_transcript } = post \r\n\r\n                    summary = summary[0].toUpperCase() + summary.slice(1,)\r\n                    transcript = audio_transcript\r\n  \r\n                    if(doc.title === title){\r\n                      content = extractFiveSentences(summary)\r\n                      facultyName = faculty\r\n                      domainName = domain\r\n                    }\r\n                  })}\r\n  \r\n                  let filters = addfilter(facultyName, facultySelected, domainName, subjectSelected)\r\n\r\n                  allLabelCount = count                  \r\n                  display = true\r\n  \r\n                  if(filters){\r\n                    return (<div key={i}> {displayContent(title,content,transcript,videoFileName)} </div>)\r\n                  }\r\n                })\r\n              })}\r\n            </div>\r\n\r\n            {display && (\r\n              <div className=\"label-count\">\r\n                <h4 id='allResultstext'>All results: {allLabelCount}</h4>\r\n                {renderFilterOverlay()}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n  \r\n        {/* Displaying the label data(India & Bengal) which has been clicked by user */}\r\n        {mylabel && (\r\n          <div className=\"list-content\" id=\"list-content\">       \r\n            <div className=\"labels-Data\">\r\n              {myData.map((post) => {\r\n                let { labels, documents } = post\r\n  \r\n                labels = labels[0]\r\n  \r\n                if(mylabel === labels) {\r\n                  return documents.map((doc, i) => {\r\n                    \r\n                    let title = doc.title\r\n                    allLabelsList.push(title)\r\n                    //let content = doc.content\r\n                    let content\r\n                    //let domain = doc.domain\r\n                    //let faculty = doc.faculty\r\n                    let videoFileName = './ImgVideoData' + '/video/' + doc.title + '.mp4'\r\n  \r\n                    let facultyName, domainName, transcript \r\n\r\n                    {myallData.map((post) => {\r\n                      let { title, summary, faculty, domain, audio_transcript } = post \r\n                      let newTitle = title\r\n\r\n                      summary = summary[0].toUpperCase() + summary.slice(1,)\r\n                      transcript = audio_transcript\r\n    \r\n                      if(doc.title === newTitle){\r\n                        content = extractFiveSentences(summary)\r\n                        facultyName = faculty\r\n                        domainName = domain\r\n                      }\r\n                    })}\r\n  \r\n                    let filters = addfilter(facultyName, facultySelected, domainName, subjectSelected)\r\n\r\n                    if(facultySelected !== '' || subjectSelected !== '')\r\n                      labelCount = count\r\n                    else\r\n                      labelCount = count + 1\r\n                    \r\n                    display = true\r\n\r\n                    if(filters)\r\n                      return (<div key={i}> {displayContent(title,content,transcript,videoFileName)} </div>) \r\n                  })\r\n                }\r\n              })}\r\n            </div>\r\n\r\n            {display && (\r\n              <div className=\"label-count\">\r\n                <h4 id='allResultstext'>All results for {selectedTopic}: {labelCount}</h4>\r\n                {renderFilterOverlay()}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\Progressbar\\ProgressBar.js",["139","140"],[],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport Chunk from \"./Chunk\";\r\n\r\nconst ProgressBar = ({ duration, onTimeUpdate, chunks, videotimeNow }) => {\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [progressTime, setProgressTime] = useState(0);\r\n  const [progressWidth, setProgressWidth] = useState(0);\r\n  const [exactProgress, setExactProgress] = useState(0);\r\n\r\n  const progressBarRef = useRef(null);\r\n  const progressBarWrapperRef = useRef(null);\r\n\r\n  let chunksToShow = [];\r\n\r\n  const uniqueTopics = chunks.reduce((acc, topic) => {\r\n    if (!acc[topic.topic]) {\r\n      acc[topic.topic] = { ...topic };\r\n    } else {\r\n      acc[topic.topic].end = topic.end;\r\n    }\r\n    return acc;\r\n  }, {});\r\n\r\n  chunks = Object.values(uniqueTopics).map((topic) => ({ ...topic, start: topic.start }));\r\n\r\n  const handleProgressClick = (event) => {\r\n    event.preventDefault();\r\n    const progressBar = progressBarRef.current;\r\n    const progressClicked = event.clientX - progressBar.getBoundingClientRect().left;\r\n    const newTime = (progressClicked / progressWidth) * duration;\r\n    const newProgress = (progressClicked / progressWidth) * 100;\r\n    setProgressTime(progressClicked);\r\n    onTimeUpdate(newTime);\r\n    setExactProgress(newProgress);\r\n  };\r\n\r\n  const progress = (exactProgress / 100) * duration;\r\n\r\n  chunks.forEach((chunk) => {\r\n    const chunkClass =\r\n      progress >= chunk.start && progress <= chunk.end ? \"chunk active\" : \"chunk\";\r\n\r\n    if (progress >= chunk.end) {\r\n      chunksToShow.push(\r\n        <div className={chunkClass} key={`${chunk.start}-${chunk.end}`} />\r\n      );\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const progressBar = progressBarRef.current;\r\n\r\n    const handleTimeUpdate = () => {\r\n      setCurrentTime(progressBar.currentTime);\r\n    };\r\n\r\n    progressBar.addEventListener(\"timeupdate\", handleTimeUpdate);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const progressBarWrapper = progressBarWrapperRef.current;\r\n    const handleResize = () => {\r\n      setProgressWidth(progressBarWrapper.offsetWidth);\r\n    };\r\n\r\n    handleResize();\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, [progressBarWrapperRef]);\r\n\r\n  const renderChunks = () => {\r\n    return chunks.map((chunk, index) => (\r\n      <Chunk\r\n        key={index}\r\n        {...chunk}\r\n        duration={duration}\r\n        progress={progress}\r\n      />\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"progress-bar-wrapper\"\r\n      ref={progressBarWrapperRef}\r\n      onClick={handleProgressClick}\r\n    >\r\n      <div className=\"progress-bar\" ref={progressBarRef}>\r\n        {renderChunks()}\r\n        <div\r\n          className=\"progress-bar-thumb\"\r\n          style={{ left: `${videotimeNow}%` }}\r\n        />\r\n        {/* \r\n          <div className=\"exact-progress-bar\" style={{ width: `${exactProgress}%` }}>\r\n            <div className=\"exact-progress-bar-label\">\r\n              //{exactProgress.toFixed(2)}% \r\n              <div id='labelprogress-box'></div>\r\n            </div>\r\n          </div>\r\n        */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\PieChart\\ListChartVideoProgress.js",["141","142","143","144","145","146","147","148","149","150","151","152","153","154","155"],[],"import axios from \"axios\"\r\nimport { BiFullscreen } from \"react-icons/bi\"\r\nimport ProgressBar from \"../Progressbar/ProgressBar\"\r\nimport React, { useState, useEffect, useRef } from \"react\"\r\n\r\nfunction ListChartVideoProgress(props) {\r\n  const [myData, setMyData] = useState([])\r\n  const [searchKeyword, setSearchKeyword] = useState(0)\r\n\r\n  const chunks = []\r\n  const videoRef = useRef() \r\n  \r\n  const [duration, setDuration] = useState(0)\r\n  const [currentTime, setCurrentTime] = useState(0)\r\n  const [videotimeNow, setCurrentVideoTime] = useState(0) \r\n  const [displayKeywordContainer,setDisplayKeywordContainer] = useState(false)\r\n\r\n  const progressTooltipRef = useRef(null);\r\n  const [fullscreen, setFullscreen] = useState(false);\r\n  const [fullscreenProgressBar, setfullscreenProgressBar] = useState(false)\r\n\r\n  let showDiv = props.showDiv\r\n  let localtitle = props.myTitle\r\n  let videoFileName = props.myVideoFileName\r\n\r\n  // Setting the API/JSON data\r\n  useEffect(() => {\r\n    axios.get(\"./india.json\").then((res) => setMyData(res.data))\r\n  }, [])\r\n\r\n  // Function to remove duplicates appearing in the search input \r\n  const removeDuplicateKeywords = () => {\r\n    const list = []\r\n    const set = new Set()\r\n\r\n    return {\r\n      push(element) {\r\n        if (!set.has(element)) {\r\n          list.push(element)\r\n          set.add(element)\r\n        }\r\n      },\r\n      get() {\r\n        return list\r\n      },\r\n    }\r\n  }\r\n\r\n  // Remove all duplicate keywords appearing in the search input \r\n  let allKeywords = removeDuplicateKeywords()\r\n\r\n  // Takes us to give time duration in the video\r\n  const handleSeekTo = (time) => {\r\n    if(videoRef.current)\r\n      videoRef.current.currentTime = time + 1\r\n  }\r\n\r\n  // Converting hh:mm:ss to seconds\r\n  const toSeconds = (timeString) => {\r\n    timeString = timeString + \"\"\r\n    let time = timeString.split(\":\")\r\n\r\n    let hr = parseInt(time[0], 10)\r\n    let min = parseInt(time[1], 10)\r\n    let sec = parseInt(time[2], 10)\r\n\r\n    return hr * 3600 + min * 60 + sec\r\n  }\r\n\r\n  // Search a topic inside the video\r\n  const handleSearch = () => {\r\n    setDisplayKeywordContainer(true)\r\n    let selectedkeyword = document.getElementById(\"inputVal\").value\r\n    selectedkeyword = selectedkeyword.toUpperCase()\r\n\r\n    if(selectedkeyword === \"Default\") \r\n      selectedkeyword = \"\"\r\n    setSearchKeyword(selectedkeyword)\r\n  }\r\n\r\n  const handleTimeUpdate = (newTime) => {\r\n    videoRef.current.currentTime = newTime\r\n    setCurrentTime(newTime)\r\n  }\r\n\r\n  // Gives the entire video duration\r\n  const handleDurationChange = () => {\r\n    setDuration(videoRef.current.duration)\r\n  }\r\n\r\n  function handleTime() {\r\n    setCurrentTime(videoRef.current.currentTime)\r\n    setCurrentVideoTime(videoRef.current.currentTime)\r\n  }\r\n\r\n  let [displayProgresss, setdisplayProgresss] = useState(true) \r\n\r\n  // Function to adjust to fullscreen view\r\n  const toggleFullScreen = async (event) => {\r\n    setdisplayProgresss(false)\r\n    const container = document.getElementById(\"video-container\");\r\n    const fullscreenApi = container.requestFullscreen || container.webkitRequestFullScreen ||\r\n      container.mozRequestFullScreen || container.msRequestFullscreen;\r\n\r\n    if(!document.fullscreenElement) {\r\n      setFullscreen(true);\r\n      fullscreenApi.call(container);\r\n    } \r\n    else {\r\n      document.exitFullscreen();\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  // Event handler to detect fullscreen mode changes\r\n  const handleFullScreenChange = () => {\r\n    if (!document.fullscreenElement) {\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  // Register the event listener\r\n  document.addEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n\r\n  // Removes the event listener when the component is unmounted/removed\r\n  useEffect(() => {\r\n    return () => {\r\n      document.removeEventListener(\"fullscreenchange\", handleFullScreenChange);\r\n    };\r\n  }, []);\r\n\r\n  // Shows time in correct format mm:ss\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${String(seconds).padStart(2, \"0\")}`;\r\n  }\r\n\r\n  // Display topic in the progressbar of video\r\n  const displayTopic = (event) => {\r\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'none'\r\n    const rect = event.target.getBoundingClientRect();\r\n    const x = event.clientX - rect.left;\r\n    const percentage = x / rect.width;\r\n    const time = duration * percentage;\r\n    let textToDisplay = '';\r\n\r\n    for(let i=0;i<chunks.length;i++){\r\n      let chunksData = chunks[i];\r\n\r\n      if((time > chunksData.start) && (time < chunksData.end))\r\n        textToDisplay = chunksData.topic\r\n    }\r\n\r\n    setfullscreenProgressBar(true)\r\n\r\n    if(fullscreen === true && progressTooltipRef.current) {\r\n      progressTooltipRef.current.style.display = \"block\";\r\n      progressTooltipRef.current.style.left = `${event.clientX}px`;\r\n      progressTooltipRef.current.style.top = `${rect.top - progressTooltipRef.current.offsetHeight}px`;\r\n      progressTooltipRef.current.innerText = textToDisplay + \" \" + formatTime(time);\r\n    }\r\n  };\r\n  \r\n  // Hides the topic to be displayed when outside the fullscreen view\r\n  const notdisplayTopic = () => {\r\n    //document.getElementById('fullscreen-toggle-btn').style.display = 'block'\r\n    setfullscreenProgressBar(false)\r\n\r\n    if(fullscreen === true && progressTooltipRef.current) {\r\n      progressTooltipRef.current.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  const [progress, setProgress] = useState(0);\r\n  \r\n  useEffect(() => {\r\n    const handleProgress = () => {\r\n      if (videoRef.current && !isNaN(videoRef.current.duration)) {\r\n        setProgress(\r\n          (videoRef.current.currentTime / videoRef.current.duration) * 100\r\n        );\r\n      }\r\n    };\r\n\r\n    if (videoRef.current) {\r\n      videoRef.current.addEventListener(\"timeupdate\", handleProgress);\r\n    }\r\n\r\n    return () => {\r\n      if (videoRef.current) {\r\n        videoRef.current.removeEventListener(\"timeupdate\", handleProgress);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleProgressBarChange = (e) => {\r\n    const progressBarValue = e.target.value;\r\n    setProgress(progressBarValue);\r\n    if (videoRef.current && !isNaN(videoRef.current.duration)) {\r\n      const seekTime = (progressBarValue / 100) * videoRef.current.duration;\r\n      videoRef.current.currentTime = seekTime;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"listChartVideo-Progress\">\r\n      <div>\r\n        {myData.map((post) => {\r\n          let { title, faculty, domain, chapters_list, image_metadata } = post\r\n\r\n          title = title.toUpperCase()\r\n          faculty = faculty.toUpperCase()\r\n          domain = domain.toUpperCase()\r\n          localtitle = localtitle.toUpperCase()\r\n\r\n          if(title === localtitle) {\r\n            let len = Object.keys(chapters_list).length\r\n            let timeStamp = []\r\n            let imgSrc,imgFile\r\n\r\n            for(let i = 1; i <= len; i++) {\r\n              let obj = chapters_list[i]\r\n              let startTime = obj[0]\r\n              let endTime = obj[1]\r\n              let keywords = obj[3]\r\n\r\n              //let imageData = image_metadata[i].image_filename\r\n              //let imagePath = imageData[0]\r\n              //let imagePath = imageData[2]\r\n              //let imagePath = imageData[i]\r\n\r\n              let imagePath;\r\n\r\n              let imageFilenames = image_metadata.image_filename;\r\n              \r\n              imagePath = imageFilenames[i-1]\r\n              \r\n\r\n              if(keywords === searchKeyword) {\r\n                imgSrc = imagePath\r\n                imgFile = title\r\n              }\r\n\r\n              keywords = keywords.toUpperCase()\r\n              allKeywords.push(keywords)\r\n              \r\n              keywords = keywords.toUpperCase()\r\n\r\n              let startTimeSeconds = toSeconds(startTime)\r\n              let endTimeSeconds = toSeconds(endTime)\r\n\r\n              //Random colors\r\n              const colors = [ \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#800000\", \"#FFA500\", \"#FFFFF0\", ]\r\n\r\n              const newChunk = {\r\n                start: startTimeSeconds,\r\n                end: endTimeSeconds - 1.5,\r\n                //color: colors[Math.floor(Math.random() * colors.length)],\r\n                color: \"gray\",\r\n                topic: keywords,\r\n              }\r\n\r\n              chunks.push(newChunk)                 // Inserting all data related to a topic inside chunks[]\r\n            }\r\n          }\r\n        })}\r\n      </div>\r\n\r\n      <div className=\"listChartVideo-video\">\r\n        <div className=\"row\" id=\"video-container\"> {/* Displaying video */}\r\n          <video\r\n            ref={videoRef}\r\n            src={videoFileName}\r\n            onTimeUpdate={handleTime}\r\n            onDurationChange={handleDurationChange}\r\n            height={359.6}\r\n            controls\r\n            onMouseMove={displayTopic}\r\n            onMouseOut={notdisplayTopic}\r\n            //onProgress={handleProgress}\r\n            id=\"video-player\"\r\n          />\r\n\r\n          <div id=\"top-overlay\">\r\n            <div>                       {/* Displaying progressbar on top of video */}\r\n              <BiFullscreen                 \r\n                id=\"fullscreen-toggle-btn\"\r\n                role=\"button\"\r\n                class=\"bi bi-fullscreen text-white text-outline\"\r\n                onClick={(event) => toggleFullScreen(event)}\r\n              ></BiFullscreen>\r\n            </div>\r\n          </div>\r\n\r\n          <div id=\"bottom-overlay\">\r\n            {fullscreenProgressBar && (\r\n              <div id=\"progressTooltip\" ref={progressTooltipRef}></div>\r\n            )}\r\n\r\n            {/*Blue color progressbar\r\n            {displayProgresss && (\r\n                <input id=\"progresss\" type=\"range\" min=\"0\" max=\"100\" value={progress} step=\"any\" onChange={handleProgressBarChange}/>\r\n            )}\r\n            */}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Displaying the progress bar by sending data to ProgressBar.js file*/}\r\n        <ProgressBar\r\n          className=\"progressBar\"\r\n          id=\"normalProgressBar\"\r\n          currentTime={currentTime}\r\n          duration={duration}\r\n          onTimeUpdate={handleTimeUpdate}\r\n          chunks={chunks}\r\n          videotimeNow={videotimeNow}\r\n          value={2}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListChartVideoProgress","E:\\Makonis\\New folder\\Makonis\\my-app\\src\\Components\\SubComponents\\Progressbar\\Chunk.js",["156"],[],"import React, { useState } from \"react\";\r\n\r\nconst Chunk = ({ start, end, duration, progressTime, color, topic }) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const colors = [ \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#808080\", \"#FFFFFF\", \"#000000\" ];\r\n\r\n  //let randomColors = colors[Math.floor(Math.random() * colors.length)];\r\n\r\n  const chunkWidth = `${((end - start) / duration) * 100}%`;\r\n  const chunkLeft = `${(start / duration) * 100}%`;\r\n\r\n  const chunkStyle = {\r\n    width: chunkWidth,\r\n    left: chunkLeft,\r\n    backgroundColor: \"darkgrey\",\r\n    position: \"absolute\"\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"chunk\"\r\n      style={chunkStyle}\r\n      onMouseOver={() => setIsHovered(true)}\r\n      onMouseOut={() => setIsHovered(false)}\r\n    >\r\n      {isHovered && <p id=\"topic\">{topic}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chunk;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nimport React, { useState } from \"react\";\r\n\r\nconst Chunk = ({ start, end, duration, progressTime, color, topic }) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const colors = [ \"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#800000\", \"#008000\", \"#000080\", \"#808000\", \"#800080\", \"#008080\", \"#C0C0C0\", \"#808080\", \"#FFFFFF\", \"#000000\" ];\r\n\r\n  //let randomColors = colors[Math.floor(Math.random() * colors.length)];\r\n\r\n  const chunkWidth = `${((end - start) / duration) * 100}%`;\r\n  const chunkLeft = `${(start / duration) * 100}%`;\r\n\r\n  const chunkStyle = {\r\n    width: chunkWidth,\r\n    left: chunkLeft,\r\n    backgroundColor: color,\r\n    position: \"absolute\"\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"chunk\"\r\n      style={chunkStyle}\r\n      onMouseOver={() => setIsHovered(true)}\r\n      onMouseOut={() => setIsHovered(false)}\r\n    >\r\n      {isHovered && <p id=\"topic\">{topic}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chunk;\r\n*/",{"ruleId":"157","severity":1,"message":"158","line":2,"column":8,"nodeType":"159","messageId":"160","endLine":2,"endColumn":14},{"ruleId":"161","severity":1,"message":"162","line":84,"column":11,"nodeType":"163","endLine":84,"endColumn":34},{"ruleId":"164","severity":1,"message":"165","line":84,"column":11,"nodeType":"163","endLine":84,"endColumn":34},{"ruleId":"166","severity":1,"message":"167","line":101,"column":28,"nodeType":"168","messageId":"169","endLine":101,"endColumn":30},{"ruleId":"157","severity":1,"message":"170","line":106,"column":34,"nodeType":"159","messageId":"160","endLine":106,"endColumn":42},{"ruleId":"157","severity":1,"message":"171","line":106,"column":53,"nodeType":"159","messageId":"160","endLine":106,"endColumn":62},{"ruleId":"157","severity":1,"message":"172","line":106,"column":64,"nodeType":"159","messageId":"160","endLine":106,"endColumn":74},{"ruleId":"157","severity":1,"message":"173","line":109,"column":13,"nodeType":"159","messageId":"160","endLine":109,"endColumn":19},{"ruleId":"157","severity":1,"message":"174","line":110,"column":13,"nodeType":"159","messageId":"160","endLine":110,"endColumn":20},{"ruleId":"157","severity":1,"message":"175","line":111,"column":13,"nodeType":"159","messageId":"160","endLine":111,"endColumn":18},{"ruleId":"176","severity":1,"message":"177","line":189,"column":18,"nodeType":"159","endLine":189,"endColumn":25},{"ruleId":"164","severity":1,"message":"165","line":207,"column":11,"nodeType":"163","endLine":207,"endColumn":34},{"ruleId":"178","severity":1,"message":"179","line":207,"column":34,"nodeType":"163","endLine":207,"endColumn":77},{"ruleId":"166","severity":1,"message":"180","line":212,"column":28,"nodeType":"168","messageId":"181","endLine":212,"endColumn":30},{"ruleId":"157","severity":1,"message":"174","line":216,"column":11,"nodeType":"159","messageId":"160","endLine":216,"endColumn":18},{"ruleId":"157","severity":1,"message":"173","line":217,"column":11,"nodeType":"159","messageId":"160","endLine":217,"endColumn":17},{"ruleId":"157","severity":1,"message":"182","line":257,"column":21,"nodeType":"159","messageId":"160","endLine":257,"endColumn":27},{"ruleId":"166","severity":1,"message":"167","line":270,"column":17,"nodeType":"183","messageId":"184","endLine":270,"endColumn":23},{"ruleId":"178","severity":1,"message":"179","line":284,"column":25,"nodeType":"163","endLine":284,"endColumn":78},{"ruleId":"157","severity":1,"message":"185","line":3,"column":25,"nodeType":"159","messageId":"160","endLine":3,"endColumn":30},{"ruleId":"157","severity":1,"message":"186","line":3,"column":32,"nodeType":"159","messageId":"160","endLine":3,"endColumn":39},{"ruleId":"157","severity":1,"message":"187","line":3,"column":47,"nodeType":"159","messageId":"160","endLine":3,"endColumn":53},{"ruleId":"157","severity":1,"message":"188","line":30,"column":15,"nodeType":"159","messageId":"160","endLine":30,"endColumn":23},{"ruleId":"176","severity":1,"message":"189","line":112,"column":6,"nodeType":"190","endLine":112,"endColumn":18,"suggestions":"191"},{"ruleId":"176","severity":1,"message":"192","line":119,"column":6,"nodeType":"190","endLine":119,"endColumn":18,"suggestions":"193"},{"ruleId":"166","severity":1,"message":"167","line":350,"column":31,"nodeType":"168","messageId":"169","endLine":350,"endColumn":33},{"ruleId":"157","severity":1,"message":"175","line":351,"column":17,"nodeType":"159","messageId":"160","endLine":351,"endColumn":22},{"ruleId":"157","severity":1,"message":"194","line":351,"column":24,"nodeType":"159","messageId":"160","endLine":351,"endColumn":31},{"ruleId":"166","severity":1,"message":"167","line":357,"column":28,"nodeType":"168","messageId":"169","endLine":357,"endColumn":30},{"ruleId":"157","severity":1,"message":"195","line":360,"column":11,"nodeType":"159","messageId":"160","endLine":360,"endColumn":17},{"ruleId":"166","severity":1,"message":"167","line":369,"column":34,"nodeType":"168","messageId":"169","endLine":369,"endColumn":36},{"ruleId":"166","severity":1,"message":"180","line":478,"column":34,"nodeType":"168","messageId":"181","endLine":478,"endColumn":36},{"ruleId":"166","severity":1,"message":"180","line":484,"column":49,"nodeType":"168","messageId":"181","endLine":484,"endColumn":51},{"ruleId":"196","severity":1,"message":"197","line":490,"column":58,"nodeType":"198","messageId":"199","endLine":490,"endColumn":59},{"ruleId":"200","severity":1,"message":"201","line":494,"column":21,"nodeType":"202","messageId":"203","endLine":506,"endColumn":24},{"ruleId":"166","severity":1,"message":"167","line":494,"column":43,"nodeType":"168","messageId":"169","endLine":494,"endColumn":45},{"ruleId":"166","severity":1,"message":"180","line":541,"column":47,"nodeType":"168","messageId":"181","endLine":541,"endColumn":49},{"ruleId":"157","severity":1,"message":"173","line":544,"column":23,"nodeType":"159","messageId":"160","endLine":544,"endColumn":29},{"ruleId":"157","severity":1,"message":"174","line":545,"column":23,"nodeType":"159","messageId":"160","endLine":545,"endColumn":30},{"ruleId":"196","severity":1,"message":"197","line":547,"column":56,"nodeType":"198","messageId":"199","endLine":547,"endColumn":57},{"ruleId":"200","severity":1,"message":"201","line":554,"column":21,"nodeType":"202","messageId":"203","endLine":566,"endColumn":24},{"ruleId":"166","severity":1,"message":"167","line":554,"column":43,"nodeType":"168","messageId":"169","endLine":554,"endColumn":45},{"ruleId":"157","severity":1,"message":"195","line":584,"column":17,"nodeType":"159","messageId":"160","endLine":584,"endColumn":23},{"ruleId":"166","severity":1,"message":"180","line":586,"column":47,"nodeType":"168","messageId":"181","endLine":586,"endColumn":49},{"ruleId":"196","severity":1,"message":"197","line":591,"column":56,"nodeType":"198","messageId":"199","endLine":591,"endColumn":57},{"ruleId":"200","severity":1,"message":"201","line":595,"column":19,"nodeType":"202","messageId":"203","endLine":607,"endColumn":22},{"ruleId":"166","severity":1,"message":"167","line":595,"column":41,"nodeType":"168","messageId":"169","endLine":595,"endColumn":43},{"ruleId":"157","severity":1,"message":"204","line":19,"column":7,"nodeType":"159","messageId":"160","endLine":19,"endColumn":15},{"ruleId":"176","severity":1,"message":"192","line":39,"column":6,"nodeType":"190","endLine":39,"endColumn":18,"suggestions":"205"},{"ruleId":"176","severity":1,"message":"189","line":43,"column":6,"nodeType":"190","endLine":43,"endColumn":18,"suggestions":"206"},{"ruleId":"157","severity":1,"message":"188","line":50,"column":15,"nodeType":"159","messageId":"160","endLine":50,"endColumn":23},{"ruleId":"157","severity":1,"message":"207","line":52,"column":10,"nodeType":"159","messageId":"160","endLine":52,"endColumn":19},{"ruleId":"166","severity":1,"message":"167","line":297,"column":33,"nodeType":"168","messageId":"169","endLine":297,"endColumn":35},{"ruleId":"157","severity":1,"message":"175","line":298,"column":19,"nodeType":"159","messageId":"160","endLine":298,"endColumn":24},{"ruleId":"157","severity":1,"message":"194","line":298,"column":26,"nodeType":"159","messageId":"160","endLine":298,"endColumn":33},{"ruleId":"166","severity":1,"message":"167","line":310,"column":36,"nodeType":"168","messageId":"169","endLine":310,"endColumn":38},{"ruleId":"157","severity":1,"message":"173","line":311,"column":19,"nodeType":"159","messageId":"160","endLine":311,"endColumn":25},{"ruleId":"157","severity":1,"message":"174","line":312,"column":19,"nodeType":"159","messageId":"160","endLine":312,"endColumn":26},{"ruleId":"200","severity":1,"message":"201","line":318,"column":13,"nodeType":"202","messageId":"203","endLine":318,"endColumn":78},{"ruleId":"157","severity":1,"message":"195","line":337,"column":17,"nodeType":"159","messageId":"160","endLine":337,"endColumn":23},{"ruleId":"166","severity":1,"message":"180","line":339,"column":47,"nodeType":"168","messageId":"181","endLine":339,"endColumn":49},{"ruleId":"196","severity":1,"message":"197","line":346,"column":56,"nodeType":"198","messageId":"199","endLine":346,"endColumn":57},{"ruleId":"200","severity":1,"message":"201","line":352,"column":19,"nodeType":"202","messageId":"203","endLine":363,"endColumn":22},{"ruleId":"166","severity":1,"message":"167","line":352,"column":41,"nodeType":"168","messageId":"169","endLine":352,"endColumn":43},{"ruleId":"166","severity":1,"message":"180","line":390,"column":34,"nodeType":"168","messageId":"181","endLine":390,"endColumn":36},{"ruleId":"166","severity":1,"message":"180","line":396,"column":49,"nodeType":"168","messageId":"181","endLine":396,"endColumn":51},{"ruleId":"196","severity":1,"message":"197","line":404,"column":58,"nodeType":"198","messageId":"199","endLine":404,"endColumn":59},{"ruleId":"200","severity":1,"message":"201","line":408,"column":21,"nodeType":"202","messageId":"203","endLine":420,"endColumn":24},{"ruleId":"166","severity":1,"message":"167","line":408,"column":43,"nodeType":"168","messageId":"169","endLine":408,"endColumn":45},{"ruleId":"157","severity":1,"message":"208","line":5,"column":10,"nodeType":"159","messageId":"160","endLine":5,"endColumn":21},{"ruleId":"157","severity":1,"message":"209","line":6,"column":10,"nodeType":"159","messageId":"160","endLine":6,"endColumn":22},{"ruleId":"157","severity":1,"message":"210","line":16,"column":10,"nodeType":"159","messageId":"160","endLine":16,"endColumn":33},{"ruleId":"157","severity":1,"message":"211","line":22,"column":7,"nodeType":"159","messageId":"160","endLine":22,"endColumn":14},{"ruleId":"157","severity":1,"message":"212","line":53,"column":9,"nodeType":"159","messageId":"160","endLine":53,"endColumn":21},{"ruleId":"157","severity":1,"message":"213","line":71,"column":9,"nodeType":"159","messageId":"160","endLine":71,"endColumn":21},{"ruleId":"157","severity":1,"message":"214","line":96,"column":8,"nodeType":"159","messageId":"160","endLine":96,"endColumn":24},{"ruleId":"157","severity":1,"message":"215","line":175,"column":10,"nodeType":"159","messageId":"160","endLine":175,"endColumn":18},{"ruleId":"176","severity":1,"message":"177","line":192,"column":18,"nodeType":"159","endLine":192,"endColumn":25},{"ruleId":"157","severity":1,"message":"216","line":197,"column":9,"nodeType":"159","messageId":"160","endLine":197,"endColumn":32},{"ruleId":"166","severity":1,"message":"167","line":209,"column":28,"nodeType":"168","messageId":"169","endLine":209,"endColumn":30},{"ruleId":"157","severity":1,"message":"174","line":213,"column":11,"nodeType":"159","messageId":"160","endLine":213,"endColumn":18},{"ruleId":"157","severity":1,"message":"173","line":214,"column":11,"nodeType":"159","messageId":"160","endLine":214,"endColumn":17},{"ruleId":"157","severity":1,"message":"217","line":219,"column":17,"nodeType":"159","messageId":"160","endLine":219,"endColumn":26},{"ruleId":"157","severity":1,"message":"218","line":241,"column":17,"nodeType":"159","messageId":"160","endLine":241,"endColumn":23},{"ruleId":"157","severity":1,"message":"219","line":242,"column":17,"nodeType":"159","messageId":"160","endLine":242,"endColumn":24},{"ruleId":"157","severity":1,"message":"182","line":254,"column":21,"nodeType":"159","messageId":"160","endLine":254,"endColumn":27},{"ruleId":"157","severity":1,"message":"182","line":5,"column":9,"nodeType":"159","messageId":"160","endLine":5,"endColumn":15},"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'duration' is assigned a value but never used.","'video_url' is assigned a value but never used.","'transcript' is assigned a value but never used.","'domain' is assigned a value but never used.","'faculty' is assigned a value but never used.","'title' is assigned a value but never used.","react-hooks/exhaustive-deps","The ref value 'videoRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'videoRef.current' to a variable inside the effect, and use that variable in the cleanup function.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'colors' is assigned a value but never used.","ReturnStatement","expectedReturnValue","'Label' is defined but never used.","'Tooltip' is defined but never used.","'Legend' is defined but never used.","'setCount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'jsonPath'. Either include it or remove the dependency array.","ArrayExpression",["220"],"React Hook useEffect has a missing dependency: 'jsonPathCluster'. Either include it or remove the dependency array.",["221"],"'summary' is assigned a value but never used.","'labels' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'uniqueId' is assigned a value but never used.",["222"],["223"],"'filterBtn' is assigned a value but never used.","'currentTime' is assigned a value but never used.","'progressTime' is assigned a value but never used.","'displayKeywordContainer' is assigned a value but never used.","'showDiv' is assigned a value but never used.","'handleSeekTo' is assigned a value but never used.","'handleSearch' is assigned a value but never used.","'displayProgresss' is assigned a value but never used.","'progress' is assigned a value but never used.","'handleProgressBarChange' is assigned a value but never used.","'timeStamp' is assigned a value but never used.","'imgSrc' is assigned a value but never used.","'imgFile' is assigned a value but never used.",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"226","fix":"228"},{"desc":"224","fix":"229"},"Update the dependencies array to be: [jsonPath, searchData]",{"range":"230","text":"231"},"Update the dependencies array to be: [jsonPathCluster, searchData]",{"range":"232","text":"233"},{"range":"234","text":"233"},{"range":"235","text":"231"},[3949,3961],"[jsonPath, searchData]",[4175,4187],"[jsonPathCluster, searchData]",[1323,1335],[1429,1441]]