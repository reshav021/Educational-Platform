import { useState, useEffect } from 'react';
import axios from 'axios';
import isOnline from 'is-online';
import root from 'window-or-global';

var index = (function (_a) {
    var children = _a.children, _b = _a.skip, skip = _b === void 0 ? false : _b, config = _a.config;
    var _c = useState(false), loading = _c[0], setLoading = _c[1];
    var _d = useState(null), error = _d[0], setError = _d[1];
    var _e = useState(null), response = _e[0], setResponse = _e[1];
    var _f = useState(null), networkStatus = _f[0], setNetworkStatus = _f[1];
    useEffect(function () {
        checkNetworkConnection();
        if (!skip) {
            fetch();
        }
    }, []);
    var checkNetworkConnection = function () {
        if ((typeof document != 'undefined') && root && isOnline) {
            root.addEventListener('offline', function () {
                isOnline({ timeout: 1000 })
                    .then(function (online) {
                    if (!online) {
                        setNetworkStatus('offline');
                    }
                });
            });
            root.addEventListener('online', function () {
                isOnline({ timeout: 1000 })
                    .then(function (online) {
                    if (online) {
                        setNetworkStatus('online');
                    }
                });
            });
            isOnline({ timeout: 1000 })
                .then(function (online) {
                if ((online && networkStatus !== 'online') || (!online && networkStatus !== 'offline')) {
                    setNetworkStatus(online ? 'online' : 'offline');
                }
            });
        }
    };
    var fetch = function () {
        if (config) {
            setLoading(true);
            axios(config)
                .then(function (response) {
                setResponse(response);
                setLoading(false);
            })
                .catch(function (error) {
                setError(error);
                setLoading(false);
            });
        }
    };
    // @ts-ignore
    return children({ loading: loading, error: error, response: response, refetch: fetch, networkStatus: networkStatus });
});

export default index;
//# sourceMappingURL=index.es.js.map
